{
    "status": "Confirmed", 
    "last_updated": "2017-07-27 16:58:09.071888+00:00", 
    "description": "We recently hit an issue where an evacuating instance with dedicated cpu_policy being pinned to same host CPUs as other instances with dedicated cpu_policy. During subsequent resource audits we would see cpu pinning errors.\n\nThe root cause appears to be the fact that the resource audit skips the evacuating instance during migration phase of audit while instance was rebuilding on new host.  It appears that _instance_in_resize_state() returned \"false\" because the vm_state was vm_states.ERROR.  We allow rebuilding from the ERROR state though, so we should consider it.", 
    "tags": [
        "compute", 
        "evacuate"
    ], 
    "importance": "Medium", 
    "heat": 8, 
    "link": "https://bugs.launchpad.net/nova/+bug/1688599", 
    "owner": "None", 
    "id": 1688599, 
    "index": 4818, 
    "openned": "2017-05-05 16:22:08.007045+00:00", 
    "created": "2017-05-05 16:22:08.007045+00:00", 
    "title": "cpu_pinning errors after evacuation of instance with cpu_policy", 
    "comments": [
        {
            "content": "We recently hit an issue where an evacuating instance with dedicated cpu_policy being pinned to same host CPUs as other instances with dedicated cpu_policy. During subsequent resource audits we would see cpu pinning errors.\n\nThe root cause appears to be the fact that the resource audit skips the evacuating instance during migration phase of audit while instance was rebuilding on new host.  It appears that _instance_in_resize_state() returned \"false\" because the vm_state was vm_states.ERROR.  We allow rebuilding from the ERROR state though, so we should consider it.", 
            "date_created": "2017-05-05 16:22:08.007045+00:00", 
            "author": "https://api.launchpad.net/1.0/~cbf123"
        }, 
        {
            "content": "Even after updating _instance_in_resize_state() to account for rebuilds from vm_states.ERROR, I think there is a further race condition.  Down towards the end of _do_rebuild_instance() we call:\n\n        self._update_instance_after_spawn(context, instance)\n        instance.save(expected_task_state=[task_states.REBUILD_SPAWNING])\n\nThis sets the task_state to \"None\", but the new instance host doesn't get updated until a bit later down at the bottom of rebuild_instance().  During that window, the newly-rebuilt instance will not get accounted for in either _update_usage_from_instances() or _update_usage_from_migrations().", 
            "date_created": "2017-05-05 16:33:14.769568+00:00", 
            "author": "https://api.launchpad.net/1.0/~cbf123"
        }
    ]
}
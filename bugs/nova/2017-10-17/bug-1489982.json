{
    "status": "Invalid", 
    "last_updated": "2015-09-02 01:52:33.044268+00:00", 
    "description": "Version: OpenStack Liberty\n\nIf the compute manager _shutdown_instance method's call to _try_deallocate_network at [1] fails, the exception from the virt driver destroy, which is the real root cause of the shutdown / delete instance failure is lost.\n\nThis makes it harder to debug why the virt driver destroy method failed.\n\n[1] https://github.com/openstack/nova/blob/master/nova/compute/manager.py#L2252", 
    "tags": [
        "compute", 
        "shutdown"
    ], 
    "importance": "Undecided", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1489982", 
    "owner": "https://api.launchpad.net/1.0/~smatzek", 
    "id": 1489982, 
    "index": 7000, 
    "openned": "2015-08-28 17:58:39.227870+00:00", 
    "created": "2015-08-28 17:58:39.227870+00:00", 
    "title": "Virt driver destroy exception is lost during instance shutdown if network deallocation fails", 
    "comments": [
        {
            "content": "Version: OpenStack Liberty\n\nIf the compute manager _shutdown_instance method's call to _try_deallocate_network at [1] fails, the exception from the virt driver destroy, which is the real root cause of the shutdown / delete instance failure is lost.\n\nThis makes it harder to debug why the virt driver destroy method failed.\n\n[1] https://github.com/openstack/nova/blob/master/nova/compute/manager.py#L2252", 
            "date_created": "2015-08-28 17:58:39.227870+00:00", 
            "author": "https://api.launchpad.net/1.0/~smatzek"
        }, 
        {
            "content": "The exception should be reraised by the excutils.save_and_reraise_exception() context manager. Do you have a log trace showing the exception not being reraised?", 
            "date_created": "2015-09-01 22:24:49.970485+00:00", 
            "author": "https://api.launchpad.net/1.0/~melwitt"
        }, 
        {
            "content": " I created this bug based on old patches I had, a test program that showed excutils.save_and_reraise_exception()  was not re-raising the exception, and code inspection of the compute manager _shutdown_instance method.\n\nexcutils.save_and_reraise_exception()  does not re-raise the exception, but it does log it if you have a logger defined.  My test program did not have a root logger defined so it did not log the exception.  With the proper loggers defined, the original exception is logged with this prefix \"riginal exception being dropped:\" and the exception that occurred within the context manager is thrown, not the original exception.\n\nThe secondary exception thrown from _try_deallocate_network is what will be surfaced up the stack, but my concern about serviceability with a lost exception stack is not valid.  Hence, I am closing out this defect.\n\nHere is my test program and output that shows the original exception is not rethrown but it is still logged.\n\n[~]# cat test.py\nfrom oslo_utils import excutils\nimport logging\nimport sys\nlogging.basicConfig()\nsh = logging.StreamHandler(sys.stdout)\nsh.setLevel(logging.DEBUG)\nlogging.getLogger('root').addHandler(sh)\n\ntry:\n    raise Exception(\"Original\")\nexcept Exception:\n    with excutils.save_and_reraise_exception():\n        raise Exception(\"Second exception\")\n\n[~]# python test.py\nERROR:root:Original exception being dropped: ['Traceback (most recent call last):\\n', '  File \"test.py\", line 10, in <module>\\n    raise Exception(\"Original\")\\n', 'Exception: Original\\n']\nTraceback (most recent call last):\n  File \"test.py\", line 13, in <module>\n    raise Exception(\"Second exception\")\nException: Second exception\n", 
            "date_created": "2015-09-02 01:52:32.623446+00:00", 
            "author": "https://api.launchpad.net/1.0/~smatzek"
        }
    ], 
    "closed": "2015-09-02 01:52:26.341794+00:00"
}
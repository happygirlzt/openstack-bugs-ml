{
    "status": "Fix Released", 
    "last_updated": "2014-10-16 08:43:29.463187+00:00", 
    "description": "In nova/tests/test_quota.py -> QuotaReserveSqlAlchemyTestCase.setUp(), alternate function definitions are swapped into nova.db.sqlalchemy.api.QUOTA_SYNC_FUNCTIONS, however they are not reverted in any corresponding tearDown() method.   I'm guessing this isn't typically noticed as when using either nose or the \"testr\"-style tools, test_quota.py is run well after other tests which rely on these functions, such as those in nova/tests/api/ec2/test_cinder_cloud.py.  However, I've been using py.test which has a different natural test ordering.  The issue can be seen using Nose by running test_cinder_cloud after test_quota:\n\n$ ../.venv/bin/nosetests -v nova/tests/test_quota.py nova/tests/api/ec2/test_cinder_cloud.py -x\nnova.tests.test_quota.BaseResourceTestCase.test_no_flag ... ok\nnova.tests.test_quota.BaseResourceTestCase.test_quota_no_project ... ok\nnova.tests.test_quota.BaseResourceTestCase.test_quota_with_project ... ok\nnova.tests.test_quota.BaseResourceTestCase.test_with_flag ... ok\n\n    [ ... tests continue to run ... ]\n\nnova.tests.test_quota.QuotaReserveSqlAlchemyTestCase.test_quota_reserve_until_refresh ... ok\nnova.tests.api.ec2.test_cinder_cloud.CinderCloudTestCase.test_create_image ... /Users/classic/dev/redhat/.venv/lib/python2.7/site-packages/sqlalchemy/sql/default_comparator.py:33: SAWarning: The IN-predicate on \"instances.uuid\" was invoked with an empty sequence. This results in a contradiction, which nonetheless can be expensive to evaluate.  Consider alternative strategies for improved performance.\n  return o[0](self, self.expr, op, *(other + o[1:]), **kwargs)\nERROR\n\n======================================================================\nERROR: nova.tests.api.ec2.test_cinder_cloud.CinderCloudTestCase.test_create_image\n----------------------------------------------------------------------\n_StringException: pythonlogging:'': {{{\nAUDIT [nova.service] Starting conductor node (version 2014.2)\nINFO [nova.virt.driver] Loading compute driver 'nova.virt.fake.FakeDriver'\nAUDIT [nova.service] Starting compute node (version 2014.2)\nAUDIT [nova.compute.resource_tracker] Auditing locally available compute resources\nAUDIT [nova.compute.resource_tracker] Free ram (MB): 7680\nAUDIT [nova.compute.resource_tracker] Free disk (GB): 1028\nAUDIT [nova.compute.resource_tracker] Free VCPUS: 1\nAUDIT [nova.compute.resource_tracker] PCI stats: []\nINFO [nova.compute.resource_tracker] Compute_service record created for 93851743013149aabf5b0a5492cef513:fake-mini\nAUDIT [nova.service] Starting scheduler node (version 2014.2)\nINFO [nova.network.driver] Loading network driver 'nova.network.linux_net'\nAUDIT [nova.service] Starting network node (version 2014.2)\nAUDIT [nova.service] Starting consoleauth node (version 2014.2)\nINFO [nova.virt.driver] Loading compute driver 'nova.virt.fake.FakeDriver'\nAUDIT [nova.service] Starting compute node (version 2014.2)\nAUDIT [nova.compute.resource_tracker] Auditing locally available compute resources\nAUDIT [nova.compute.resource_tracker] Free ram (MB): 7680\nAUDIT [nova.compute.resource_tracker] Free disk (GB): 1028\nAUDIT [nova.compute.resource_tracker] Free VCPUS: 1\nAUDIT [nova.compute.resource_tracker] PCI stats: []\nINFO [nova.compute.resource_tracker] Compute_service record created for d207a83c4c3f4b0ab622668b19210a10:fake-mini\nWARNING [nova.service] Service killed that has no database entry\n}}}\n\nTraceback (most recent call last):\n  File \"/Users/classic/dev/redhat/nova/nova/tests/api/ec2/test_cinder_cloud.py\", line 1019, in test_create_image\n    ec2_instance_id = self._run_instance(**kwargs)\n  File \"/Users/classic/dev/redhat/nova/nova/tests/api/ec2/test_cinder_cloud.py\", line 750, in _run_instance\n    rv = self.cloud.run_instances(self.context, **kwargs)\n  File \"/Users/classic/dev/redhat/nova/nova/api/ec2/cloud.py\", line 1352, in run_instances\n    block_device_mapping=kwargs.get('block_device_mapping', {}))\n  File \"/Users/classic/dev/redhat/nova/nova/hooks.py\", line 103, in inner\n    rv = f(*args, **kwargs)\n  File \"/Users/classic/dev/redhat/nova/nova/compute/api.py\", line 1338, in create\n    legacy_bdm=legacy_bdm)\n  File \"/Users/classic/dev/redhat/nova/nova/compute/api.py\", line 997, in _create_instance\n    block_device_mapping)\n  File \"/Users/classic/dev/redhat/nova/nova/compute/api.py\", line 818, in _provision_instances\n    context, instance_type, min_count, max_count)\n  File \"/Users/classic/dev/redhat/nova/nova/compute/api.py\", line 343, in _check_num_instances_quota\n    cores=req_cores, ram=req_ram)\n  File \"/Users/classic/dev/redhat/nova/nova/quota.py\", line 1301, in reserve\n    user_id=user_id)\n  File \"/Users/classic/dev/redhat/nova/nova/quota.py\", line 544, in reserve\n    project_id=project_id, user_id=user_id)\n  File \"/Users/classic/dev/redhat/nova/nova/db/api.py\", line 1143, in quota_reserve\n    project_id=project_id, user_id=user_id)\n  File \"/Users/classic/dev/redhat/nova/nova/db/sqlalchemy/api.py\", line 164, in wrapper\n    return f(*args, **kwargs)\n  File \"/Users/classic/dev/redhat/nova/nova/db/sqlalchemy/api.py\", line 202, in wrapped\n    return f(*args, **kwargs)\n  File \"/Users/classic/dev/redhat/nova/nova/db/sqlalchemy/api.py\", line 3130, in quota_reserve\n    updates = sync(elevated, project_id, user_id, session)\n  File \"/Users/classic/dev/redhat/nova/nova/tests/test_quota.py\", line 2101, in sync\n    self.sync_called.add(res_name)\nAttributeError: 'QuotaReserveSqlAlchemyTestCase' object has no attribute 'sync_called'\n\nThe symptom is cryptic here, but essentially the callables swapped in by this test refer to \"self\" as a QuotaReserveSqlAlchemyTestCase object, which has long since been torn down and no longer has the \"sync_called\" set associated with it.\n\nI'd love to use mock.patch() for this kind of thing, but for the moment I'm going to submit a straightforward patch that restores QUOTA_SYNC_FUNCTIONS.", 
    "tags": [
        "low-hanging-fruit"
    ], 
    "importance": "Undecided", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1329482", 
    "owner": "https://api.launchpad.net/1.0/~zzzeek", 
    "id": 1329482, 
    "index": 6183, 
    "openned": "2014-06-12 20:12:24.015671+00:00", 
    "created": "2014-06-12 20:12:24.015671+00:00", 
    "title": "test_quota.py QuotaReserveSqlAlchemyTestCase fails to clean up changes to QUOTA_SYNC_FUNCTIONS", 
    "comments": [
        {
            "content": "In nova/tests/test_quota.py -> QuotaReserveSqlAlchemyTestCase.setUp(), alternate function definitions are swapped into nova.db.sqlalchemy.api.QUOTA_SYNC_FUNCTIONS, however they are not reverted in any corresponding tearDown() method.   I'm guessing this isn't typically noticed as when using either nose or the \"testr\"-style tools, test_quota.py is run well after other tests which rely on these functions, such as those in nova/tests/api/ec2/test_cinder_cloud.py.  However, I've been using py.test which has a different natural test ordering.  The issue can be seen using Nose by running test_cinder_cloud after test_quota:\n\n$ ../.venv/bin/nosetests -v nova/tests/test_quota.py nova/tests/api/ec2/test_cinder_cloud.py -x\nnova.tests.test_quota.BaseResourceTestCase.test_no_flag ... ok\nnova.tests.test_quota.BaseResourceTestCase.test_quota_no_project ... ok\nnova.tests.test_quota.BaseResourceTestCase.test_quota_with_project ... ok\nnova.tests.test_quota.BaseResourceTestCase.test_with_flag ... ok\n\n    [ ... tests continue to run ... ]\n\nnova.tests.test_quota.QuotaReserveSqlAlchemyTestCase.test_quota_reserve_until_refresh ... ok\nnova.tests.api.ec2.test_cinder_cloud.CinderCloudTestCase.test_create_image ... /Users/classic/dev/redhat/.venv/lib/python2.7/site-packages/sqlalchemy/sql/default_comparator.py:33: SAWarning: The IN-predicate on \"instances.uuid\" was invoked with an empty sequence. This results in a contradiction, which nonetheless can be expensive to evaluate.  Consider alternative strategies for improved performance.\n  return o[0](self, self.expr, op, *(other + o[1:]), **kwargs)\nERROR\n\n======================================================================\nERROR: nova.tests.api.ec2.test_cinder_cloud.CinderCloudTestCase.test_create_image\n----------------------------------------------------------------------\n_StringException: pythonlogging:'': {{{\nAUDIT [nova.service] Starting conductor node (version 2014.2)\nINFO [nova.virt.driver] Loading compute driver 'nova.virt.fake.FakeDriver'\nAUDIT [nova.service] Starting compute node (version 2014.2)\nAUDIT [nova.compute.resource_tracker] Auditing locally available compute resources\nAUDIT [nova.compute.resource_tracker] Free ram (MB): 7680\nAUDIT [nova.compute.resource_tracker] Free disk (GB): 1028\nAUDIT [nova.compute.resource_tracker] Free VCPUS: 1\nAUDIT [nova.compute.resource_tracker] PCI stats: []\nINFO [nova.compute.resource_tracker] Compute_service record created for 93851743013149aabf5b0a5492cef513:fake-mini\nAUDIT [nova.service] Starting scheduler node (version 2014.2)\nINFO [nova.network.driver] Loading network driver 'nova.network.linux_net'\nAUDIT [nova.service] Starting network node (version 2014.2)\nAUDIT [nova.service] Starting consoleauth node (version 2014.2)\nINFO [nova.virt.driver] Loading compute driver 'nova.virt.fake.FakeDriver'\nAUDIT [nova.service] Starting compute node (version 2014.2)\nAUDIT [nova.compute.resource_tracker] Auditing locally available compute resources\nAUDIT [nova.compute.resource_tracker] Free ram (MB): 7680\nAUDIT [nova.compute.resource_tracker] Free disk (GB): 1028\nAUDIT [nova.compute.resource_tracker] Free VCPUS: 1\nAUDIT [nova.compute.resource_tracker] PCI stats: []\nINFO [nova.compute.resource_tracker] Compute_service record created for d207a83c4c3f4b0ab622668b19210a10:fake-mini\nWARNING [nova.service] Service killed that has no database entry\n}}}\n\nTraceback (most recent call last):\n  File \"/Users/classic/dev/redhat/nova/nova/tests/api/ec2/test_cinder_cloud.py\", line 1019, in test_create_image\n    ec2_instance_id = self._run_instance(**kwargs)\n  File \"/Users/classic/dev/redhat/nova/nova/tests/api/ec2/test_cinder_cloud.py\", line 750, in _run_instance\n    rv = self.cloud.run_instances(self.context, **kwargs)\n  File \"/Users/classic/dev/redhat/nova/nova/api/ec2/cloud.py\", line 1352, in run_instances\n    block_device_mapping=kwargs.get('block_device_mapping', {}))\n  File \"/Users/classic/dev/redhat/nova/nova/hooks.py\", line 103, in inner\n    rv = f(*args, **kwargs)\n  File \"/Users/classic/dev/redhat/nova/nova/compute/api.py\", line 1338, in create\n    legacy_bdm=legacy_bdm)\n  File \"/Users/classic/dev/redhat/nova/nova/compute/api.py\", line 997, in _create_instance\n    block_device_mapping)\n  File \"/Users/classic/dev/redhat/nova/nova/compute/api.py\", line 818, in _provision_instances\n    context, instance_type, min_count, max_count)\n  File \"/Users/classic/dev/redhat/nova/nova/compute/api.py\", line 343, in _check_num_instances_quota\n    cores=req_cores, ram=req_ram)\n  File \"/Users/classic/dev/redhat/nova/nova/quota.py\", line 1301, in reserve\n    user_id=user_id)\n  File \"/Users/classic/dev/redhat/nova/nova/quota.py\", line 544, in reserve\n    project_id=project_id, user_id=user_id)\n  File \"/Users/classic/dev/redhat/nova/nova/db/api.py\", line 1143, in quota_reserve\n    project_id=project_id, user_id=user_id)\n  File \"/Users/classic/dev/redhat/nova/nova/db/sqlalchemy/api.py\", line 164, in wrapper\n    return f(*args, **kwargs)\n  File \"/Users/classic/dev/redhat/nova/nova/db/sqlalchemy/api.py\", line 202, in wrapped\n    return f(*args, **kwargs)\n  File \"/Users/classic/dev/redhat/nova/nova/db/sqlalchemy/api.py\", line 3130, in quota_reserve\n    updates = sync(elevated, project_id, user_id, session)\n  File \"/Users/classic/dev/redhat/nova/nova/tests/test_quota.py\", line 2101, in sync\n    self.sync_called.add(res_name)\nAttributeError: 'QuotaReserveSqlAlchemyTestCase' object has no attribute 'sync_called'\n\nThe symptom is cryptic here, but essentially the callables swapped in by this test refer to \"self\" as a QuotaReserveSqlAlchemyTestCase object, which has long since been torn down and no longer has the \"sync_called\" set associated with it.\n\nI'd love to use mock.patch() for this kind of thing, but for the moment I'm going to submit a straightforward patch that restores QUOTA_SYNC_FUNCTIONS.", 
            "date_created": "2014-06-12 20:12:24.015671+00:00", 
            "author": "https://api.launchpad.net/1.0/~zzzeek"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/99772", 
            "date_created": "2014-06-12 21:40:35.985459+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/99772\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=7168fcfe2d110eeca730e2ed966a5b5435b226b8\nSubmitter: Jenkins\nBranch:    master\n\ncommit 7168fcfe2d110eeca730e2ed966a5b5435b226b8\nAuthor: Mike Bayer <email address hidden>\nDate:   Thu Jun 12 17:28:36 2014 -0400\n\n    Ensure changes to api.QUOTA_SYNC_FUNCTIONS are restored.\n    \n    Add a local callable restore_sync_functions() that is\n    established as an addCleanup() fixture callable,\n    making use of a copy of the QUOTA_SYNC_FUNCTIONS\n    dictionary to restore its previous contents in-place.\n    \n    Change-Id: I7fa69ea91e517121aba0ee22a71b0594591ae308\n    Closes-Bug: #1329482\n", 
            "date_created": "2014-06-23 15:57:48.348869+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ], 
    "closed": "2014-07-23 15:08:30.423855+00:00"
}
{
    "status": "Fix Released", 
    "last_updated": "2014-04-17 09:18:42.959522+00:00", 
    "description": "Given an attribute name and a list of values equal_any() is meant to produce a WHERE clause which returns rows for which the column (denoted by an attribute of an SQLAlchemy model) is equal to ANY of passed values that involves using of SQL OR operator. In fact, AND operator is used to combine equality expressions.\n\nE.g. for a model:\n\nclass Instance(BaseModel):\n    __tablename__ = 'instances'\n\n   id = sa.Column('id', sa.Integer, primary_key=True)\n   ...\n   task_state = sa.Column('task_state', sa.String(30))\n\nusing of equal_any():\n\n  q = model_query(context, Instance).\n  constraint = Constraint({'task_state': equal_any('error', 'deleting')})\n  q = constraint.apply(Instance, q)\n\nwill produce:\n\nSELECT * from instances\nWHERE task_state = 'error' AND task_state = 'deleting'\n\ninstead of expected:\n\nSELECT * from instances\nWHERE task_state = 'error' OR task_state = 'deleting'", 
    "tags": [
        "db"
    ], 
    "importance": "Undecided", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1292285", 
    "owner": "https://api.launchpad.net/1.0/~rpodolyaka", 
    "id": 1292285, 
    "index": 5921, 
    "openned": "2014-03-14 00:45:03.766383+00:00", 
    "created": "2014-03-14 00:45:03.766383+00:00", 
    "title": "equal_any() DB API helper produces incorrect SQL query", 
    "comments": [
        {
            "content": "Given an attribute name and a list of values equal_any() is meant to produce a WHERE clause which returns rows for which the column (denoted by an attribute of an SQLAlchemy model) is equal to ANY of passed values that involves using of SQL OR operator. In fact, AND operator is used to combine equality expressions.\n\nE.g. for a model:\n\nclass Instance(BaseModel):\n    __tablename__ = 'instances'\n\n   id = sa.Column('id', sa.Integer, primary_key=True)\n   ...\n   task_state = sa.Column('task_state', sa.String(30))\n\nusing of equal_any():\n\n  q = model_query(context, Instance).\n  constraint = Constraint({'task_state': equal_any('error', 'deleting')})\n  q = constraint.apply(Instance, q)\n\nwill produce:\n\nSELECT * from instances\nWHERE task_state = 'error' AND task_state = 'deleting'\n\ninstead of expected:\n\nSELECT * from instances\nWHERE task_state = 'error' OR task_state = 'deleting'", 
            "date_created": "2014-03-14 00:45:03.766383+00:00", 
            "author": "https://api.launchpad.net/1.0/~rpodolyaka"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/80431", 
            "date_created": "2014-03-14 00:47:54.672631+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/80431\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=8ff06df88b1f979f5a67f9d55fa0e828a6e73d04\nSubmitter: Jenkins\nBranch:    master\n\ncommit 8ff06df88b1f979f5a67f9d55fa0e828a6e73d04\nAuthor: Roman Podoliaka <email address hidden>\nDate:   Thu Mar 13 23:48:56 2014 +0200\n\n    Fix equal_any() DB API helper\n    \n    equal_any() query helper is meant to produce a WHERE clause combining\n    a few conditions with OR operator in order to select the rows for\n    which the given column is equal to ANY of passed values. In fact,\n    it uses AND operator instead of OR, which means that an incorrect\n    WHERE clause will be returned, if more than one value is passed to\n    equal_any().\n    \n    This is caused by the fact that the or_() function from SQLAlchemy\n    expression language is used incorrectly: it accepts unpacked\n    instances of BinaryExpression, but a list of ones is passed.\n    Unfortunately, in 0.7.x and 0.8.x branches of SQLAlchemy passing\n    a list of values to or_() won't raise an exception immidiately,\n    and the result will be an iterable, which explains why we didn't\n    see equal_any() was actually broken before. Besides, equal_any() is\n    rarely used in our code base and the test didn't cover the case when\n    more than 1 value is passed to the function.\n    \n    This effectively fixes the error when running Nova unit tests\n    with SQLAlchemy 0.9.x releases.\n    \n    Closes-Bug: #1292285\n    \n    Change-Id: If4c0f1d3e016e2affb0d49293c62ca9df0d033f7\n", 
            "date_created": "2014-03-15 02:08:11.324543+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ], 
    "closed": "2014-03-31 19:14:38.296171+00:00"
}
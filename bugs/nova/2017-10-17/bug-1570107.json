{
    "status": "Confirmed", 
    "last_updated": "2017-06-27 16:03:40.825939+00:00", 
    "description": "Description\n===========\n\nprovide 2 block device mappings, both bootable volumes with only 1 of them having a boot_index (i.e. only 1 specified as boot device) and both have different bus types. Observe booted instance is actually an instance of the image with no boot_index!\n\nSteps to reproduce\n==================\n\nCreated volume from cirros image\nCreated volume from ubuntu image\n\nAttempted to create instance sourced from ubuntu volume and also have the cirros volume attached\n- set boot index to 0 for ubuntu volume\n- set no boot index for cirros (in trial 2, i set it to -1 explicitly so it would only be an attached volume) \n- bus type provided for ubuntu volume was 'ide'\n- bus type provided for cirros volume was 'virtio'\n- send server payload\n- observed the instance is booted from the cirros volume despite having no boot index!\n\nsample payload : \n\n{\"server\":{\"flavorRef\":\"8e41c8ce-8bca-4012-92f0-6d83dc4e7dfe\",\"name\":\"vol-test_cirros-bootable_0_cb3378f2-01d1-4662-8c9e-df6cff05c056\",\"networks\":[{\"port\":\"1c11a3f9-47e6-4374-9890-54b5dd91f7c2\"}],\"block_device_mapping_v2\":[{\"uuid\":\"03b3c938-ed05-41a3-af92-5344431892ae\",\"source_type\":\"volume\",\"destination_type\":\"volume\",\"delete_on_termination\":\"false\",\"disk_bus\": \"virtio\" },{\"uuid\":\"7cebbbc0-113e-452b-b577-9043140656bf\",\"boot_index\":\"0\",\"source_type\":\"volume\",\"destination_type\":\"volume\",\"delete_on_termination\":\"false\",\"disk_bus\": \"ide\" },{\"uuid\":\"5870a3d6-f475-4312-b26f-5162d76b9074\",\"source_type\":\"volume\",\"destination_type\":\"volume\",\"delete_on_termination\":\"false\",\"disk_bus\": \"virtio\" }]}\n\n\n\n\n\nNOTE : when the ubuntu volume is the only volume and the bus type is IDE, the created instance is an ubuntu instance\nAlso, if both volumes have the bus types set to virtio, the ubuntu instance is correctly booted.\nAppears to be some bus type related issue, but it wasn't documented anywhere and there's no error.\n\n\nExpected result\n===============\n\nBoot from the volume with boot index provided or fail with error\n\n\nActual result\n=============\n\nBoots from the other volume, even though it has no boot index.\n\n\nEnvironment\n===========\nOpenstack Kilo\n\nhypervisor : libvirt + KVM\nstorage : LVM\nnetworking : neutron with openvswitch", 
    "tags": [
        "libvirt", 
        "needs-attention", 
        "openstack-version.kilo", 
        "volumes"
    ], 
    "importance": "Undecided", 
    "heat": 10, 
    "link": "https://bugs.launchpad.net/nova/+bug/1570107", 
    "owner": "None", 
    "id": 1570107, 
    "index": 7421, 
    "openned": "2016-04-13 21:40:30.603192+00:00", 
    "created": "2016-04-13 21:40:30.603192+00:00", 
    "title": "block device mapping : booting up attached volumes with no boot index when multiple bootable volumes are used", 
    "comments": [
        {
            "content": "Description\n===========\n\nprovide 2 block device mappings, both bootable volumes with only 1 of them having a boot_index (i.e. only 1 specified as boot device) and both have different bus types. Observe booted instance is actually an instance of the image with no boot_index!\n\nSteps to reproduce\n==================\n\nCreated volume from cirros image\nCreated volume from ubuntu image\n\nAttempted to create instance sourced from ubuntu volume and also have the cirros volume attached\n- set boot index to 0 for ubuntu volume\n- set no boot index for cirros (in trial 2, i set it to -1 explicitly so it would only be an attached volume) \n- bus type provided for ubuntu volume was 'ide'\n- bus type provided for cirros volume was 'virtio'\n- send server payload\n- observed the instance is booted from the cirros volume despite having no boot index!\n\nsample payload : \n\n{\"server\":{\"flavorRef\":\"8e41c8ce-8bca-4012-92f0-6d83dc4e7dfe\",\"name\":\"vol-test_cirros-bootable_0_cb3378f2-01d1-4662-8c9e-df6cff05c056\",\"networks\":[{\"port\":\"1c11a3f9-47e6-4374-9890-54b5dd91f7c2\"}],\"block_device_mapping_v2\":[{\"uuid\":\"03b3c938-ed05-41a3-af92-5344431892ae\",\"source_type\":\"volume\",\"destination_type\":\"volume\",\"delete_on_termination\":\"false\",\"disk_bus\": \"virtio\" },{\"uuid\":\"7cebbbc0-113e-452b-b577-9043140656bf\",\"boot_index\":\"0\",\"source_type\":\"volume\",\"destination_type\":\"volume\",\"delete_on_termination\":\"false\",\"disk_bus\": \"ide\" },{\"uuid\":\"5870a3d6-f475-4312-b26f-5162d76b9074\",\"source_type\":\"volume\",\"destination_type\":\"volume\",\"delete_on_termination\":\"false\",\"disk_bus\": \"virtio\" }]}\n\n\n\n\n\nNOTE : when the ubuntu volume is the only volume and the bus type is IDE, the created instance is an ubuntu instance\nAlso, if both volumes have the bus types set to virtio, the ubuntu instance is correctly booted.\nAppears to be some bus type related issue, but it wasn't documented anywhere and there's no error.\n\n\nExpected result\n===============\n\nBoot from the volume with boot index provided or fail with error\n\n\nActual result\n=============\n\nBoots from the other volume, even though it has no boot index.\n\n\nEnvironment\n===========\nOpenstack Kilo\n\nhypervisor : libvirt + KVM\nstorage : LVM\nnetworking : neutron with openvswitch", 
            "date_created": "2016-04-13 21:40:30.603192+00:00", 
            "author": "https://api.launchpad.net/1.0/~oadeboye"
        }, 
        {
            "content": "I think this because the boot sequence in libvirt: http://libvirt.org/formatdomain.html#elementsOSBIOS.\n\nIn the section boot: \n\"Thus, e.g., a domain configured to boot from \"hd\" with vdb, hda, vda, and hdc disks assigned to it will boot from vda (the sorted list is vda, vdb, hda, hdc). Similar domain with hdc, vda, vdb, and hda disks will boot from hda (sorted disks are: hda, hdc, vda, vdb).\"\n\nThe block_device_mapping_v2 in your sample:\n[{\"uuid\":\"03b3c938-ed05-41a3-af92-5344431892ae\",\"source_type\":\"volume\",\"destination_type\":\"volume\",\"delete_on_termination\":\"false\",\"disk_bus\": \"virtio\" },{\"uuid\":\"7cebbbc0-113e-452b-b577-9043140656bf\",\"boot_index\":\"0\",\"source_type\":\"volume\",\"destination_type\":\"volume\",\"delete_on_termination\":\"false\",\"disk_bus\": \"ide\" },{\"uuid\":\"5870a3d6-f475-4312-b26f-5162d76b9074\",\"source_type\":\"volume\",\"destination_type\":\"volume\",\"delete_on_termination\":\"false\",\"disk_bus\": \"virtio\" }]\n\nBefore instance create the device_name will set for each device:\n[{\n    \"uuid\":\"03b3c938-ed05-41a3-af92-5344431892ae\",\n    \"source_type\":\"volume\",\n    \"device_name\":\"/dev/vda\",   # Add device_name by disk_bus, the virtio mapping to \"vd*\"\n    \"destination_type\":\"volume\",\n    \"delete_on_termination\":\"false\",\n    \"disk_bus\": \"virtio\" },\n{\n    \"uuid\":\"7cebbbc0-113e-452b-b577-9043140656bf\",\n    \"boot_index\":\"0\",\n    \"source_type\":\"volume\",\n    \"device_name\": \"/dev/hda\", # ide mapping to \"hd*\"\n    \"destination_type\":\"volume\",\n    \"delete_on_termination\":\"false\",\n    \"disk_bus\": \"ide\" },\n{\n    \"uuid\":\"5870a3d6-f475-4312-b26f-5162d76b9074\",\n    \"source_type\":\"volume\",\n    \"device_name\":\"/dev/vdb\",\n    \"destination_type\":\"volume\",\n    \"delete_on_termination\":\"false\",\n    \"disk_bus\": \"virtio\" }]\n\nI think the disk sequence after sorted by libvirt is:\n1. /dev/vda \n2. /dev/vdb \n3. /dev/hda \n", 
            "date_created": "2016-04-18 03:49:35.575502+00:00", 
            "author": "https://api.launchpad.net/1.0/~zhengyue-5"
        }, 
        {
            "content": "Thanks for the information 'Zhengyue'. I think you are missing the comment on the expected behavior. Basically i have specified only 1 boot index, in my alternate tests i explicitly set the boot index of the other volumes to (-1) to ensure they are not booted from according to the block device mapping documentation : http://docs.openstack.org/developer/nova/block_device_mapping.html\n\n\n \"Some hypervisors may not support booting from multiple devices, so will only consider the device with boot index of 0. Some hypervisors will support booting from multiple devices, but only if they are of different types - eg a disk and CD-ROM. Setting a negative value or None indicates that the device should not be used for booting. The simplest usage is to set it to 0 for the boot device and leave it as None for any other devices.\"\n\nGiven the above excerpt, the wrong instance shouldnt be booted at all.", 
            "date_created": "2016-04-18 15:47:28.826403+00:00", 
            "author": "https://api.launchpad.net/1.0/~oadeboye"
        }, 
        {
            "content": "I am not able to reproduce the bug on devstack (running inside VM). The behaviour I see is correct as per documentation (http://docs.openstack.org/developer/nova/block_device_mapping.html). Note that I am using QEMU as a backend (not KVM). See details below.\n\nI created two volumes:\n1) bootable Cirros (volume ID=45d6a4e4-c478-4b28-9850-049b5c9a8d51) \n2) bootable Ubuntu (volume ID=2bffb48d-c859-4df1-a2a7-66e98af43837)\n\nWhen both volumes are \"available\", I created VM by specifying Ubuntu as a bootable (bootindex=0) and Cirros as (bootindex=-1)\n$ nova --debug boot --flavor 2 --block-device source=volume,id=2bffb48d-c859-4df1-a2a7-66e98af43837,dest=volume,size=5,shutdown=preserve,bootindex=0 --block-device source=volume,id=45d6a4e4-c478-4b28-9850-049b5c9a8d51,dest=volume,size=1,shutdown=preserve,bootindex=-1 uvm\n[...]\nDEBUG (session:248) REQ: curl -g -i -X POST http://192.168.229.137:8774/v2.1/os-volumes_boot -H \"User-Agent: python-novaclient\" -H \"Content-Type: application/json\" -H \"Accept: application/json\" -H \"X-OpenStack-Nova-API-Version: 2.25\" -H \"X-Auth-Token: {SHA1}db2d307d5a2df66c6cb0a53c3cd7b0d8d77314e5\" -d '{\"server\": {\"name\": \"uvm\", \"imageRef\": \"\", \"block_device_mapping_v2\": [{\"boot_index\": \"0\", \"uuid\": \"2bffb48d-c859-4df1-a2a7-66e98af43837\", \"volume_size\": \"5\", \"source_type\": \"volume\", \"destination_type\": \"volume\", \"delete_on_termination\": false}, {\"boot_index\": \"-1\", \"uuid\": \"45d6a4e4-c478-4b28-9850-049b5c9a8d51\", \"volume_size\": \"1\", \"source_type\": \"volume\", \"destination_type\": \"volume\", \"delete_on_termination\": false}], \"flavorRef\": \"2\", \"max_count\": 1, \"min_count\": 1}}'\n[...]\n\nVM successfully created with Ubuntu image (as expected).\n\nI repeated the same experiment by swapping bootable index values, i.e., Ubuntu bootindex=-1 and Cirros bootindex=0.\n$ nova --debug boot --flavor 2 --block-device source=volume,id=2bffb48d-c859-4df1-a2a7-66e98af43837,dest=volume,size=5,shutdown=preserve,bootindex=-1 --block-device source=volume,id=45d6a4e4-c478-4b28-9850-049b5c9a8d51,dest=volume,size=1,shutdown=preserve,bootindex=0 cvm\n[...]\nDEBUG (session:248) REQ: curl -g -i -X POST http://192.168.229.137:8774/v2.1/os-volumes_boot -H \"User-Agent: python-novaclient\" -H \"Content-Type: application/json\" -H \"Accept: application/json\" -H \"X-OpenStack-Nova-API-Version: 2.25\" -H \"X-Auth-Token: {SHA1}12de1ea7163bebdf6a77566061f24036a69941dd\" -d '{\"server\": {\"name\": \"cvm\", \"imageRef\": \"\", \"block_device_mapping_v2\": [{\"boot_index\": \"-1\", \"uuid\": \"2bffb48d-c859-4df1-a2a7-66e98af43837\", \"volume_size\": \"5\", \"source_type\": \"volume\", \"destination_type\": \"volume\", \"delete_on_termination\": false}, {\"boot_index\": \"0\", \"uuid\": \"45d6a4e4-c478-4b28-9850-049b5c9a8d51\", \"volume_size\": \"1\", \"source_type\": \"volume\", \"destination_type\": \"volume\", \"delete_on_termination\": false}], \"flavorRef\": \"2\", \"max_count\": 1, \"min_count\": 1}}'\n\nVM successfully created with Cirros image (as expected).", 
            "date_created": "2016-04-24 21:00:36.611806+00:00", 
            "author": "https://api.launchpad.net/1.0/~nodir-qodirov"
        }, 
        {
            "content": "Thanks for confirming it is a disk_bus related issue then Nodir.\nYour payload left out the suspected cause of the problem \"disk_bus\" .\nAt least this confirms the boot_index may not be respected if disk_bus attribute is provided like in my case.", 
            "date_created": "2016-04-26 13:51:29.045237+00:00", 
            "author": "https://api.launchpad.net/1.0/~oadeboye"
        }, 
        {
            "content": "Added \"needs-attention\" tag because this hasn't been touched since April. It looks like the key issue that needs to be reproduced here is that boot_index is ignored when disk_bus is provided.", 
            "date_created": "2016-08-09 19:09:20.304273+00:00", 
            "author": "https://api.launchpad.net/1.0/~auggy"
        }, 
        {
            "content": "Automatically discovered version kilo in description. If this is incorrect, please update the description to include 'nova version: ...'", 
            "date_created": "2017-06-27 16:03:39.383554+00:00", 
            "author": "https://api.launchpad.net/1.0/~sdague"
        }
    ]
}
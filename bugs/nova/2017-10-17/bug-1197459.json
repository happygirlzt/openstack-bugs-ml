{
    "status": "Opinion", 
    "last_updated": "2016-07-30 00:42:23.384084+00:00", 
    "description": "The VNC Console connection in Nova works by having the user connect to the API which returns a URL such as: https://example.com:443/?token=abc Where the token has a TTL which is then used to create a session from a WebSocket. However, URL's should not contain sensitive information such as session tokens with a TTL since URL's can be leaked through proxy logs or other types of attacks such as Cross-Site Scripting. Additionally, due to the session cookie being set with JavaScript it cannot securely be set to HttpOnly nor is it set with the Secure flag making it further susceptible to Cross-Site Scripting attacks or leakage through a non-SSL connection. To limit the exposure of the token being leaked through the URL the returned token from the API should be of a one-time use and only used as an authentication token in order to obtain a session. The session cookie should be set by a Web Service instead of the client in order to securely set the cookie with the HttpOnly flag to be set in addition to setting the Secure flag.", 
    "tags": [
        "security"
    ], 
    "importance": "Low", 
    "heat": 50, 
    "link": "https://bugs.launchpad.net/nova/+bug/1197459", 
    "owner": "None", 
    "id": 1197459, 
    "index": 916, 
    "openned": "2013-07-03 16:11:52.796117+00:00", 
    "created": "2013-07-03 16:11:52.796117+00:00", 
    "title": "noVNC contains the session token in URL and insecurely sets the session cookie", 
    "comments": [
        {
            "content": "The VNC Console connection in Nova works by having the user connect to the API which returns a URL such as: https://example.com:443/?token=abc Where the token has a TTL which is then used to create a session from a WebSocket. However, URL's should not contain sensitive information such as session tokens with a TTL since URL's can be leaked through proxy logs or other types of attacks such as Cross-Site Scripting. Additionally, due to the session cookie being set with JavaScript it cannot securely be set to HttpOnly nor is it set with the Secure flag making it further susceptible to Cross-Site Scripting attacks or leakage through a non-SSL connection. To limit the exposure of the token being leaked through the URL the returned token from the API should be of a one-time use and only used as an authentication token in order to obtain a session. The session cookie should be set by a Web Service instead of the client in order to securely set the cookie with the HttpOnly flag to be set in addition to setting the Secure flag.", 
            "date_created": "2013-07-03 16:11:52.796117+00:00", 
            "author": "https://api.launchpad.net/1.0/~jason-hullinger"
        }, 
        {
            "content": "A possible design to address this without having to change noVNC:\n\n1. Generate the URL as usual.\n2. Upon the first use of the URL:\n        2.1 replace the token within nova to a new token (effectively invalidating the original token)\n        2.2 Set this new token as a session cookie (secure=True, httponly=True) in the browser\n3. Subsequent Authentications (for html and js resources) will use this session cookie\n4. Upon switching to websockets, invalidate the session cookie both from the browser and the token from nova. \n\nI don't think if step 4 is a good approach. A better way would be to track the state of the authentication in the server side so that no new auth can be done with this token but leave the existing connection use it as necessary. But this would require more changes.\n\n\n", 
            "date_created": "2013-07-04 09:30:29.485952+00:00", 
            "author": "https://api.launchpad.net/1.0/~parthipan"
        }, 
        {
            "content": "That sounds like strengthening steps rather than a practical vulnerability fix. Those steps should definitely be implemented, but I see no reason to keep this bug private while we fix it or issue a security alert about it. Thoughts ?", 
            "date_created": "2013-07-04 12:27:22.260503+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "I agree this is at most a contributing risk and doesn't sound exploitable except when combined with more significant vulnerabilities. The design already assumes HTTPS with server certificate validated by the browser, which means that any MitM (logging proxy or otherwise) indicates an already-compromised system. Similarly, without any corresponding XSS vulnerability with which to leverage this weakness, it seems excessive to work on a hardening patch for this in private.", 
            "date_created": "2013-07-04 14:07:55.239525+00:00", 
            "author": "https://api.launchpad.net/1.0/~fungi"
        }, 
        {
            "content": "Agreed, will open the bug publicly tomorrow, unless someone complains.", 
            "date_created": "2013-07-09 12:52:16.918688+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "Agreed on opening it up and that this is hardening but it is fundamental security practice to securely set session cookies.", 
            "date_created": "2013-07-09 16:20:15.796663+00:00", 
            "author": "https://api.launchpad.net/1.0/~jason-hullinger"
        }, 
        {
            "content": "Michael: attached a patch that was made against a Diablo derived codebase with the hope that this might be useful.", 
            "date_created": "2014-03-07 10:59:20.553567+00:00", 
            "author": "https://api.launchpad.net/1.0/~parthipan"
        }, 
        {
            "content": "@parthipan\n\nMuch appreciated.", 
            "date_created": "2014-03-10 23:07:29.983762+00:00", 
            "author": "https://api.launchpad.net/1.0/~geekinutah"
        }, 
        {
            "content": "@parthipan and Paul Murray\n\nDo you guys have a newer version of this patch? I keep starting to try and apply this to trunk and then getting lost. If you have it around it would be awesome to see it submitted or if you want attach it here and I will put it in.", 
            "date_created": "2014-07-30 18:00:34.624339+00:00", 
            "author": "https://api.launchpad.net/1.0/~geekinutah"
        }, 
        {
            "content": "Moving to opinion state. From nova IRC:\n\n\n<PhilD> sdague:   No i don't think we cut a patch for more recent cloud - since there was general agreeement that this wasn't exploitable", 
            "date_created": "2014-09-15 15:06:37.769879+00:00", 
            "author": "https://api.launchpad.net/1.0/~sdague"
        }, 
        {
            "content": "Attached is a quick and dirty hack for Juno, it just deletes the token whenever it's verified once.", 
            "date_created": "2015-01-13 22:43:03.405747+00:00", 
            "author": "https://api.launchpad.net/1.0/~dibarra"
        }, 
        {
            "content": "", 
            "date_created": "2015-01-13 23:25:07.384131+00:00", 
            "author": "https://api.launchpad.net/1.0/~dibarra"
        }, 
        {
            "content": "SPICE displays involve multiple socket connections (as many as 10 or more). So I don't think you simply delete the token on first usage - it would prevent the other SPICE connections from succeeeding.", 
            "date_created": "2015-01-28 16:45:55.714299+00:00", 
            "author": "https://api.launchpad.net/1.0/~berrange"
        }, 
        {
            "content": "I just loaded up VNC and it seems to work fine for me, the ctrl+alt+delete function works and everything.\n\nIt is a hack, but it at least protects against a MITM/XSS situation where someone can grab the token.", 
            "date_created": "2015-01-28 17:43:10.545430+00:00", 
            "author": "https://api.launchpad.net/1.0/~dibarra"
        }, 
        {
            "content": "@sdague, It is a well-accepted security statement that you should never pass secrets in query parameters. Maybe how to fix it is opinion, but not that there is a problem here.\n\nYou don't have to have a MitM or XSS to exploit this. Query parameters are stored in browser history, so launching a session from a shared computer also leads to exposure. Access to a web cache also equals exposure. Etc.", 
            "date_created": "2016-07-18 19:21:21.470754+00:00", 
            "author": "https://api.launchpad.net/1.0/~edmondsw"
        }, 
        {
            "content": "This is what AppScan (a dynamic security scanning product) says about this kind of issue:\n\nQuery Parameter in SSL Request\nThreat Classification: Information Leakage\nCauses: Query parameters were passed over SSL, and may contain sensitive information\nSecurity Risks: It may be possible to steal sensitive data such as credit card numbers, social security numbers etc. that are sent unencrypted\nCWE: 598\nX-Force: 52845\n\nReferences:\nFinancial Privacy: The Gramm-Leach Bliley Act, https://www.ftc.gov/tips-advice/business-center/privacy-and-security/gramm-leach-bliley-act\nHealth Insurance Portability and Accountability Act (HIPAA), http://www.hhs.gov/hipaa/index.html\nSarbanes-Oxley Act, https://www.sec.gov/spotlight/sarbanes-oxley.htm\nCalifornia SB1386, http://info.sen.ca.gov/pub/01-02/bill/sen/sb_1351-1400/sb_1386_bill_20020926_chaptered.html\n\nTechnical Description:\nDuring the application test, it was detected that a request, which was sent over SSL, contained parameters that were transmitted in the Query part of an HTTP request.\nWhen sending requests, the browser's history can be used to reveal the URLs, which contain the query parameter names and values.\nDue to the sensitivity of encrypted requests, it is suggested to use HTTP POST (without parameters in the URL string) when possible, in order to avoid the disclosure of URLs and parameter values to others.\n", 
            "date_created": "2016-07-29 20:46:03.613055+00:00", 
            "author": "https://api.launchpad.net/1.0/~edmondsw"
        }, 
        {
            "content": "I still maintain it's a security hardening opportunity. Someone would need access to your browser history _and_ an opportunity to use it before the token expires, so not a gaping hole but still potentially worth fixing in a future release.\n\nNova devs however seem to feel this isn't worth fixing at all, hence the \"opinion\" state on their bugtask. You could try submitting a fix to Gerrit for it, but there's no guarantee it'll be met with much urgency from them (or ever even reviewed at all).", 
            "date_created": "2016-07-30 00:42:22.703247+00:00", 
            "author": "https://api.launchpad.net/1.0/~fungi"
        }
    ], 
    "closed": "2014-09-15 15:06:02.933177+00:00"
}
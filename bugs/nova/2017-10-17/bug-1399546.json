{
    "status": "Fix Released", 
    "last_updated": "2015-04-30 09:15:57.488331+00:00", 
    "description": "nova/api/openstack/extensions.py:def load_standard_extensions(\n\n\n    for dirpath, dirnames, filenames in os.walk(our_dir):\n        # Compute the relative package name from the dirpath\n        relpath = os.path.relpath(dirpath, our_dir)\n        if relpath == '.':\n            relpkg = ''\n        else:\n            relpkg = '.%s' % '.'.join(relpath.split(os.sep))\n\n        # Now, consider each file in turn, only considering .py files\n        for fname in filenames:\n            root, ext = os.path.splitext(fname)\n\n            # Skip __init__ and anything that's not .py\n            if ext != '.py' or root == '__init__':\n                continue\n\n            # Try loading it\n            classname = \"%s%s\" % (root[0].upper(), root[1:])\n            classpath = (\"%s%s.%s.%s\" %\n                         (package, relpkg, root, classname))\n\n            if ext_list is not None and classname not in ext_list:\n                logger.debug(\"Skipping extension: %s\" % classpath)\n                continue\n\n            try:\n                ext_mgr.load_extension(classpath)\n            except Exception as exc:\n                logger.warn(_('Failed to load extension %(classpath)s: '\n                              '%(exc)s'),\n                            {'classpath': classpath, 'exc': exc})\n\n        # Now, let's consider any subdirectories we may have...\n        subdirs = []\n        for dname in dirnames:\n            # Skip it if it does not have __init__.py\n            if not os.path.exists(os.path.join(dirpath, dname, '__init__.py')):\n                continue\n\n            # If it has extension(), delegate...\n            ext_name = \"%s%s.%s.extension\" % (package, relpkg, dname)\n            try:\n                ext = importutils.import_class(ext_name)\n            except ImportError:\n                # extension() doesn't exist on it, so we'll explore\n                # the directory for ourselves\n                subdirs.append(dname)\n            else:\n                try:\n                    ext(ext_mgr)\n                except Exception as exc:\n                    logger.warn(_('Failed to load extension %(ext_name)s:'\n                                  '%(exc)s'),\n                                {'ext_name': ext_name, 'exc': exc})\n\n        # Update the list of directories we'll explore...\n        dirnames[:] = subdirs    >>>>this is unused,  so we can remove subdirs", 
    "tags": [], 
    "importance": "Low", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1399546", 
    "owner": "https://api.launchpad.net/1.0/~jogo", 
    "id": 1399546, 
    "index": 1452, 
    "openned": "2014-12-05 07:14:21.707262+00:00", 
    "created": "2014-12-05 07:14:21.707262+00:00", 
    "title": "confusing code snippet when registers all standard API extensions", 
    "comments": [
        {
            "content": "nova/api/openstack/extensions.py:def load_standard_extensions(\n\n\n    for dirpath, dirnames, filenames in os.walk(our_dir):\n        # Compute the relative package name from the dirpath\n        relpath = os.path.relpath(dirpath, our_dir)\n        if relpath == '.':\n            relpkg = ''\n        else:\n            relpkg = '.%s' % '.'.join(relpath.split(os.sep))\n\n        # Now, consider each file in turn, only considering .py files\n        for fname in filenames:\n            root, ext = os.path.splitext(fname)\n\n            # Skip __init__ and anything that's not .py\n            if ext != '.py' or root == '__init__':\n                continue\n\n            # Try loading it\n            classname = \"%s%s\" % (root[0].upper(), root[1:])\n            classpath = (\"%s%s.%s.%s\" %\n                         (package, relpkg, root, classname))\n\n            if ext_list is not None and classname not in ext_list:\n                logger.debug(\"Skipping extension: %s\" % classpath)\n                continue\n\n            try:\n                ext_mgr.load_extension(classpath)\n            except Exception as exc:\n                logger.warn(_('Failed to load extension %(classpath)s: '\n                              '%(exc)s'),\n                            {'classpath': classpath, 'exc': exc})\n\n        # Now, let's consider any subdirectories we may have...\n        subdirs = []\n        for dname in dirnames:\n            # Skip it if it does not have __init__.py\n            if not os.path.exists(os.path.join(dirpath, dname, '__init__.py')):\n                continue\n\n            # If it has extension(), delegate...\n            ext_name = \"%s%s.%s.extension\" % (package, relpkg, dname)\n            try:\n                ext = importutils.import_class(ext_name)\n            except ImportError:\n                # extension() doesn't exist on it, so we'll explore\n                # the directory for ourselves\n                subdirs.append(dname)\n            else:\n                try:\n                    ext(ext_mgr)\n                except Exception as exc:\n                    logger.warn(_('Failed to load extension %(ext_name)s:'\n                                  '%(exc)s'),\n                                {'ext_name': ext_name, 'exc': exc})\n\n        # Update the list of directories we'll explore...\n        dirnames[:] = subdirs    >>>>this is unused,  so we can remove subdirs", 
            "date_created": "2014-12-05 07:14:21.707262+00:00", 
            "author": "https://api.launchpad.net/1.0/~liuhoug"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/140028", 
            "date_created": "2014-12-08 15:33:42.278836+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/140028\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=23eb5555ee1ddc60a6b6e22f8a9713314265b88c\nSubmitter: Jenkins\nBranch:    master\n\ncommit 23eb5555ee1ddc60a6b6e22f8a9713314265b88c\nAuthor: Joe Gordon <email address hidden>\nDate:   Mon Dec 8 10:32:17 2014 -0500\n\n    Clarify point of setting dirname in load_standard_extensions\n    \n    Changing dirname to alter how os.walk visits directories is a little\n    known feature, so add a note inline explaining how it works.\n    \n    This came up because someone filed a bug saying this block of code was\n    confusing.\n    \n    Closes-Bug: #1399546\n    Change-Id: I4cab323fcc7a4e2aab2ca7c36d6b9505b6a05bcb\n", 
            "date_created": "2014-12-10 12:48:12.067348+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ], 
    "closed": "2014-12-18 20:09:26.946884+00:00"
}
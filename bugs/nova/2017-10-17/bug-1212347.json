{
    "status": "Opinion", 
    "last_updated": "2014-09-18 20:25:52.541696+00:00", 
    "description": "nova-compute's contract for virtual machine drivers doesn't specify how those drivers should handle errors and exceptions when the driver's destroy() operation is called.\n\nThe contract should say what strategies drivers might use when the destroy() call encounters an error, which exceptions may be passed to nova-compute, and how those exceptions may cause nova-compute to modify the instance's state.\n\nThe virtual machine driver destroy() contract is here: https://github.com/openstack/nova/blob/master/nova/virt/driver.py#L244\n\nDriver exceptions are handled by nova-compute:\nhttps://github.com/openstack/nova/blob/master/nova/compute/manager.py\n\nPossibly from a lack of this specification, the current set of drivers take different approaches to handling exceptions in their destroy() operations: some save and re-raise, some wrap and re-raise, some retry, some do nothing, and some hide the error.\n\nAlso, without some specification, developers can't write unit tests to verify the driver's behaviour against the contract.\n\n\nReported against nova master: commit 8fb450fb3aa033d42c5dddb907392efd70f54a6b", 
    "tags": [
        "compute"
    ], 
    "importance": "Wishlist", 
    "heat": 24, 
    "link": "https://bugs.launchpad.net/nova/+bug/1212347", 
    "owner": "None", 
    "id": 1212347, 
    "index": 2668, 
    "openned": "2013-08-14 16:25:05.221382+00:00", 
    "created": "2013-08-14 16:25:05.221382+00:00", 
    "title": "destroy() method of nova-compute's driver contract doesn't specify exception handling", 
    "comments": [
        {
            "content": "nova-compute's contract for virtual machine drivers doesn't specify how those drivers should handle errors and exceptions when the driver's destroy() operation is called.\n\nThe contract should say what strategies drivers might use when the destroy() call encounters an error, which exceptions may be passed to nova-compute, and how those exceptions may cause nova-compute to modify the instance's state.\n\nPossibly from a lack of this specification, the current set of drivers take different approaches to handling exceptions in their destroy() operations: some save and re-raise, some wrap and re-raise, some retry, some do nothing, and some hide the error.\n\nAlso, without some specification, developers can't write unit tests to verify the driver's behaviour against the contract.", 
            "date_created": "2013-08-14 16:25:05.221382+00:00", 
            "author": "https://api.launchpad.net/1.0/~mars"
        }, 
        {
            "content": "There is some documentation and discussion of the correct handling of VM state and operations on the wiki: https://wiki.openstack.org/wiki/VMState.\n\nGoing from the above document, it may be safe to assume that VM deletion always succeeds, regardless of errors, and that a janitor process will come along at a later time and perform the actual deletion, retrying as necessary.  That would allow drivers to only make a single pass at deletion, without looping and retrying internally, and would allow them to raise any exception they wish: the janitor would simply log the error and try destroying the instance again.\n\nnova-compute already has operations that run periodically to do VM cleanup like this.  However, there are a lot of steps that run before the vm state is marked as DELETED, allowing the janitor function to run: those pre-DELETE steps introduce lots of opportunties for failure both inside and outside the driver.  Perhaps some of the steps can be pushed down into the janitor process, making it possible to retry deletion automatically, and reducing the chance that the user will see the operation fail.", 
            "date_created": "2013-08-23 21:22:20.327168+00:00", 
            "author": "https://api.launchpad.net/1.0/~mars"
        }, 
        {
            "content": "So I'm putting this into an Opinion / Wishlist state because this feels like it's part of a larger refactoring conversation. The driver contract really isn't a contract at all at this point. ", 
            "date_created": "2014-09-18 20:25:51.537863+00:00", 
            "author": "https://api.launchpad.net/1.0/~sdague"
        }
    ], 
    "closed": "2014-09-18 20:25:05.500204+00:00"
}
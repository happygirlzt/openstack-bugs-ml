{
    "status": "Fix Released", 
    "last_updated": "2012-09-27 15:30:07.547930+00:00", 
    "description": "Horizon is unable to retrieve quota information. Please see debug and the local_settings.py files below. However using the nova client, I can see retrieve the quota values.\n\nDEBUG MESSAGE\n\nRecoverable error: The server has either erred or is incapable of performing the requested operation. (HTTP 500) (Request-ID: req-719d4c08-90d0-416a-9829-86eeaa59b6b3)\nTraceback (most recent call last):\n  File \"/home/njoy/horizon/horizon/usage/base.py\", line 110, in quota\n    self._quotas = api.nova.tenant_quota_usages(self.request)\n  File \"/home/njoy/horizon/horizon/utils/memoized.py\", line 33, in __call__\n    value = self.func(*args)\n  File \"/home/njoy/horizon/horizon/api/nova.py\", line 428, in tenant_quota_usages\n    floating_ips = tenant_floating_ip_list(request)\n  File \"/home/njoy/horizon/horizon/api/nova.py\", line 252, in tenant_floating_ip_list\n    return novaclient(request).floating_ips.list()\n  File \"/usr/local/lib/python2.7/dist-packages/python_novaclient-2.6.10-py2.7.egg/novaclient/v1_1/floating_ips.py\", line 35, in list\n    return self._list(\"/os-floating-ips\", \"floating_ips\")\n  File \"/usr/local/lib/python2.7/dist-packages/python_novaclient-2.6.10-py2.7.egg/novaclient/base.py\", line 62, in _list\n    _resp, body = self.api.client.get(url)\n  File \"/usr/local/lib/python2.7/dist-packages/python_novaclient-2.6.10-py2.7.egg/novaclient/client.py\", line 165, in get\n    return self._cs_request(url, 'GET', **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/python_novaclient-2.6.10-py2.7.egg/novaclient/client.py\", line 153, in _cs_request\n    **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/python_novaclient-2.6.10-py2.7.egg/novaclient/client.py\", line 135, in _time_request\n    resp, body = self.request(url, method, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/python_novaclient-2.6.10-py2.7.egg/novaclient/client.py\", line 129, in request\n    raise exceptions.from_response(resp, body)\nClientException: The server has either erred or is incapable of performing the requested operation. (HTTP 500) (Request-ID: req-719d4c08-90d0-416a-9829-86eeaa59b6b3)\n[24/Aug/2012 00:53:49] \"GET /nova/ HTTP/1.1\" 200 9791\n[24/Aug/2012 00:53:49] \"GET /i18n/js/horizon/ HTTP/1.1\" 200 2158\nunable to retrieve service catalog with token\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/keystoneclient/v2_0/client.py\", line 132, in _extract_service_catalog\n    endpoint_type='adminURL')\n  File \"/usr/local/lib/python2.7/dist-packages/keystoneclient/service_catalog.py\", line 62, in url_for\n    raise exceptions.EndpointNotFound('Endpoint not found.')\nEndpointNotFound: Endpoint not found.\n\n\nHORIZON LOCAL SETTINGS FILE:\nimport os\n\nfrom django.utils.translation import ugettext_lazy as _\n\nDEBUG = True\nTEMPLATE_DEBUG = DEBUG\n\n# Set SSL proxy settings:\n# For Django 1.4+ pass this header from the proxy after terminating the SSL,\n# and don't forget to strip it from the client's request.\n# For more information see:\n# https://docs.djangoproject.com/en/1.4/ref/settings/#secure-proxy-ssl-header\n# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTOCOL', 'https')\n\n# Specify a regular expression to validate user passwords.\n# HORIZON_CONFIG = {\n#     \"password_validator\": {\n#         \"regex\": '.*',\n#         \"help_text\": _(\"Your password does not meet the requirements.\")\n#     }\n# }\n\nLOCAL_PATH = os.path.dirname(os.path.abspath(__file__))\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'dash',\n        'USER': 'root',\n        'PASSWORD': '$pass',\n        'HOST': '192.168.xxx.yyy',\n        'default-character-set': 'utf8'\n    },\n}\n\nQUANTUM_ENABLED = True\nSWIFT_ENABLED = False\n\n# Set custom secret key:\n# You can either set it to a specific value or you can let horizion generate a\n# default secret key that is unique on this machine, e.i. regardless of the\n# amount of Python WSGI workers (if used behind Apache+mod_wsgi): However, there\n# may be situations where you would want to set this explicitly, e.g. when\n# multiple dashboard instances are distributed on different machines (usually\n# behind a load-balancer). Either you have to make sure that a session gets all\n# requests routed to the same dashboard instance or you set the same SECRET_KEY\n# for all of them.\n# from horizon.utils import secret_key\n# SECRET_KEY = secret_key.generate_or_read_from_file(os.path.join(LOCAL_PATH, '.secret_key_store'))\n\n# We recommend you use memcached for development; otherwise after every reload\n# of the django development server, you will have to login again. To use\n# memcached set CACHE_BACKED to something like 'memcached://127.0.0.1:11211/'\nCACHE_BACKEND = 'locmem://'\n\n# Send email to the console by default\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\n# Or send them to /dev/null\n#EMAIL_BACKEND = 'django.core.mail.backends.dummy.EmailBackend'\n\n# Configure these for your outgoing email host\n# EMAIL_HOST = 'smtp.my-company.com'\n# EMAIL_PORT = 25\n# EMAIL_HOST_USER = 'djangomail'\n# EMAIL_HOST_PASSWORD = 'top-secret!'\n\n# For multiple regions uncomment this configuration, and add (endpoint, title).\n# AVAILABLE_REGIONS = [\n#     ('http://cluster1.example.com:5000/v2.0', 'cluster1'),\n#     ('http://cluster2.example.com:5000/v2.0', 'cluster2'),\n# ]\n\nOPENSTACK_HOST = \"192.168.xxx.yyy\"\nOPENSTACK_KEYSTONE_URL = \"http://%s:5000/v2.0\" % OPENSTACK_HOST\n# OPENSTACK_KEYSTONE_URL = \"http://%s:35357/v2.0\" % OPENSTACK_HOST\nOPENSTACK_KEYSTONE_DEFAULT_ROLE = \"Member\"\n# OPENSTACK_ADMIN_TOKEN=\"ADMIN\"\n\n# The OPENSTACK_KEYSTONE_BACKEND settings can be used to identify the\n# capabilities of the auth backend for Keystone.\n# If Keystone has been configured to use LDAP as the auth backend then set\n# can_edit_user to False and name to 'ldap'.\n#\n# TODO(tres): Remove these once Keystone has an API to identify auth backend.\nOPENSTACK_KEYSTONE_BACKEND = {\n    'name': 'native',\n    'can_edit_user': True\n}\n\n# OPENSTACK_ENDPOINT_TYPE specifies the endpoint type to use for the endpoints\n# in the Keystone service catalog. Use this setting when Horizon is running\n# external to the OpenStack environment. The default is 'internalURL'.\n#OPENSTACK_ENDPOINT_TYPE = \"publicURL\"\n\n# The number of Swift containers and objects to display on a single page before\n# providing a paging element (a \"more\" link) to paginate results.\nAPI_RESULT_LIMIT = 1000\n\n# The timezone of the server. This should correspond with the timezone\n# of your entire OpenStack installation, and hopefully be in UTC.\nTIME_ZONE = \"UTC\"\n\nLOGGING = {\n        'version': 1,\n        # When set to True this will disable all logging except\n        # for loggers specified in this configuration dictionary. Note that\n        # if nothing is specified here and disable_existing_loggers is True,\n        # django.db.backends will still log unless it is disabled explicitly.\n        'disable_existing_loggers': False,\n        'handlers': {\n            'null': {\n                'level': 'DEBUG',\n                'class': 'django.utils.log.NullHandler',\n                },\n            'console': {\n                # Set the level to \"DEBUG\" for verbose output logging.\n                'level': 'INFO',\n                'class': 'logging.StreamHandler',\n                },\n            },\n        'loggers': {\n            # Logging from django.db.backends is VERY verbose, send to null\n            # by default.\n            'django.db.backends': {\n                'handlers': ['null'],\n                'propagate': False,\n                },\n            'horizon': {\n                'handlers': ['console'],\n                'propagate': False,\n            },\n            'openstack_dashboard': {\n                'handlers': ['console'],\n                'propagate': False,\n            },\n            'novaclient': {\n                'handlers': ['console'],\n                'propagate': False,\n            },\n            'keystoneclient': {\n                'handlers': ['console'],\n                'propagate': False,\n            },\n            'glanceclient': {\n                'handlers': ['console'],\n                'propagate': False,\n            },\n            'nose.plugins.manager': {\n                'handlers': ['console'],\n                'propagate': False,\n            }\n        }\n}", 
    "tags": [
        "quantum"
    ], 
    "importance": "Critical", 
    "heat": 40, 
    "link": "https://bugs.launchpad.net/nova/+bug/1040956", 
    "owner": "https://api.launchpad.net/1.0/~danwent", 
    "id": 1040956, 
    "index": 77, 
    "openned": "2012-08-26 19:44:04.437325+00:00", 
    "created": "2012-08-24 01:18:12.859503+00:00", 
    "title": "'Unable to get quota information' in horizon when using quantum", 
    "comments": [
        {
            "content": "Horizon is unable to retrieve quota information. Please see debug and the local_settings.py files below. However using the nova client, I can see retrieve the quota values.\n\nDEBUG MESSAGE\n\nRecoverable error: The server has either erred or is incapable of performing the requested operation. (HTTP 500) (Request-ID: req-719d4c08-90d0-416a-9829-86eeaa59b6b3)\nTraceback (most recent call last):\n  File \"/home/njoy/horizon/horizon/usage/base.py\", line 110, in quota\n    self._quotas = api.nova.tenant_quota_usages(self.request)\n  File \"/home/njoy/horizon/horizon/utils/memoized.py\", line 33, in __call__\n    value = self.func(*args)\n  File \"/home/njoy/horizon/horizon/api/nova.py\", line 428, in tenant_quota_usages\n    floating_ips = tenant_floating_ip_list(request)\n  File \"/home/njoy/horizon/horizon/api/nova.py\", line 252, in tenant_floating_ip_list\n    return novaclient(request).floating_ips.list()\n  File \"/usr/local/lib/python2.7/dist-packages/python_novaclient-2.6.10-py2.7.egg/novaclient/v1_1/floating_ips.py\", line 35, in list\n    return self._list(\"/os-floating-ips\", \"floating_ips\")\n  File \"/usr/local/lib/python2.7/dist-packages/python_novaclient-2.6.10-py2.7.egg/novaclient/base.py\", line 62, in _list\n    _resp, body = self.api.client.get(url)\n  File \"/usr/local/lib/python2.7/dist-packages/python_novaclient-2.6.10-py2.7.egg/novaclient/client.py\", line 165, in get\n    return self._cs_request(url, 'GET', **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/python_novaclient-2.6.10-py2.7.egg/novaclient/client.py\", line 153, in _cs_request\n    **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/python_novaclient-2.6.10-py2.7.egg/novaclient/client.py\", line 135, in _time_request\n    resp, body = self.request(url, method, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/python_novaclient-2.6.10-py2.7.egg/novaclient/client.py\", line 129, in request\n    raise exceptions.from_response(resp, body)\nClientException: The server has either erred or is incapable of performing the requested operation. (HTTP 500) (Request-ID: req-719d4c08-90d0-416a-9829-86eeaa59b6b3)\n[24/Aug/2012 00:53:49] \"GET /nova/ HTTP/1.1\" 200 9791\n[24/Aug/2012 00:53:49] \"GET /i18n/js/horizon/ HTTP/1.1\" 200 2158\nunable to retrieve service catalog with token\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/keystoneclient/v2_0/client.py\", line 132, in _extract_service_catalog\n    endpoint_type='adminURL')\n  File \"/usr/local/lib/python2.7/dist-packages/keystoneclient/service_catalog.py\", line 62, in url_for\n    raise exceptions.EndpointNotFound('Endpoint not found.')\nEndpointNotFound: Endpoint not found.\n\n\nHORIZON LOCAL SETTINGS FILE:\nimport os\n\nfrom django.utils.translation import ugettext_lazy as _\n\nDEBUG = True\nTEMPLATE_DEBUG = DEBUG\n\n# Set SSL proxy settings:\n# For Django 1.4+ pass this header from the proxy after terminating the SSL,\n# and don't forget to strip it from the client's request.\n# For more information see:\n# https://docs.djangoproject.com/en/1.4/ref/settings/#secure-proxy-ssl-header\n# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTOCOL', 'https')\n\n# Specify a regular expression to validate user passwords.\n# HORIZON_CONFIG = {\n#     \"password_validator\": {\n#         \"regex\": '.*',\n#         \"help_text\": _(\"Your password does not meet the requirements.\")\n#     }\n# }\n\nLOCAL_PATH = os.path.dirname(os.path.abspath(__file__))\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'dash',\n        'USER': 'root',\n        'PASSWORD': '$pass',\n        'HOST': '192.168.xxx.yyy',\n        'default-character-set': 'utf8'\n    },\n}\n\nQUANTUM_ENABLED = True\nSWIFT_ENABLED = False\n\n# Set custom secret key:\n# You can either set it to a specific value or you can let horizion generate a\n# default secret key that is unique on this machine, e.i. regardless of the\n# amount of Python WSGI workers (if used behind Apache+mod_wsgi): However, there\n# may be situations where you would want to set this explicitly, e.g. when\n# multiple dashboard instances are distributed on different machines (usually\n# behind a load-balancer). Either you have to make sure that a session gets all\n# requests routed to the same dashboard instance or you set the same SECRET_KEY\n# for all of them.\n# from horizon.utils import secret_key\n# SECRET_KEY = secret_key.generate_or_read_from_file(os.path.join(LOCAL_PATH, '.secret_key_store'))\n\n# We recommend you use memcached for development; otherwise after every reload\n# of the django development server, you will have to login again. To use\n# memcached set CACHE_BACKED to something like 'memcached://127.0.0.1:11211/'\nCACHE_BACKEND = 'locmem://'\n\n# Send email to the console by default\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\n# Or send them to /dev/null\n#EMAIL_BACKEND = 'django.core.mail.backends.dummy.EmailBackend'\n\n# Configure these for your outgoing email host\n# EMAIL_HOST = 'smtp.my-company.com'\n# EMAIL_PORT = 25\n# EMAIL_HOST_USER = 'djangomail'\n# EMAIL_HOST_PASSWORD = 'top-secret!'\n\n# For multiple regions uncomment this configuration, and add (endpoint, title).\n# AVAILABLE_REGIONS = [\n#     ('http://cluster1.example.com:5000/v2.0', 'cluster1'),\n#     ('http://cluster2.example.com:5000/v2.0', 'cluster2'),\n# ]\n\nOPENSTACK_HOST = \"192.168.xxx.yyy\"\nOPENSTACK_KEYSTONE_URL = \"http://%s:5000/v2.0\" % OPENSTACK_HOST\n# OPENSTACK_KEYSTONE_URL = \"http://%s:35357/v2.0\" % OPENSTACK_HOST\nOPENSTACK_KEYSTONE_DEFAULT_ROLE = \"Member\"\n# OPENSTACK_ADMIN_TOKEN=\"ADMIN\"\n\n# The OPENSTACK_KEYSTONE_BACKEND settings can be used to identify the\n# capabilities of the auth backend for Keystone.\n# If Keystone has been configured to use LDAP as the auth backend then set\n# can_edit_user to False and name to 'ldap'.\n#\n# TODO(tres): Remove these once Keystone has an API to identify auth backend.\nOPENSTACK_KEYSTONE_BACKEND = {\n    'name': 'native',\n    'can_edit_user': True\n}\n\n# OPENSTACK_ENDPOINT_TYPE specifies the endpoint type to use for the endpoints\n# in the Keystone service catalog. Use this setting when Horizon is running\n# external to the OpenStack environment. The default is 'internalURL'.\n#OPENSTACK_ENDPOINT_TYPE = \"publicURL\"\n\n# The number of Swift containers and objects to display on a single page before\n# providing a paging element (a \"more\" link) to paginate results.\nAPI_RESULT_LIMIT = 1000\n\n# The timezone of the server. This should correspond with the timezone\n# of your entire OpenStack installation, and hopefully be in UTC.\nTIME_ZONE = \"UTC\"\n\nLOGGING = {\n        'version': 1,\n        # When set to True this will disable all logging except\n        # for loggers specified in this configuration dictionary. Note that\n        # if nothing is specified here and disable_existing_loggers is True,\n        # django.db.backends will still log unless it is disabled explicitly.\n        'disable_existing_loggers': False,\n        'handlers': {\n            'null': {\n                'level': 'DEBUG',\n                'class': 'django.utils.log.NullHandler',\n                },\n            'console': {\n                # Set the level to \"DEBUG\" for verbose output logging.\n                'level': 'INFO',\n                'class': 'logging.StreamHandler',\n                },\n            },\n        'loggers': {\n            # Logging from django.db.backends is VERY verbose, send to null\n            # by default.\n            'django.db.backends': {\n                'handlers': ['null'],\n                'propagate': False,\n                },\n            'horizon': {\n                'handlers': ['console'],\n                'propagate': False,\n            },\n            'openstack_dashboard': {\n                'handlers': ['console'],\n                'propagate': False,\n            },\n            'novaclient': {\n                'handlers': ['console'],\n                'propagate': False,\n            },\n            'keystoneclient': {\n                'handlers': ['console'],\n                'propagate': False,\n            },\n            'glanceclient': {\n                'handlers': ['console'],\n                'propagate': False,\n            },\n            'nose.plugins.manager': {\n                'handlers': ['console'],\n                'propagate': False,\n            }\n        }\n}", 
            "date_created": "2012-08-24 01:18:12.859503+00:00", 
            "author": "https://api.launchpad.net/1.0/~najoy"
        }, 
        {
            "content": "The traceback indicates that something went wrong with Nova (hence the 500 error code). I'd have to see the nova logs to even begin debugging this.\r\n\r\nIt would also be helpful to know how you installed the various OpenStack components and what versions you're running of Horizon, Nova and python-novaclient.\r\n\r\nLastly, it would be helpful to know if everything works *except* this, or if this is just the first error you saw.", 
            "date_created": "2012-08-25 19:52:12.880628+00:00", 
            "author": "https://api.launchpad.net/1.0/~gabriel-hurley"
        }, 
        {
            "content": "Please find the requested information in the attached file. Let me know if you need anything else. Thanks for looking into this issue!.", 
            "date_created": "2012-08-25 20:42:35.243768+00:00", 
            "author": "https://api.launchpad.net/1.0/~najoy"
        }, 
        {
            "content": "Thanks for following up, Naveen. The information in that attachment was exactly what we needed.\r\n\r\nThe bug you're seeing is way deep down in Nova (and has nothing to do with Horizon or novaclient) so I'm adding Nova to this bug report, but closing it for Horizon. Hopefully they can follow up with you to see if this is a known issue or a new one.", 
            "date_created": "2012-08-26 19:45:52.134223+00:00", 
            "author": "https://api.launchpad.net/1.0/~gabriel-hurley"
        }, 
        {
            "content": "From the attachment, the issue appears to be this:\n\n  nova/api/openstack/compute/contrib/floating_ips.py\", line 154, in index\n     floating_ips = self.network_api.get_floating_ips_by_project(context)\n  nova/network/quantumv2/api.py\", line 260, in get_floating_ips_by_project\n      raise NotImplementedError()\n\nLooks like Horizon is trying to list floating IPs from Nova and this doesn't work with Quantum\n\nSerious issue, but unclear whether this will be fixed in Horizon or Nova at this point - targeting to nova's rc1 milestone for now", 
            "date_created": "2012-08-29 12:37:12.252342+00:00", 
            "author": "https://api.launchpad.net/1.0/~markmc"
        }, 
        {
            "content": "Its pretty easy to work around this in Nova, so I can make that change.  \n\nThe \"right\" fix is probably in Horizon, as when Quantum is in use, the Quantum API should be queried for floating IPs, not the nova API.  The issue is that Horizon does not yet have support for the Quantum L3 extensions, which landed extremely late in Folsom, so its not clear that the \"right\" fix makes sense in Folsom . ", 
            "date_created": "2012-08-29 21:15:18.684798+00:00", 
            "author": "https://api.launchpad.net/1.0/~danwent"
        }, 
        {
            "content": "Re-opening in Horizon for it to be re-looked at there given Dan's comment", 
            "date_created": "2012-08-30 05:43:44.771806+00:00", 
            "author": "https://api.launchpad.net/1.0/~markmc"
        }, 
        {
            "content": "The workaround for this particular error message in Nova is trivial: \n\ndiff --git a/nova/network/quantumv2/api.py b/nova/network/quantumv2/api.py\nindex 990af4c..7db4525 100644\n--- a/nova/network/quantumv2/api.py\n+++ b/nova/network/quantumv2/api.py\n@@ -254,7 +254,7 @@ class API(base.Base):\n         raise NotImplementedError()\n \n     def get_floating_ips_by_project(self, context):\n-        raise NotImplementedError()\n+        return []\n \n     def get_floating_ips_by_fixed_address(self, context, fixed_address):\n         raise NotImplementedError()\n\n\nHowever, after thinking about this more, I think its really that we either need to: \n\n1) actually proxy Nova Floating IP calls to Quantum\n2) prevent Horizon from calling Nova floating IP calls (here and elsewhere) when Quantum is enabled.  \n\nThe reason is that it doesn't seem right for Horizon to suggest that there are working floating IPs when there are not.  \n\nOur original plan was to do #1 as part of F-3 but this bug wasn't finished then and working on it as an FFE stalled and the current author seems to not actively be doing anything (https://bugs.launchpad.net/quantum/+bug/1031119).  \n\nAkihiro has volunteered to do this work.  I think it would be great for him to do this, and I think it would be pretty straightforward.  That said, this is a change in Nova and is definitely non-trivial, so its not clear that it should be added for Folsom.  That call is up to the Nova folks.  It can definitely be put in Grizzly though.  \n", 
            "date_created": "2012-08-30 06:07:58.075003+00:00", 
            "author": "https://api.launchpad.net/1.0/~danwent"
        }, 
        {
            "content": "/Information for quantum people using devstack/\n\nTo reproduce the bug, we need to use the default libvirt firewall driver (nova.virt.libvirt.firewall.IptablesFirewallDriver).\nPlease clear LIBVIRT_FIREWALL_DRIVER in localrc.\n\nNote that QuantumDevstack wiki pages recommends \"LIBVIRT_FIREWALL_DRIVER=nova.virt.firewall.NoopFirewallDriver\") when using devstack with Quantum v2.\n\nThanks", 
            "date_created": "2012-08-30 06:35:37.555022+00:00", 
            "author": "https://api.launchpad.net/1.0/~amotoki"
        }, 
        {
            "content": "Please ignore my previous comment. I used the wrong tab to write the comment.", 
            "date_created": "2012-08-30 06:36:32.096232+00:00", 
            "author": "https://api.launchpad.net/1.0/~amotoki"
        }, 
        {
            "content": "Hi folks, just wanted to ping again about this.  Are we planning a change in Horizon or Nova? ", 
            "date_created": "2012-09-07 17:08:15.714609+00:00", 
            "author": "https://api.launchpad.net/1.0/~danwent"
        }, 
        {
            "content": "For what it's worth I'd rather not have this be a \"we can't fix it so let's add another setting in Horizon\" scenario... Patches to Nova/Quantum preferred ;-)", 
            "date_created": "2012-09-07 22:48:59.979400+00:00", 
            "author": "https://api.launchpad.net/1.0/~gabriel-hurley"
        }, 
        {
            "content": "Vish says \"I would lean towards just returning [] for now and get the proxying done asap in Grizzly.\"", 
            "date_created": "2012-09-11 19:00:59.395566+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/12820", 
            "date_created": "2012-09-11 19:23:14.945488+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "I'm good with that fix in Nova for Folsom. Since this is only being used for an informational quota display it's not mission-critical that it be correct with Quantum right away. It can just be a known limitation.\r\n\r\nClosing for Horizon now that we have a proposed solution.", 
            "date_created": "2012-09-11 19:25:34.839284+00:00", 
            "author": "https://api.launchpad.net/1.0/~gabriel-hurley"
        }, 
        {
            "content": "pushed Nova work around: https://review.openstack.org/12820\n\nNote, this also returns an empty list for the floating ip pools, which\nideally would prevent users from even being able to try and create a\nfloating IP (which also will not work).  This doesn't work perfectly\nthough, as it seems like Horizon will let a user press the \"Allocate\nIP\" button even if no floating ip pools are available.  Horizon\ncorrectly reports an error though, so the issue is minor.\n\nDan\n\n\n-- \n~~~~~~~~~~~~~~~~~~~~~~~~~~~\nDan Wendlandt\nNicira, Inc: www.nicira.com\ntwitter: danwendlandt\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n", 
            "date_created": "2012-09-11 19:27:30+00:00", 
            "author": "https://api.launchpad.net/1.0/~danwent"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/12820\nCommitted: http://github.com/openstack/nova/commit/c0709bdd82c83e16cab6ed854d2ef873eb775473\nSubmitter: Jenkins\nBranch:    master\n\ncommit c0709bdd82c83e16cab6ed854d2ef873eb775473\nAuthor: Dan Wendlandt <email address hidden>\nDate:   Tue Sep 11 12:22:23 2012 -0700\n\n    workaround lack of quantum/nova floatingip integration\n    \n    bug 1040956\n    \n    The Nova/Quantum integration in Folsom does not yet proxy Nova\n    floating IP calls to Quantum.  However, Horizon automatically\n    makes calls to Nova to list floating IPs, which prior to this\n    patch resulted in a Horizon error message due to the fact that\n    the Quantum integration code in Nova would raise an Unimplemented\n    error.  This patch changes that behavior to instead return an\n    empty list.\n    \n    This is a workaround for Folsom.  The correct long-term behavior\n    is either to:\n    1) have Nova proxy all floating-ip calls to Quantum when quantum\n    is enabled.\n    2) have Horizon use the Quantum floating-ip API when Quantum\n    is enabled.\n    \n    Change-Id: I5414d935e872a9da108511b50e70545d82b73347\n", 
            "date_created": "2012-09-15 14:06:25.771295+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ], 
    "closed": "2012-09-19 06:32:30.879797+00:00"
}
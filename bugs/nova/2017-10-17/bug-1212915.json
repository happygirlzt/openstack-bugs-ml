{
    "status": "Fix Released", 
    "last_updated": "2013-10-17 12:13:51.653083+00:00", 
    "description": "Nova api \"show\" do not fetch the error message of vm in havana.\n\nIn /nova/nova/api/openstack/compute/views/servers.py, fault = instance.get(\"fault\", None), cannot get the fault message.\nI tried instance[\"fault\"], If the vm in error state, it get the error message.\n\nSo i think it's some lazy load problem of the instance object and instance fault.", 
    "tags": [
        "api", 
        "havana", 
        "unified-objects"
    ], 
    "importance": "Undecided", 
    "heat": 20, 
    "link": "https://bugs.launchpad.net/nova/+bug/1212915", 
    "owner": "https://api.launchpad.net/1.0/~jay-lau-513", 
    "id": 1212915, 
    "index": 5240, 
    "openned": "2013-08-16 02:33:40.651282+00:00", 
    "created": "2013-08-16 02:33:40.651282+00:00", 
    "title": "nova api 'show' do not fetch error message of vm", 
    "comments": [
        {
            "content": "Nova api \"show\" do not fetch the error message of vm in havana.\n\nIn /nova/nova/api/openstack/compute/views/servers.py, fault = instance.get(\"fault\", None), cannot get the fault message.\nI tried instance[\"fault\"], If the vm in error state, it get the error message.\n\nSo i think it's some lazy load problem of the instance object and instance fault.", 
            "date_created": "2013-08-16 02:33:40.651282+00:00", 
            "author": "https://api.launchpad.net/1.0/~shunliz"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/42283", 
            "date_created": "2013-08-16 05:11:39.049300+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "\nSome duscussion with Matt.\n\n[23:57] <jay-lau-513> mriedem still patch 42283\n[23:58] <mriedem> jay-lau-513: yeah, i still don't understand the problem with the calling test case passing kwargs and the instance dict doing an updtae on those kwargs if they aren't in the default base set, like the original stub was written\n[23:58] <mriedem> jay-lau-513: i don't see the need to explicitly handle each possible instance attribute in that stub method\n[23:59] <mriedem> jay-lau-513: maybe i'm not looking at it correctly and someone else needs to make the point to me, but i have a feeling everyone else on that review is busy\n[23:59] <jay-lau-513> mriedem this will cause some stub method transfer many parameters\n[00:00] <mriedem> jay-lau-513: why would any existing test cases have to change if they worked with the old stub method in fake_instance that used kwargs?\n[00:00] <mriedem> this should all be backwards-compatible\n[00:01] <jay-lau-513> mriedem  1) Parameter is not enough 2) The orignal fake_db_instance do not support access DB, and some test cases need to access DB\n[00:05] <mriedem> jay-lau-513: going back to patch set 26, you moved fake_instance_obj to fake_instance.py but were using fakes.stub_instance to create the instance dict,\n[00:05] <mriedem> jay-lau-513: so dansmith said you should just use fake_instance.fake_db_instance rather than fakes.stub_instance, which i agree with\n[00:05] <mriedem> jay-lau-513: if that works, you wouldn't have to change fake_instance.fake_db_instance and reduce all of the new code here\n[00:06] <jay-lau-513> mriedem  yes, but it does not work if call fake_instance.fake_db_instance directly\n[00:06] <mriedem> jay-lau-513: sec, i'm still going back to look at fakes' version of stub_instance\n[00:08] <mriedem> jay-lau-513: so i'm looking at fakes.stub_instance, it has all of the instance args explicitly laid out like you have in fake_instance now, and that's why you copied create_info_cache from fakes to fake_instance,\n[00:08] <mriedem> jay-lau-513: and fakes.stub_instances doesn't go to the db\n[00:09] <jay-lau-513> mriedem  fakes.stub_instance: inst_type = flavors.get_flavor_by_flavor_id(int(flavor_id))     sys_meta = flavors.save_flavor_info({}, inst_type)\n[00:09] <mriedem> jay-lau-513: now i don't see that the original version of fake_instance.fake_db_instance put anything in the db either\n[00:09] <jay-lau-513> mriedem  it need to query db\n[00:10] <jay-lau-513> mriedem  Actually, I did some merge work for fake_instance.fake_db_instance and fakes.stub_instance\n[00:11] <mriedem> jay-lau-513: there isn't anything around that fakes/stubs instance_type so it doesn't have to go to the db?\n[00:12] <jay-lau-513> mriedem   flavors.get_flavor_by_flavor_id(int(flavor_id)) this need to call DB\n[00:12] <mriedem> jay-lau-513: yeah, if you use that, but there isn't anything that stubs that out?\n[00:12] <jay-lau-513> mriedem   yes. no stub\n[00:13] <mriedem> jay-lau-513: ok, so let's assume you have to go to the db to get the instance_type for the stub, is that a problem? in other words, why can't that be one small difference/addition to fake_instance.fake_db_instance so we don't have all of this explicit instance attribute handling?\n[00:15] <jay-lau-513> mriedem   fake_instance.fake_db_instance was called by some NonDBTestCase\n[00:15] <mriedem> jay-lau-513: i think the instance_types are pre-loaded into the database for the tests aren't they?\n[00:15] <mriedem> default flavors are more or less static i thought\n[00:16] <jay-lau-513> mriedem   yes\n[00:16] <mriedem> jay-lau-513: so then what's the problem with a non-db test case using flavors.get_flavor_by_flavor_id?\n[00:17] <jay-lau-513> mriedem   if do not get all those parameters in fake_instance.fake_db_instance, then I need to figure out which parameter each test cases need related to my change ..\n[00:17] <jay-lau-513> mriedem   I think it might be not a samll code change\n[00:18] <jay-lau-513> mriedem   The problem for non-db test case is that I need to stub flavors.get_flavor_by_flavor_id for those cases\n[00:19] <mriedem> jay-lau-513: if you don't get all the parameters explicitly, you're saying you need to figure out what each test case needs that was using fakes.stub_instance b/c they were relying on the defaults used in fakes.stub_instance?\n[00:19] <jay-lau-513> mriedem   exactly\n[00:20] <mriedem> jay-lau-513: how many test cases are we talking here?\n[00:20] <jay-lau-513> mriedem   all the test cases in my patch\n[00:23] <jay-lau-513> mriedem    if we provide enough parameters here, then the test cases would be easy to write.\n[00:24] <mriedem> jay-lau-513: i'm going to run out for a bit, but unless dansmith sees another way around this (or you do), i'd think we just keep the stub to convert the instance dict stub to an object in fakes and use fakes.stub_instance as was in the earlier patches,\n[00:24] <mriedem> to avoid carrying all of these changes to fake_instance.fake_db_instance, unless dansmith is ok with that...\n[00:25] <jay-lau-513> mriedem   ok, thanks matt.\n", 
            "date_created": "2013-09-13 16:38:18.686510+00:00", 
            "author": "https://api.launchpad.net/1.0/~jay-lau-513"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/48205\nCommitted: http://github.com/openstack/nova/commit/5aeab0527798fa1226ef13b893d9361709b94847\nSubmitter: Jenkins\nBranch:    master\n\ncommit 5aeab0527798fa1226ef13b893d9361709b94847\nAuthor: Jay Lau <email address hidden>\nDate:   Wed Sep 25 16:51:04 2013 +0800\n\n    Refactor test cases related to instance object\n    \n    After the blueprint unified-object-model, all of the instances\n    should be represented by an instance object but not a db\n    instance dict.\n    \n    In some test cases, they are still using db instance dict,\n    we should change those test cases to use instance object.\n    \n    The fix include three parts:\n    1) Add a new stub method fake_fault_obj in\n    nova/tests/fake_instance.py to help convert a dict fault to an\n    object fault.\n    2) Add a new stub method fake_instance_obj in\n    nova/tests/fake_instance.py to help convert a dict instance to\n    an object instance.\n    3) Make sure all test cases related to \"fault\" and \"instance\" passed.\n    \n    Closes-Bug 1230125\n    Partial-Bug 1212915\n    \n    Change-Id: Ie54fface139e4ad042b9a748c7409c3698875413\n", 
            "date_created": "2013-10-01 14:57:38.459040+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/42283\nCommitted: http://github.com/openstack/nova/commit/9795c3e9fdc1f6253f3099414e379367b50587dc\nSubmitter: Jenkins\nBranch:    master\n\ncommit 9795c3e9fdc1f6253f3099414e379367b50587dc\nAuthor: Jay Lau <email address hidden>\nDate:   Thu Sep 26 17:27:35 2013 +0800\n\n    Fix loading instance fault in servers view\n    \n    If VM schedule failed, then VM will be set to ERROR state,\n    but \"nova show\" does not show the fault of the VM.\n    \n    The fix use lazy load to get instance fault if the instance\n    went to ERROR state.\n    \n    Closes-Bug: #1212915\n    \n    Change-Id: If286fd0176be8307c50b2a7c3534fff33fa5c10f\n", 
            "date_created": "2013-10-01 14:58:17.650149+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ], 
    "closed": "2013-10-03 08:00:15.235769+00:00"
}
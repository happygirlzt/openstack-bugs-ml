{
    "status": "Opinion", 
    "last_updated": "2015-03-30 12:20:48.854010+00:00", 
    "description": "overall description: \nIf nova-network crashes (and then restarts) during a \"nova delete\" operation, then the ip associated with the deleted VM instance may remain in the \"allocated\" state. This may affect the subsequent network related operations. \n\nconcrete example:\nstep 1: create a fixed ip network with only 4 ips. \nthe \"fixed_ips\" table looks like the follwoing at this stage:\n========================================\nmysql> select id,address,instance_id,allocated,leased,reserved from fixed_ips;\n+----+---------------+-------------+-----------+--------+----------+\n| id | address       | instance_id | allocated | leased | reserved |\n+----+---------------+-------------+-----------+--------+----------+\n|  1 | 192.199.196.0 |        NULL |         0 |      0 |        1 |\n|  2 | 192.199.196.1 |        NULL |         0 |      0 |        1 |\n|  3 | 192.199.196.2 |        NULL |         0 |      0 |        0 |\n|  4 | 192.199.196.3 |        NULL |         0 |      0 |        1 |\n+----+---------------+-------------+-----------+--------+----------+\n========================================\n\nstep 2: create a VM and then delete it. \n\nduring the execution of \"nova delete\" command, nova-compute sends a rpc call and then a rpc cast to nova-network. At the time of the rpc cast, before the rpc is sent, we stop nova-network service (to emulate a service crash). The rpc cast is lost if the rpc queue related to nova-network is auto-deleted with the stopped service. \n\nthe \"nova delete\" command returns successfully. the VM is marked as deleted. but the ip associated with the VM is still marked as \"allocated\" due to the lost rpc message. \n\nthe \"fixed_ips\" table looks like the following at this stage:\n========================================\nmysql> select id,address,instance_id,allocated,leased,reserved from fixed_ips;\n+----+---------------+-------------+-----------+--------+----------+\n| id | address       | instance_id | allocated | leased | reserved |\n+----+---------------+-------------+-----------+--------+----------+\n|  1 | 192.199.196.0 |        NULL |         0 |      0 |        1 |\n|  2 | 192.199.196.1 |        NULL |         0 |      0 |        1 |\n|  3 | 192.199.196.2 |               1 |         1 |      0 |        0 |\n|  4 | 192.199.196.3 |        NULL |         0 |      0 |        1 |\n+----+---------------+-------------+-----------+--------+----------+\n========================================\n\nstep 3: restart the nova-network service. try to create another VM via \"nova boot.\" this time we will get an exception due to \"zero fixed ips available.\" \n\nthought:\nfrom a user's perspective, the VM in step 3 should be created. that operation cannot succeed due to the existence of an \"orphan\" ip related to a previously deleted instance. Admittedly, the situation in the above example can be avoided by configuring the rpc queue related to nova-network to be non-auto-deleted. But a periodical orphan ip cleanup logic may help in general in such cases. \n\nIs there such a logic/module in OpenStack? If there is, should it be triggered when the \"fixed_ips\" table is about to be exhausted (as in the above example)?", 
    "tags": [
        "cleanup", 
        "ip", 
        "nova-network"
    ], 
    "importance": "Wishlist", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1102714", 
    "owner": "None", 
    "id": 1102714, 
    "index": 2586, 
    "openned": "2013-01-22 01:44:18.216182+00:00", 
    "created": "2013-01-22 01:44:18.216182+00:00", 
    "title": "nova-network related fixed ip cleanup is needed", 
    "comments": [
        {
            "content": "overall description: \nIf nova-network crashes (and then restarts) during a \"nova delete\" operation, then the ip associated with the deleted VM instance may remain in the \"allocated\" state. This may affect the subsequent network related operations. \n\nconcrete example:\nstep 1: create a fixed ip network with only 4 ips. \nthe \"fixed_ips\" table looks like the follwoing at this stage:\n========================================\nmysql> select id,address,instance_id,allocated,leased,reserved from fixed_ips;\n+----+---------------+-------------+-----------+--------+----------+\n| id | address       | instance_id | allocated | leased | reserved |\n+----+---------------+-------------+-----------+--------+----------+\n|  1 | 192.199.196.0 |        NULL |         0 |      0 |        1 |\n|  2 | 192.199.196.1 |        NULL |         0 |      0 |        1 |\n|  3 | 192.199.196.2 |        NULL |         0 |      0 |        0 |\n|  4 | 192.199.196.3 |        NULL |         0 |      0 |        1 |\n+----+---------------+-------------+-----------+--------+----------+\n========================================\n\nstep 2: create a VM and then delete it. \n\nduring the execution of \"nova delete\" command, nova-compute sends a rpc call and then a rpc cast to nova-network. At the time of the rpc cast, before the rpc is sent, we stop nova-network service (to emulate a service crash). The rpc cast is lost if the rpc queue related to nova-network is auto-deleted with the stopped service. \n\nthe \"nova delete\" command returns successfully. the VM is marked as deleted. but the ip associated with the VM is still marked as \"allocated\" due to the lost rpc message. \n\nthe \"fixed_ips\" table looks like the following at this stage:\n========================================\nmysql> select id,address,instance_id,allocated,leased,reserved from fixed_ips;\n+----+---------------+-------------+-----------+--------+----------+\n| id | address       | instance_id | allocated | leased | reserved |\n+----+---------------+-------------+-----------+--------+----------+\n|  1 | 192.199.196.0 |        NULL |         0 |      0 |        1 |\n|  2 | 192.199.196.1 |        NULL |         0 |      0 |        1 |\n|  3 | 192.199.196.2 |               1 |         1 |      0 |        0 |\n|  4 | 192.199.196.3 |        NULL |         0 |      0 |        1 |\n+----+---------------+-------------+-----------+--------+----------+\n========================================\n\nstep 3: restart the nova-network service. try to create another VM via \"nova boot.\" this time we will get an exception due to \"zero fixed ips available.\" \n\nthought:\nfrom a user's perspective, the VM in step 3 should be created. that operation cannot succeed due to the existence of an \"orphan\" ip related to a previously deleted instance. Admittedly, the situation in the above example can be avoided by configuring the rpc queue related to nova-network to be non-auto-deleted. But a periodical orphan ip cleanup logic may help in general in such cases. \n\nIs there such a logic/module in OpenStack? If there is, should it be triggered when the \"fixed_ips\" table is about to be exhausted (as in the above example)?", 
            "date_created": "2013-01-22 01:44:18.216182+00:00", 
            "author": "https://api.launchpad.net/1.0/~samuel-xj"
        }, 
        {
            "content": "There is no cleanup module for this, but a periodic task to check for orphan ips could be added.", 
            "date_created": "2013-02-26 21:36:45.124331+00:00", 
            "author": "https://api.launchpad.net/1.0/~vishvananda"
        }, 
        {
            "content": "Which vesion are you using?", 
            "date_created": "2013-02-27 18:42:25.301152+00:00", 
            "author": "https://api.launchpad.net/1.0/~zulcss"
        }, 
        {
            "content": "We are using Essex (2012.1).\n\nOn Wed, Feb 27, 2013 at 1:42 PM, Chuck Short <email address hidden>wrote:\n\n> Which vesion are you using?\n>\n> --\n> You received this bug notification because you are subscribed to the bug\n> report.\n> https://bugs.launchpad.net/bugs/1102714\n>\n> Title:\n>   nova-network related fixed ip cleanup is needed\n>\n> To manage notifications about this bug go to:\n> https://bugs.launchpad.net/nova/+bug/1102714/+subscriptions\n>\n", 
            "date_created": "2013-02-28 01:20:23+00:00", 
            "author": "https://api.launchpad.net/1.0/~samuel-xj"
        }
    ], 
    "closed": "2015-03-30 12:20:44.695004+00:00"
}
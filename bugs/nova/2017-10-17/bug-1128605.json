{
    "status": "Fix Released", 
    "last_updated": "2013-04-04 12:46:59.668523+00:00", 
    "description": "The eventlet tpool implementation wraps every SQL query individually such that deadlock can occur.  When using transactions (and autocommit is False anyway, such that we're always using transactions), all SQL queries must submit a 'COMMIT' query to end the transaction.  It's possible that there are no threads available to submit the 'COMMIT' query because they are all blocking in SQL queries that grab a lock.\n\nIe, imagine the thread pool size is 20.  Imagine that you have 20 queries in progress that grab the same lock within mysql... and all are in a state where none of them have done a COMMIT yet.  You now have 20 queries stuck waiting for the lock timeout.\n\nEventually you'll get a 'Lock wait timeout' error from mysql.\n\nWhen we implement tpool, we'll need to wrap each DB API call as a whole.", 
    "tags": [], 
    "importance": "Medium", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1128605", 
    "owner": "https://api.launchpad.net/1.0/~cbehrens", 
    "id": 1128605, 
    "index": 3235, 
    "openned": "2013-02-18 03:44:01.756876+00:00", 
    "created": "2013-02-18 01:47:22.941349+00:00", 
    "title": "tpool implementation in sqlalchemy is wrong", 
    "comments": [
        {
            "content": "The eventlet tpool implementation wraps every SQL query individually such that deadlock can occur.  When using transactions (and autocommit is False anyway, such that we're always using transactions), all SQL queries must submit a 'COMMIT' query to end the transaction.  It's possible that there are no threads available to submit the 'COMMIT' query because they are all blocking in SQL queries that grab a lock.\n\nIe, imagine the thread pool size is 20.  Imagine that you have 20 queries in progress that grab the same lock within mysql... and all are in a state where none of them have done a COMMIT yet.  You now have 20 queries stuck waiting for the lock timeout.\n\nEventually you'll get a 'Lock wait timeout' error from mysql.\n\nWhen we implement tpool, we'll need to wrap each DB API call as a whole.", 
            "date_created": "2013-02-18 01:47:22.941349+00:00", 
            "author": "https://api.launchpad.net/1.0/~cbehrens"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/22158", 
            "date_created": "2013-02-18 02:43:09.958781+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/22163", 
            "date_created": "2013-02-18 04:06:04.953502+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/22158\nCommitted: http://github.com/openstack/oslo-incubator/commit/02c12aade7a0c28c66cb45b54786c90c0ae8fb09\nSubmitter: Jenkins\nBranch:    master\n\ncommit 02c12aade7a0c28c66cb45b54786c90c0ae8fb09\nAuthor: Chris Behrens <email address hidden>\nDate:   Mon Feb 18 02:35:34 2013 +0000\n\n    Move DB thread pooling to DB API loader\n    \n    Fixes bug 1128605\n    \n    The dbpool code in sqlalchemy session is the wrong place to implement\n    thread pooling as it wraps each individual SQL call to run in its own\n    thread.  When combined with SQL server locking, all threads can be eaten\n    waiting on locks with none available to run a 'COMMIT'.\n    \n    The correct place to do thread pooling is around each DB API call.\n    \n    This patch removes dbpool from sqlalchemy and creates a common DB API\n    loader for all openstack projects which implements the following\n    configuration options:\n    \n    db_backend: Full path to DB API backend module (or a known short name if\n                a project chooses to implement a mapping)\n    dbapi_use_tpool: True or False whether to use thread pooling around all\n                     DB API calls.\n    \n    DB backend modules must implement a 'get_backend()' method.\n    \n    Example usage for nova/db/api.py would be:\n    \n    \"\"\"\n    from nova.openstack.common.db import api as db_api\n    \n    _KNOWN_BACKENDS = {'sqlalchemy': 'nova.db.sqlalchemy.api'}\n    \n    IMPL = db_api.DBAPI(backend_mapping=_KNOWN_BACKENDS)\n    \"\"\"\n    \n    NOTE: Enabling thread pooling will be broken until this issue is\n    resolved in eventlet _OR_ until we modify our eventlet.monkey_patch()\n    calls to include 'thread=False':\n    \n    https://bitbucket.org/eventlet/eventlet/issue/137/\n    \n    Change-Id: Idf14563ea07cf8ccf2a77b3f53659d8528927fc7\n", 
            "date_created": "2013-02-20 21:17:17.212758+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/22163\nCommitted: http://github.com/openstack/nova/commit/de09aa254f647dc0dab0cd67c0ed26e093df180a\nSubmitter: Jenkins\nBranch:    master\n\ncommit de09aa254f647dc0dab0cd67c0ed26e093df180a\nAuthor: Chris Behrens <email address hidden>\nDate:   Mon Feb 18 04:00:38 2013 +0000\n\n    Move DB thread pooling to DB API.\n    \n    The eventlet db_pool wrapping done in sqlalchemy is wrong.  It needs to\n    be around the whole DB API call.\n    \n    Fixes bug 1128605\n    \n    Syncs nova with the fix in oslo.  Moves nova to use the oslo version of\n    db/api.py to import the DB API implementation.\n    \n    Renames configuration option sql_dbpool_enable to dbapi_use_tpool\n    \n    NOTE: tpool will not work without a fix to eventlet for Threads + locking.\n    \n    DocImpact\n    \n    Change-Id: I6c75b6138d38d12261d133f2cb2f5e59c667f837\n", 
            "date_created": "2013-02-21 06:13:01.415338+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ], 
    "closed": "2013-02-21 08:57:15.601792+00:00"
}
{
    "status": "Fix Released", 
    "last_updated": "2014-04-17 08:48:22.098708+00:00", 
    "description": "In some situations when an instance has \"no network information\" (a phrase that I'm using loosely), deleting the instance results in infinite recursion. The stack looks like this:\n\n2013-11-15 18:50:28.995 DEBUG nova.network.neutronv2.api [req-28f48294-0877-4f09-bcc1-7595dbd4c15a demo demo]   File \"/usr/lib/python2.7/dist-packages/eventlet/greenpool.py\", line 80, in _spawn_n_impl\n    func(*args, **kwargs)\n  File \"/opt/stack/nova/nova/openstack/common/rpc/amqp.py\", line 461, in _process_data\n    **args)\n  File \"/opt/stack/nova/nova/openstack/common/rpc/dispatcher.py\", line 172, in dispatch\n    result = getattr(proxyobj, method)(ctxt, **kwargs)\n  File \"/opt/stack/nova/nova/compute/manager.py\", line 354, in decorated_function\n    return function(self, context, *args, **kwargs)\n  File \"/opt/stack/nova/nova/exception.py\", line 73, in wrapped\n    return f(self, context, *args, **kw)\n  File \"/opt/stack/nova/nova/compute/manager.py\", line 230, in decorated_function\n    return function(self, context, *args, **kwargs)\n  File \"/opt/stack/nova/nova/compute/manager.py\", line 295, in decorated_function\n    function(self, context, *args, **kwargs)\n  File \"/opt/stack/nova/nova/compute/manager.py\", line 259, in decorated_function\n    return function(self, context, *args, **kwargs)\n  File \"/opt/stack/nova/nova/compute/manager.py\", line 1984, in terminate_instance\n    do_terminate_instance(instance, bdms)\n  File \"/opt/stack/nova/nova/openstack/common/lockutils.py\", line 248, in inner\n    return f(*args, **kwargs)\n  File \"/opt/stack/nova/nova/compute/manager.py\", line 1976, in do_terminate_instance\n    reservations=reservations)\n  File \"/opt/stack/nova/nova/hooks.py\", line 105, in inner\n    rv = f(*args, **kwargs)\n  File \"/opt/stack/nova/nova/compute/manager.py\", line 1919, in _delete_instance\n    self._shutdown_instance(context, db_inst, bdms)\n  File \"/opt/stack/nova/nova/compute/manager.py\", line 1829, in _shutdown_instance\n    network_info = self._get_instance_nw_info(context, instance)\n  File \"/opt/stack/nova/nova/compute/manager.py\", line 868, in _get_instance_nw_info\n    instance)\n  File \"/opt/stack/nova/nova/network/neutronv2/api.py\", line 449, in get_instance_nw_info\n    result = self._get_instance_nw_info(context, instance, networks)\n  File \"/opt/stack/nova/nova/network/api.py\", line 64, in wrapper\n    nw_info=res)\n\nRECURSION STARTS HERE\n\n  File \"/opt/stack/nova/nova/network/api.py\", line 77, in update_instance_cache_with_nw_info\n    nw_info = api._get_instance_nw_info(context, instance)\n  File \"/opt/stack/nova/nova/network/api.py\", line 64, in wrapper\n    nw_info=res)\n\n... REPEATS AD NAUSEUM ...\n\n  File \"/opt/stack/nova/nova/network/api.py\", line 77, in update_instance_cache_with_nw_info\n    nw_info = api._get_instance_nw_info(context, instance)\n  File \"/opt/stack/nova/nova/network/api.py\", line 64, in wrapper\n    nw_info=res)\n  File \"/opt/stack/nova/nova/network/api.py\", line 77, in update_instance_cache_with_nw_info\n    nw_info = api._get_instance_nw_info(context, instance)\n  File \"/opt/stack/nova/nova/network/api.py\", line 49, in wrapper\n    res = f(self, context, *args, **kwargs)\n  File \"/opt/stack/nova/nova/network/neutronv2/api.py\", line 459, in _get_instance_nw_info\n    LOG.debug('%s', ''.join(traceback.format_stack()))\n\nHere's a step-by-step explanation of how the infinite recursion arises:\n\n1. somebody calls nova.network.neutronv2.api.API.get_instance_nw_info\n\n2. in the above call, the network info is successfully retrieved as result = self._get_instance_nw_info(context, instance, networks)\n\n3. however, since the instance has \"no network information\", result is the empty list (i.e., [])\n\n4. the result is put in the cache by calling nova.network.api.update_instance_cache_with_nw_info\n\n5. update_instance_cache_with_nw_info is supposed to add the result to the cache, but due to a bug in update_instance_cache_with_nw_info, it recursively calls api.get_instance_nw_info, which brings us back to step 1. The bug is the check before the recursive call:\n\n    if not nw_info:\n        nw_info = api._get_instance_nw_info(context, instance)\n\nwhich erroneously equates [] and None. Hence the check should be \"if nw_info is None:\"\n\nI should clarify that the instance _did_ have network information at some point (i.e., I booted it normally with a NIC), however, some time after I issued a \"nova delete\" request, the network information was gone (i.e., in nova list, the networks column was empty for the instance while it was in the deleting task state).\n\nI came across this problem when doing performance testing with the latest openstack code (i.e., the master branches as of this morning of all of the github.com/openstack/* projects).\n\nThere's an outstanding max recursion issue (https://bugs.launchpad.net/nova/+bug/1251778) that could very well be caused by this bug in update_instance_cache_with_nw_info. Note that in the bug report you don't see repeated calls to update_instance_cache_with_nw_info because LOG.exception only shows the stack trace from the try: frame to the exceptional frame, whereas I used traceback.format_stack() which prints everything.\n\nAlthough The fix is simple enough,  I'm not going to fire off a review immediately because I haven't put much thought in how to test it.", 
    "tags": [
        "api", 
        "network"
    ], 
    "importance": "High", 
    "heat": 16, 
    "link": "https://bugs.launchpad.net/nova/+bug/1251792", 
    "owner": "https://api.launchpad.net/1.0/~pete5", 
    "id": 1251792, 
    "index": 1315, 
    "openned": "2013-11-16 00:35:18.158516+00:00", 
    "created": "2013-11-16 00:35:18.158516+00:00", 
    "title": "infinite recursion when deleting an instance with no network interfaces", 
    "comments": [
        {
            "content": "In some situations when an instance has \"no network information\" (a phrase that I'm using loosely), deleting the instance results in infinite recursion. The stack looks like this:\n\n2013-11-15 18:50:28.995 DEBUG nova.network.neutronv2.api [req-28f48294-0877-4f09-bcc1-7595dbd4c15a demo demo]   File \"/usr/lib/python2.7/dist-packages/eventlet/greenpool.py\", line 80, in _spawn_n_impl\n    func(*args, **kwargs)\n  File \"/opt/stack/nova/nova/openstack/common/rpc/amqp.py\", line 461, in _process_data\n    **args)\n  File \"/opt/stack/nova/nova/openstack/common/rpc/dispatcher.py\", line 172, in dispatch\n    result = getattr(proxyobj, method)(ctxt, **kwargs)\n  File \"/opt/stack/nova/nova/compute/manager.py\", line 354, in decorated_function\n    return function(self, context, *args, **kwargs)\n  File \"/opt/stack/nova/nova/exception.py\", line 73, in wrapped\n    return f(self, context, *args, **kw)\n  File \"/opt/stack/nova/nova/compute/manager.py\", line 230, in decorated_function\n    return function(self, context, *args, **kwargs)\n  File \"/opt/stack/nova/nova/compute/manager.py\", line 295, in decorated_function\n    function(self, context, *args, **kwargs)\n  File \"/opt/stack/nova/nova/compute/manager.py\", line 259, in decorated_function\n    return function(self, context, *args, **kwargs)\n  File \"/opt/stack/nova/nova/compute/manager.py\", line 1984, in terminate_instance\n    do_terminate_instance(instance, bdms)\n  File \"/opt/stack/nova/nova/openstack/common/lockutils.py\", line 248, in inner\n    return f(*args, **kwargs)\n  File \"/opt/stack/nova/nova/compute/manager.py\", line 1976, in do_terminate_instance\n    reservations=reservations)\n  File \"/opt/stack/nova/nova/hooks.py\", line 105, in inner\n    rv = f(*args, **kwargs)\n  File \"/opt/stack/nova/nova/compute/manager.py\", line 1919, in _delete_instance\n    self._shutdown_instance(context, db_inst, bdms)\n  File \"/opt/stack/nova/nova/compute/manager.py\", line 1829, in _shutdown_instance\n    network_info = self._get_instance_nw_info(context, instance)\n  File \"/opt/stack/nova/nova/compute/manager.py\", line 868, in _get_instance_nw_info\n    instance)\n  File \"/opt/stack/nova/nova/network/neutronv2/api.py\", line 449, in get_instance_nw_info\n    result = self._get_instance_nw_info(context, instance, networks)\n  File \"/opt/stack/nova/nova/network/api.py\", line 64, in wrapper\n    nw_info=res)\n\nRECURSION STARTS HERE\n\n  File \"/opt/stack/nova/nova/network/api.py\", line 77, in update_instance_cache_with_nw_info\n    nw_info = api._get_instance_nw_info(context, instance)\n  File \"/opt/stack/nova/nova/network/api.py\", line 64, in wrapper\n    nw_info=res)\n\n... REPEATS AD NAUSEUM ...\n\n  File \"/opt/stack/nova/nova/network/api.py\", line 77, in update_instance_cache_with_nw_info\n    nw_info = api._get_instance_nw_info(context, instance)\n  File \"/opt/stack/nova/nova/network/api.py\", line 64, in wrapper\n    nw_info=res)\n  File \"/opt/stack/nova/nova/network/api.py\", line 77, in update_instance_cache_with_nw_info\n    nw_info = api._get_instance_nw_info(context, instance)\n  File \"/opt/stack/nova/nova/network/api.py\", line 49, in wrapper\n    res = f(self, context, *args, **kwargs)\n  File \"/opt/stack/nova/nova/network/neutronv2/api.py\", line 459, in _get_instance_nw_info\n    LOG.debug('%s', ''.join(traceback.format_stack()))\n\nHere's a step-by-step explanation of how the infinite recursion arises:\n\n1. somebody calls nova.network.neutronv2.api.API.get_instance_nw_info\n\n2. in the above call, the network info is successfully retrieved as result = self._get_instance_nw_info(context, instance, networks)\n\n3. however, since the instance has \"no network information\", result is the empty list (i.e., [])\n\n4. the result is put in the cache by calling nova.network.api.update_instance_cache_with_nw_info\n\n5. update_instance_cache_with_nw_info is supposed to add the result to the cache, but due to a bug in update_instance_cache_with_nw_info, it recursively calls api.get_instance_nw_info, which brings us back to step 1. The bug is the check before the recursive call:\n\n    if not nw_info:\n        nw_info = api._get_instance_nw_info(context, instance)\n\nwhich erroneously equates [] and None. Hence the check should be \"if nw_info is None:\"\n\nI should clarify that the instance _did_ have network information at some point (i.e., I booted it normally with a NIC), however, some time after I issued a \"nova delete\" request, the network information was gone (i.e., in nova list, the networks column was empty for the instance while it was in the deleting task state).\n\nI came across this problem when doing performance testing with the latest openstack code (i.e., the master branches as of this morning of all of the github.com/openstack/* projects).\n\nThere's an outstanding max recursion issue (https://bugs.launchpad.net/nova/+bug/1251778) that could very well be caused by this bug in update_instance_cache_with_nw_info. Note that in the bug report you don't see repeated calls to update_instance_cache_with_nw_info because LOG.exception only shows the stack trace from the try: frame to the exceptional frame, whereas I used traceback.format_stack() which prints everything.\n\nAlthough The fix is simple enough,  I'm not going to fire off a review immediately because I haven't put much thought in how to test it.", 
            "date_created": "2013-11-16 00:35:18.158516+00:00", 
            "author": "https://api.launchpad.net/1.0/~pete5"
        }, 
        {
            "content": "Peter, thanks for the analysis.  This seems nasty enough that I don't know there would be a ton of nit picking over unit tests.  Seems like the [] vs None could just be used in existing tests to verify the fix.", 
            "date_created": "2013-11-17 02:40:35.928669+00:00", 
            "author": "https://api.launchpad.net/1.0/~mriedem"
        }, 
        {
            "content": "Actually this looks related: https://review.openstack.org/#/c/56504/\n\nThat merged this morning, do you know if you have that patch in your setup when testing?  If so and there are still issues, your bug is still valid.", 
            "date_created": "2013-11-17 02:52:27.348392+00:00", 
            "author": "https://api.launchpad.net/1.0/~mriedem"
        }, 
        {
            "content": "Matt, I didn't have that change in my tree. However, it wouldn't have  made a difference since the patch doesn't actually eliminate the recursion. There were two calls to update_instance_cache_with_nw_info: the one in get_instance_nw_info that the patch removed and the one at the end of the @refresh_cache wrapper on _get_instance_nw_info.\n\nI'll submit a patch shortly to deal with nw_info=[].", 
            "date_created": "2013-11-18 16:36:41.064733+00:00", 
            "author": "https://api.launchpad.net/1.0/~pete5"
        }, 
        {
            "content": "It turns out that the unit tests are pretty broken WRT the instance info cache. \n\n_StringException: Traceback (most recent call last):\n  File \"/opt/stack/nova/nova/tests/network/test_neutronv2.py\", line 477, in test_get_instance_nw_info_1\n    self._get_instance_nw_info(1)\n  File \"/opt/stack/nova/nova/tests/network/test_neutronv2.py\", line 457, in _get_instance_nw_info\n    nw_inf = api.get_instance_nw_info(self.context, self.instance)\n  File \"/opt/stack/nova/nova/network/neutronv2/api.py\", line 451, in get_instance_nw_info\n    update_cells=False)\n  File \"/opt/stack/nova/nova/network/api.py\", line 84, in update_instance_cache_with_nw_info\n    ic.save(update_cells=update_cells)\n  File \"/opt/stack/nova/nova/objects/base.py\", line 152, in wrapper\n    return fn(self, ctxt, *args, **kwargs)\n  File \"/opt/stack/nova/nova/objects/instance_info_cache.py\", line 91, in save\n    {'network_info': nw_info_json})\n  File \"/usr/lib/python2.7/dist-packages/mox.py\", line 765, in __call__\n    return mock_method(*params, **named_params)\n  File \"/usr/lib/python2.7/dist-packages/mox.py\", line 985, in __call__\n    expected_method = self._VerifyMethodCall()\n  File \"/usr/lib/python2.7/dist-packages/mox.py\", line 1032, in _VerifyMethodCall\n    expected = self._PopNextMethod()\n  File \"/usr/lib/python2.7/dist-packages/mox.py\", line 1018, in _PopNextMethod\n    raise UnexpectedMethodCallError(self, None)\nUnexpectedMethodCallError: Unexpected method call instance_info_cache_update.__call__(<nova.context.RequestContext object at 0x4d0b890>, 'e5591e4d-7f02-4c7f-839c-51e001f12e2d', {'network_info': '[{\"ovs_interfaceid\": null, \"network\": {\"bridge\": null, \"subnets\": [{\"ips\": [{\"meta\": {}, \"version\": 4, \"type\": \"fixed\", \"floating_ips\": [{\"meta\": {}, \"version\": 4, \"type\": \"floating\", \"address\": \"172.0.1.2\"}], \"address\": \"10.0.1.2\"}], \"version\": 4, \"meta\": {}, \"dns\": [{\"meta\": {}, \"version\": 4, \"type\": \"dns\", \"address\": \"8.8.1.1\"}, {\"meta\": {}, \"version\": 4, \"type\": \"dns\", \"address\": \"8.8.1.2\"}], \"routes\": [], \"cidr\": \"10.0.1.0/24\", \"gateway\": {\"meta\": {}, \"version\": 4, \"type\": \"gateway\", \"address\": \"10.0.1.1\"}}], \"meta\": {\"injected\": false, \"tenant_id\": \"my_tenantid\"}, \"id\": \"my_netid1\", \"label\": \"my_netname1\"}, \"devname\": \"tapmy_portid1\", \"qbh_params\": null, \"meta\": {}, \"address\": \"my_mac1\", \"type\": null, \"id\": \"my_portid1\", \"qbg_params\": null}]'}) -> None\n\nThe exception is being suppressed by the except Exception: block in nova.network.api.update_instance_cache_with_nw_info.", 
            "date_created": "2013-11-18 17:23:58.648365+00:00", 
            "author": "https://api.launchpad.net/1.0/~pete5"
        }, 
        {
            "content": "Armondo's patch gets rid of that suppressed exception in every test _except_ for TestNeutronv2.test_deallocate_port_for_instance_1, which illustrates the infinite recursion when nw_info is []:\n\nFAILURES \nTestNeutronv2.test_deallocate_port_for_instance_1 \n\n_StringException: Traceback (most recent call last):\n  File \"/opt/stack/nova/nova/tests/network/test_neutronv2.py\", line 938, in test_deallocate_port_for_instance_1\n    self._test_deallocate_port_for_instance(1)\n  File \"/opt/stack/nova/nova/tests/network/test_neutronv2.py\", line 931, in _test_deallocate_port_for_instance\n    port_data[0]['id'])\n  File \"/opt/stack/nova/nova/network/neutronv2/api.py\", line 435, in deallocate_port_for_instance\n    return self._get_instance_nw_info(context, instance)\n  File \"/opt/stack/nova/nova/network/api.py\", line 64, in wrapper\n    nw_info=res)\n  File \"/opt/stack/nova/nova/network/api.py\", line 78, in update_instance_cache_with_nw_info\n    nw_info = api._get_instance_nw_info(context, instance)\n  File \"/opt/stack/nova/nova/network/api.py\", line 49, in wrapper\n    res = f(self, context, *args, **kwargs)\n  File \"/opt/stack/nova/nova/network/neutronv2/api.py\", line 460, in _get_instance_nw_info\n    nw_info = self._build_network_info_model(context, instance, networks)\n  File \"/opt/stack/nova/nova/network/neutronv2/api.py\", line 981, in _build_network_info_model\n    client = neutronv2.get_client(context, admin=True)\n  File \"/usr/lib/python2.7/dist-packages/mox.py\", line 765, in __call__\n    return mock_method(*params, **named_params)\n  File \"/usr/lib/python2.7/dist-packages/mox.py\", line 985, in __call__\n    expected_method = self._VerifyMethodCall()\n  File \"/usr/lib/python2.7/dist-packages/mox.py\", line 1037, in _VerifyMethodCall\n    expected, method = expected.MethodCalled(self)\n  File \"/usr/lib/python2.7/dist-packages/mox.py\", line 1812, in MethodCalled\n    next_method = mock_method._PopNextMethod();\n  File \"/usr/lib/python2.7/dist-packages/mox.py\", line 1018, in _PopNextMethod\n    raise UnexpectedMethodCallError(self, None)\nUnexpectedMethodCallError: Unexpected method call get_client.__call__(<nova.context.RequestContext object at 0x5da3d90>, admin=True) -> None\n", 
            "date_created": "2013-11-18 17:32:33.144184+00:00", 
            "author": "https://api.launchpad.net/1.0/~pete5"
        }, 
        {
            "content": "Fixed the main problem in https://review.openstack.org/#/c/57042/.\n\nI didn't fix the overly permissive except clause, so errors in those tests could creep back in. A kludge is to conditionally re-raise the exception in update_instance_cache_with_nw_info if we're running a unit test.\n\nNote that self.mox.verifyAll doesn't report the mox UnexpectedMethodCallError that the except clause absorbed. This unfortunate behaviour in mox has been documented (https://code.google.com/p/pymox/issues/detail?id=16) and fixed a long time ago (https://code.google.com/p/pymox/source/detail?r=72) but there hasn't been a release of mox since 2010. So there are probably other bugs like this lurking in these tests.", 
            "date_created": "2013-11-18 21:43:33.839735+00:00", 
            "author": "https://api.launchpad.net/1.0/~pete5"
        }, 
        {
            "content": "This looks related: https://review.openstack.org/#/c/57069/", 
            "date_created": "2013-11-19 02:35:02.973414+00:00", 
            "author": "https://api.launchpad.net/1.0/~mriedem"
        }, 
        {
            "content": "The patch you mentioned below was a partial attempt to address this very issue I saw in the context of bug 1235435 \n\nI still believe the root cause is (as Peter pointed out) the fact that for some reason the cache is empty, I am just hoping that once the infinite loop gets addressed the actual errors manifests itself.", 
            "date_created": "2013-11-19 03:51:42.434978+00:00", 
            "author": "https://api.launchpad.net/1.0/~armando-migliaccio"
        }, 
        {
            "content": "Regarding the root cause, there's a simple way that nw_info=[] could arise. Suppose a request is made to delete the instance. Let's call this request req-A. If req-A raises an exception after nova.compute.manager.Manager._shutdown_instance has called self._try_deallocate_network, then the instance will still exist and subsequent queries for the instance's nw_info will return [].  Another such query would arise from another request req-B that is issued to delete the instance again.", 
            "date_created": "2013-11-19 15:16:12.868404+00:00", 
            "author": "https://api.launchpad.net/1.0/~pete5"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/57069\nCommitted: http://github.com/openstack/nova/commit/2e520496c369a8ef646820ec068cc4416ab50eca\nSubmitter: Jenkins\nBranch:    master\n\ncommit 2e520496c369a8ef646820ec068cc4416ab50eca\nAuthor: armando-migliaccio <email address hidden>\nDate:   Mon Nov 18 16:10:48 2013 -0800\n\n    Address infinite loop in nova compute when getting network info\n    \n    Move the refresh_cache decorator to get_instance_nw_info.\n    In fact, _get_instance_nw_info is called by the decorator\n    itself, potentially causing an infinite loop in case nw_info\n    is not of the expected value. This is also inline with\n    the method's purpose, as stated by the docstring. At the\n    same time, ensure that delete_port_for_instance and\n    allocate_for_instance continue to refresh the cache by\n    using the decorated version.\n    \n    Also, add a couple of debug traces that are friendly to\n    the developer.\n    \n    Partial-bug: 1235435\n    Related-bug: 1251792\n    \n    Change-Id: I06f8634ea241d05ac8fbcc290adf0cb23829f3e4\n", 
            "date_created": "2013-11-26 08:04:00.958517+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Related fix proposed to branch: stable/havana\nReview: https://review.openstack.org/58471", 
            "date_created": "2013-11-26 09:38:54.126124+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/58471\nCommitted: http://github.com/openstack/nova/commit/ef9aec1cb6ec0d5fae699f9bb1f0d042530de5de\nSubmitter: Jenkins\nBranch:    stable/havana\n\ncommit ef9aec1cb6ec0d5fae699f9bb1f0d042530de5de\nAuthor: armando-migliaccio <email address hidden>\nDate:   Mon Nov 18 16:10:48 2013 -0800\n\n    Address infinite loop in nova compute when getting network info\n    \n    Move the refresh_cache decorator to get_instance_nw_info.\n    In fact, _get_instance_nw_info is called by the decorator\n    itself, potentially causing an infinite loop in case nw_info\n    is not of the expected value. This is also inline with\n    the method's purpose, as stated by the docstring. At the\n    same time, ensure that delete_port_for_instance and\n    allocate_for_instance continue to refresh the cache by\n    using the decorated version.\n    \n    Also, add a couple of debug traces that are friendly to\n    the developer.\n    \n    Partial-bug: 1235435\n    Related-bug: 1251792\n    \n    Change-Id: I06f8634ea241d05ac8fbcc290adf0cb23829f3e4\n    (cherry picked from commit 2e520496c369a8ef646820ec068cc4416ab50eca)\n", 
            "date_created": "2013-11-26 20:41:50.302682+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "stable/havana was mistakenly marked as released while merged patch 58471 only had Related-bug: 1251792\nhttps://review.openstack.org/57042 needs to be backported to fix it in Havana.", 
            "date_created": "2014-03-20 17:36:37.484999+00:00", 
            "author": "https://api.launchpad.net/1.0/~apevec"
        }, 
        {
            "content": "stable/havana backport https://review.openstack.org/82448", 
            "date_created": "2014-03-24 21:46:55.427686+00:00", 
            "author": "https://api.launchpad.net/1.0/~apevec"
        }
    ], 
    "closed": "2013-12-04 10:04:53.219113+00:00"
}
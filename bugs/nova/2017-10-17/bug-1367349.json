{
    "status": "Fix Released", 
    "last_updated": "2015-04-30 09:12:33.529550+00:00", 
    "description": "Ironic API supports pagination and limit the number of items returned by the API based on a config option called ''max_limit\", by default a max of 1000 items is returned per request [1].\n\nThe Ironic client library by default respect that limit, so when the Nova Ironic driver list the nodes for reasons like verifying how many resources  we have available etc... We can hit that limit and the wrong information will be passed to nova.\n\nLuckly, the ironic client supports passing a limit=0 flag when listing resources as an indicator to the lib to continue pagination until there're no more resources to be returned [2]. We need to update the calls in the Nova Ironic driver to make sure we get all items from the API when needed.\n\n [1] https://github.com/openstack/ironic/blob/master/ironic/api/__init__.py#L26-L29\n [2] https://github.com/openstack/python-ironicclient/blob/master/ironicclient/v1/node.py#L52", 
    "tags": [
        "ironic"
    ], 
    "importance": "Medium", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1367349", 
    "owner": "https://api.launchpad.net/1.0/~lucasagomes", 
    "id": 1367349, 
    "index": 4023, 
    "openned": "2014-09-09 15:58:23.660745+00:00", 
    "created": "2014-09-09 15:58:23.660745+00:00", 
    "title": "ironic: Not listing all nodes registered in Ironic due pagination", 
    "comments": [
        {
            "content": "Ironic API supports pagination and limit the number of items returned by the API based on a config option called ''max_limit\", by default a max of 1000 items is returned per request [1].\n\nThe Ironic client library by default respect that limit, so when the Nova Ironic driver list the nodes for reasons like verifying how many resources  we have available etc... We can hit that limit and the wrong information will be passed to nova.\n\nLuckly, the ironic client supports passing a limit=0 flag when listing resources as an indicator to the lib to continue pagination until there're no more resources to be returned [2]. We need to update the calls in the Nova Ironic driver to make sure we get all items from the API when needed.\n\n [1] https://github.com/openstack/ironic/blob/master/ironic/api/__init__.py#L26-L29\n [2] https://github.com/openstack/python-ironicclient/blob/master/ironicclient/v1/node.py#L52", 
            "date_created": "2014-09-09 15:58:23.660745+00:00", 
            "author": "https://api.launchpad.net/1.0/~lucasagomes"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/120149", 
            "date_created": "2014-09-09 16:52:36.259395+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/120149\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=c9ac5891b71eb8e00a290aecce97843e3dcc5ef6\nSubmitter: Jenkins\nBranch:    master\n\ncommit c9ac5891b71eb8e00a290aecce97843e3dcc5ef6\nAuthor: Lucas Alvares Gomes <email address hidden>\nDate:   Tue Sep 9 17:38:38 2014 +0100\n\n    Ironic: Continue pagination when listing nodes\n    \n    Ironic API supports pagination and limit the number of items returned\n    by the API based on a config option, by default a max of 1000 items is\n    returned per request. The Ironic client library by default respect that\n    limit, so when the Nova Ironic driver list the nodes it might hit that\n    limit and the wrong information will be passed to nova.\n    \n    This patch fix the problem by passing a \"limit=0\" flag to the client\n    library to tell it to continue pagination until there're no more nodes\n    ot be returned.\n    \n    Change-Id: I63795e2b4de828fa41e97812e99a714f04d2f580\n    Closes-Bug: #1367349\n", 
            "date_created": "2014-10-28 14:59:34.353730+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ], 
    "closed": "2014-12-18 20:02:00.955142+00:00"
}
{
    "status": "Fix Released", 
    "last_updated": "2015-10-15 08:54:49.565244+00:00", 
    "description": "Consider a flavour with 4 vcpus, and image property   hw:cpu_threads==2. Now the NUMA topology may prefer a thread count of 4, but best of the thread preference set, the guest will end up with 2 sockets, 1 core and 2 threads.\n\nNow consider a flavour with 4 vcpus, and image property   hw:cpu_max_threads==2. Now the NUMA topology may prefer a thread count of 4, but best of the thread limit is set, so the guest should again end up with 2 sockets, 1 core and 2 threads.\n\nThe current code in nova.virt.hardware._get_possible_cpu_topologies()  is not honouring the cpu_max_threads setting in this scenario though, so the guest ends up with 1 socket, 1 core and 4 threads. This violates the cpu_max_threads setting.\n\n\nMeanwhile if the vCPU count is 6 and the NUMA topology prefers a thread count of 4, then the code is actually incapable of coming up with a valid topology because it only considers topologies with an exact thread count of 4 and 4 does not divide into 6. \n\nnova.exception.ImageVCPULimitsRangeImpossible: Requested vCPU limits 6:6:6 are impossible to satisfy for vcpus count 6\n\nwhich is clearly a bogus error as you can easily satisfy that with 6:1:1, 1:6:1, 1:1:6, 2:1:3, 2:3:1, 3:2:1, 3:1:2, 1:2:3, 1:3:2, so it should have picked 2:1:3, as that has thread count closest matching the NUMA topology and the maximum socket count.", 
    "tags": [], 
    "importance": "High", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1471187", 
    "owner": "https://api.launchpad.net/1.0/~berrange", 
    "id": 1471187, 
    "index": 1773, 
    "openned": "2015-07-03 10:56:44.266772+00:00", 
    "created": "2015-07-03 10:56:44.266772+00:00", 
    "title": "CPU topology does not honour cpu_max_threads when NUMA topology is used", 
    "comments": [
        {
            "content": "Consider a flavour with 4 vcpus, and image property   hw:cpu_threads==2. Now the NUMA topology may prefer a thread count of 4, but best of the thread preference set, the guest will end up with 2 sockets, 1 core and 2 threads.\n\nNow consider a flavour with 4 vcpus, and image property   hw:cpu_max_threads==2. Now the NUMA topology may prefer a thread count of 4, but best of the thread limit is set, so the guest should again end up with 2 sockets, 1 core and 2 threads.\n\nThe current code in nova.virt.hardware._get_possible_cpu_topologies()  is not honouring the cpu_max_threads setting in this scenario though, so the guest ends up with 1 socket, 1 core and 4 threads. This violates the cpu_max_threads setting.\n\n\nMeanwhile if the vCPU count is 6 and the NUMA topology prefers a thread count of 4, then the code is actually incapable of coming up with a valid topology because it only considers topologies with an exact thread count of 4 and 4 does not divide into 6. \n\nnova.exception.ImageVCPULimitsRangeImpossible: Requested vCPU limits 6:6:6 are impossible to satisfy for vcpus count 6\n\nwhich is clearly a bogus error as you can easily satisfy that with 6:1:1, 1:6:1, 1:1:6, 2:1:3, 2:3:1, 3:2:1, 3:1:2, 1:2:3, 1:3:2, so it should have picked 2:1:3, as that has thread count closest matching the NUMA topology and the maximum socket count.", 
            "date_created": "2015-07-03 10:56:44.266772+00:00", 
            "author": "https://api.launchpad.net/1.0/~berrange"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/198312\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=f396826314b9f37eb57151f0dd8a8e3b7d8a8a5c\nSubmitter: Jenkins\nBranch:    master\n\ncommit f396826314b9f37eb57151f0dd8a8e3b7d8a8a5c\nAuthor: Daniel P. Berrange <email address hidden>\nDate:   Fri Jul 3 11:29:03 2015 +0100\n\n    virt: fix picking CPU topologies based on desired NUMA topology\n    \n    The _get_possible_cpu_topologies() method is intended to return\n    a list of CPU topologies that honour the constraints set by the\n    cpu_max_sockets, cpu_max_cores & cpu_max_threads image/flavour\n    properties. In\n    \n      commit 770ab8eeb72b184ac6164aeabb89c4bf45f938a9\n      Author: Nikola Dipanov <email address hidden>\n      Date:   Mon Dec 8 14:45:48 2014 +0100\n    \n        Make get_best_cpu_topology consider NUMA requested CPU topology\n    \n    the code was changed so that the desired thread count from the\n    NUMA topology was passed in. Unfortunately the logic implemented\n    was flawed because it while the cpu_threads preferred threads\n    count was honour, it would not honour the cpu_max_threads\n    value.\n    \n    So if you have\n    \n      vcpus=4\n      hw_cpu_threads = 2\n      NUMA threads == 4\n    \n    It would return CPU topologies with 2 threads, but if you had\n    \n      vcpus=4\n      hw_cpu_max_threads = 2\n      NUMA threads == 4\n    \n    then it would return CPU topologies with 4 threads, which\n    violates the users request.\n    \n    If you had a vcpu count not a multiple of the NUMA threads\n    \n      vcpus=6\n      NUMA threads = 4\n    \n    then it would be incapable of determining any topology\n    as it only looked for exact matching threads and 4 does\n    not divide into 6.\n    \n    The _threads_requested_by_user() method has a typo in it\n    causing it to look for whether 'cpu_maxthreads' exists,\n    but correcting that to 'cpu_max_threads' does not do\n    anything to fix the actual behaviour, as the max threads\n    value is never acted upon.\n    \n    If we clamped the 'min_requested_threads' value calculated\n    in _get_desirable_cpu_topologies() to cpu_max_threads, the\n    code still doesn't work, as the max threads count may not\n    actually be a multiple of the vCPU count. We need to\n    consider which topologies have a threads count that is\n    closest to the desired NUMA threads, but not exceeding\n    the max threads count.\n    \n    To solve this properly we revert the changes to the\n    _get_possible_cpu_topologies() method, so that it only\n    ever considers the user provided max sockets/cores/threads\n    value from the image/flavour as it originally did.\n    \n    We then introduce a _filter_for_numa_threads() method\n    which filters the list of possible topologies, to those\n    which most closely match the desired number of threads\n    from the NUMA topology.\n    \n    Finally we do the sorting based on the preferred\n    topologies defined by the cpu_sockets/cores/threads\n    image/flavour properties\n    \n    Closes-bug: #1471187\n    Change-Id: I05f246401526170acb61370ee51355226366a4c9\n", 
            "date_created": "2015-07-20 12:24:58.821821+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ], 
    "closed": "2015-07-28 09:07:56.809111+00:00"
}
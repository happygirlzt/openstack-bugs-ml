{
    "status": "Opinion", 
    "last_updated": "2015-01-23 15:30:33.969433+00:00", 
    "description": "This line: https://github.com/openstack/nova/blob/master/nova/virt/hyperv/volumeutilsv2.py#L54 makes a raw SQL query using input from target_address and target_port.  If an attacker is able to manipulate either of these parameters, they can exploit a SQL injection vulnerability.  \n\nIf neither of these parameters can be controlled by an attacker, it's probably OK to fix this in public.  These should definitely at least be strengthened by using prepared statements, or even better, a secure SQL library such as sqlalchemy.", 
    "tags": [
        "hyperv", 
        "security"
    ], 
    "importance": "Wishlist", 
    "heat": 12, 
    "link": "https://bugs.launchpad.net/nova/+bug/1370295", 
    "owner": "https://api.launchpad.net/1.0/~sergey.vilgelm", 
    "id": 1370295, 
    "index": 2877, 
    "openned": "2014-09-17 00:51:21.318876+00:00", 
    "created": "2014-09-17 00:51:21.318876+00:00", 
    "title": "Possible SQL Injection vulnerability in hyperv volumeutils2", 
    "comments": [
        {
            "content": "This line: https://github.com/openstack/nova/blob/master/nova/virt/hyperv/volumeutilsv2.py#L54 makes a raw SQL query using input from target_address and target_port.  If an attacker is able to manipulate either of these parameters, they can exploit a SQL injection vulnerability.  \n\nIf neither of these parameters can be controlled by an attacker, it's probably OK to fix this in public.  These should definitely at least be strengthened by using prepared statements, or even better, a secure SQL library such as sqlalchemy.", 
            "date_created": "2014-09-17 00:51:21.318876+00:00", 
            "author": "https://api.launchpad.net/1.0/~travis-mcpeak"
        }, 
        {
            "content": "This isn't actually SQL, it's WQL against the windows registry. There may be an exposure still, but it will require a windows expert to figure that out, none of whom are in the security group as far as I know.", 
            "date_created": "2014-09-17 11:17:36.969463+00:00", 
            "author": "https://api.launchpad.net/1.0/~sdague"
        }, 
        {
            "content": "I've added the core security reviewers from the OSSG to broaden visibility on this slightly without marking it public yet, in case they have any ideas on how to confirm whether it's exploitable.\n\nSean, can/should we subscribe one or more of the HyperV subsystem developers to look into this?", 
            "date_created": "2014-09-17 16:24:47.155721+00:00", 
            "author": "https://api.launchpad.net/1.0/~fungi"
        }, 
        {
            "content": "The vulnerability is obvious enough, difficult for me to work out the exploitability though. In my opinion these issues should always be treated as exploitable as clever people always find a way to attack insulated issues often by chaining attacks etc.", 
            "date_created": "2014-09-17 16:28:04.386769+00:00", 
            "author": "https://api.launchpad.net/1.0/~robert-clark"
        }, 
        {
            "content": "+1 to what Rob said.  Policy should be to assume exploitability as it is often all too easy for someone to find a way, even if we can't see it.", 
            "date_created": "2014-09-17 20:57:52.507161+00:00", 
            "author": "https://api.launchpad.net/1.0/~bdpayne"
        }, 
        {
            "content": "Fair enough... but my concerns are not so much around how to keep this bug secret as how to get it fixed. Are you volunteering to fix it, or merely know someone who can?", 
            "date_created": "2014-09-17 21:09:33.890949+00:00", 
            "author": "https://api.launchpad.net/1.0/~fungi"
        }, 
        {
            "content": "I'd like to make sure WQL is injectable first... See Sean comment #1", 
            "date_created": "2014-09-19 13:55:12.564980+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "According to this: http://msdn.microsoft.com/en-us/library/aa394606(v=vs.85).aspx  WQL is a subset of SQL, so it should be similarly vulnerable.", 
            "date_created": "2014-09-19 14:04:50.432386+00:00", 
            "author": "https://api.launchpad.net/1.0/~travis-mcpeak"
        }, 
        {
            "content": "I don't see how WQL could not be vulnerable to injection here, as Python itself is simply creating the select statement as a single string.  For query modification, this means that WMI doesn't have any notion of what it would need to scan/sanitize for things like ' characters.\n\nI have read that WQL doesn't allow for multiple statements, so an attack by injecting a ; character to end the select and tacking on another statement may not be possible.  The source for this wasn't authoritative, and I haven't verified this myself though.  The fact is, this would still be open to modification of the select.\n\nIt seems like input validation/sanitization is needed here.  Since the values here are ip/host and a port, the input has some very specific rules that it must conform to.  It should not be too difficult to validate the input.\n\nOne othe rnote to add is that the query is confined to a namespace of '//%s/root/microsoft/windows/storage'.  This means that the query would not be able to break out of this namespace, which minimizes what this attach would be capable of.", 
            "date_created": "2014-09-19 14:41:00.603422+00:00", 
            "author": "https://api.launchpad.net/1.0/~nkinder"
        }, 
        {
            "content": "I agree with Nathan's comments except for the possibility of directory traversal in regards to the last statement.", 
            "date_created": "2014-09-19 14:55:42.600116+00:00", 
            "author": "https://api.launchpad.net/1.0/~travis-mcpeak"
        }, 
        {
            "content": "Scratch that, no directory traversal.", 
            "date_created": "2014-09-19 14:56:51.107770+00:00", 
            "author": "https://api.launchpad.net/1.0/~travis-mcpeak"
        }, 
        {
            "content": "I've added one of the top HyperV driver maintainers to this bug in hopes that they can help confirm/deny a vulnerability here.", 
            "date_created": "2014-09-19 15:16:41.084032+00:00", 
            "author": "https://api.launchpad.net/1.0/~alaski"
        }, 
        {
            "content": "The further hope is that Alessandro will also be able to test out any privately-proposed fixes once attached to this bug to ensure they don't break HyperV use cases, since we can't effectively test that upstream in OpenStack. Waiting instead to find out they're broken only once the advisory is sent and the fix published would be much too late in the process (one of the ways the embargo idea breaks down for these sorts of bug reports).", 
            "date_created": "2014-09-19 16:37:09.526686+00:00", 
            "author": "https://api.launchpad.net/1.0/~fungi"
        }, 
        {
            "content": "This come up periodically...\n\nthose are NOT SQL queries!!!\n\nThose are WQL queries and there's no such thing as a risk of injection in this context, as in WQL:\n\nThere's no DML => no INSERT, UPDATE, DELETE\nThere's no DDL => no DROP, CREATE, ALTER, etc\nThere's no -- comment, etc.\n\nSaid that, given the code logic, there's also no way to query for objects leading to disclosure of data in this context.\n\nIf you guys really want and since I'm really amused by the amount of people who file up this type of bugs without having the slightest idea about how Hyper-V APIs work, we can just pass all input through something like.\n\ndef sanitize_wql_param(str):\n    return replace('\\'', '\\'\\'')\n\nP.S.: Next time it'd be great if you could ping a domain expert first", 
            "date_created": "2014-09-19 17:26:09.431388+00:00", 
            "author": "https://api.launchpad.net/1.0/~alexpilotti"
        }, 
        {
            "content": "This adds some basic character class validation of the address/host and port inputs.  It doesn't look for well-formed IP addresses and hostnames, but that isn't necessary to protect agaisnt SQL/WQL injection attacks.", 
            "date_created": "2014-09-19 17:30:25.568273+00:00", 
            "author": "https://api.launchpad.net/1.0/~nkinder"
        }, 
        {
            "content": "As I noted above, this patch is uselss, I'd better go with a simple check on all input parameters for piece of mind, although unnecessary:\n\ndef sanitize_wql_str_param(s):\n     return str(s).replace('\\'', '\\'\\'')\n\nso the WQL query in this example would look like:\n\n        portal = self._conn_storage.query(\"SELECT * FROM \"\n                                          \"MSFT_iSCSITargetPortal \"\n                                          \"WHERE TargetPortalAddress='%s' \"\n                                          \"AND TargetPortalPortNumber='%s'\"\n                                          % (sanitize_wql_str_param(target_address),\n                                                sanitize_wql_str_param(target_port)))\n\n", 
            "date_created": "2014-09-19 17:35:51.626513+00:00", 
            "author": "https://api.launchpad.net/1.0/~alexpilotti"
        }, 
        {
            "content": "(sorry for the formatting!)", 
            "date_created": "2014-09-19 17:36:29.203792+00:00", 
            "author": "https://api.launchpad.net/1.0/~alexpilotti"
        }, 
        {
            "content": "Thanks for the details on WQL Alessandro.  Also, I think that you were reached out to quite early in this process since it was clear that a domain expert was needed to evaluate this.  There is very little information out there stating anything about WQL and injection attacks (even stating that it is not vulnerable to injection for the reasons you detailed).\n\nIf I understand your comment about data disclosure, there is a general possibility of injection that modifies the query (nothing more nefarious), but in this particular case there is no other information that could be disclosed?  Is this due to the particular namespace that is being used?", 
            "date_created": "2014-09-19 17:37:29.792101+00:00", 
            "author": "https://api.launchpad.net/1.0/~nkinder"
        }, 
        {
            "content": "Maybe a comment here to prevent future bugs from being filed might be helpful in that case.  No sense on sanitizing input if it really isn't necessary.", 
            "date_created": "2014-09-19 17:43:45.835965+00:00", 
            "author": "https://api.launchpad.net/1.0/~travis-mcpeak"
        }, 
        {
            "content": "Hi Nathan, \n\nThe obvious type of disclosure that could affect general WQL queries, considering the limitations of the language, is e.g.:\n\n$param=\"W3SVC\"\n$s = gwmi -query \"select * from Win32_service where name = '$param'\"\necho $s.Name\n\nPS C:\\> W3SVC\n\nwhile:\n\n$param=\"W3SVC' or name like '%\"\ngwmi -query \"select * from Win32_service where name = 'W3SVC' or name like '%'\necho $s.Name\n\nPS C:\\> ... list of all services on the system ...\n\n\nSaid that, who wrote and reviewed that code was careful in checking the driver's logic to see where the target_address and port parameters where coming from in order to exclude security risks.\n\nAs I wrote before, it can be a good idea to just sanitize all query parameters in every place where we use WQL queries, so that further security reviews won't generate worries like in this context, making it also a prereq for further driver code contributions. \n\nTo do so something like the aforementioned \"sanitize_wql_str_param\" function would do.\n", 
            "date_created": "2014-09-19 17:58:54.720766+00:00", 
            "author": "https://api.launchpad.net/1.0/~alexpilotti"
        }, 
        {
            "content": "Switched the bug to public and marked the security advisory task wontfix based on the above discussion.", 
            "date_created": "2014-09-19 19:22:12.623238+00:00", 
            "author": "https://api.launchpad.net/1.0/~fungi"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/131433", 
            "date_created": "2014-10-28 13:50:03.644981+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "The patch is stalled. And honestly WQL is not really exposed in a substantial way here.", 
            "date_created": "2014-12-10 22:28:59.687065+00:00", 
            "author": "https://api.launchpad.net/1.0/~sdague"
        }, 
        {
            "content": "Change abandoned by Sean Dague (<email address hidden>) on branch: master\nReview: https://review.openstack.org/131433\nReason: This review is > 4 weeks without comment, and failed Jenkins the last time it was checked. We are abandoning this for now. Feel free to reactivate the review by pressing the restore button and leaving a 'recheck' comment to get fresh test results.", 
            "date_created": "2015-01-23 15:30:32.796276+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ], 
    "closed": "2014-12-10 22:28:32.476254+00:00"
}
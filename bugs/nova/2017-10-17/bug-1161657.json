{
    "status": "Opinion", 
    "last_updated": "2014-09-18 23:14:46.421333+00:00", 
    "description": "As documented at https://review.openstack.org/#/c/25075/2/nova/compute/manager.py there are cases in the compute manager that cause the database, network, or instances themselves to be in a inconsistent (or wrong entirely) state. It would be useful to verify that when a plugin is called that there is a defined interface and known set of errors that said interface can throw, and how to rollback from all of those allowed set of errors. The top level manager code must correctly rollback state (as needed) so that the compute node is left in a pristine state when a underlying driver does not behave correctly (or just doesn't work).\n\nLets first attack one function, a critical path one, _run_instance(), and its direct _spawn(), _prep_block_device()\n\nCertain calls noted:\n\n- Deallocating networks/volumes (not always done) -> _setup_block_device_mapping is never rolledback...\n- Un-preparing a block device (on later failure)\n- A driver can affect the macs for an instance (self.driver.macs_for_instance) and since this is 3rd party driver code, if said driver 'locks' said macs (via whatever mechanism) then there is future macs not rolledback.", 
    "tags": [], 
    "importance": "Wishlist", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1161657", 
    "owner": "None", 
    "id": 1161657, 
    "index": 2605, 
    "openned": "2013-03-28 23:01:58.974636+00:00", 
    "created": "2013-03-28 23:01:58.974636+00:00", 
    "title": "nova.compute.manager.py needs better rollbacks", 
    "comments": [
        {
            "content": "As documented at https://review.openstack.org/#/c/25075/2/nova/compute/manager.py there are cases in the compute manager that cause the database, network, or instances themselves to be in a inconsistent (or wrong entirely) state. It would be useful to verify that when a plugin is called that there is a defined interface and known set of errors that said interface can throw, and how to rollback from all of those allowed set of errors. The top level manager code must correctly rollback state (as needed) so that the compute node is left in a pristine state when a underlying driver does not behave correctly (or just doesn't work).\n\nLets first attack on function, a critical path one, _run_instance(), and its direct _spawn(), _prep_block_device()\n\nCertain calls noted:\n\n- Deallocating networks/volumes (not always done) -> _setup_block_device_mapping is never rolledback...\n- Un-preparing a block device (on later failure)\n- A driver can affect the macs for an instance (self.driver.macs_for_instance) and since this is 3rd party driver code, if said driver 'locks' said macs (via whatever mechanism) then there is future macs not rolledback.", 
            "date_created": "2013-03-28 23:01:58.974636+00:00", 
            "author": "https://api.launchpad.net/1.0/~harlowja"
        }, 
        {
            "content": "I am hugely in favor of cleaning this up.  I also think we could do a better job of pre-emptively checking for certain things before starting any work in the manager/driver.", 
            "date_created": "2013-03-29 18:19:19.829581+00:00", 
            "author": "https://api.launchpad.net/1.0/~alaski"
        }, 
        {
            "content": "This isn't really a bug, this is really something which should come in via the specs process", 
            "date_created": "2014-09-18 23:14:45.327924+00:00", 
            "author": "https://api.launchpad.net/1.0/~sdague"
        }
    ], 
    "closed": "2014-09-18 23:14:21.948730+00:00"
}
{
    "status": "Fix Released", 
    "last_updated": "2014-04-17 08:46:09.473845+00:00", 
    "description": "In TripleO devtest story we are using Nova + Baremetal Driver + Neutron. The provisioned baremetal instance obtains its configuration from Metadata API. Currently all requests to Metadata API fail with error 500.\n\nIn nova-api log I can see the following traceback:\n\n2013-11-27 11:44:01,423.423 5895 ERROR nova.api.metadata.handler [req-0d22f3c7-663e-452e-bfa9-747b728fc13b None None] Failed to get metadata for ip: 192.0.2.2\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler Traceback (most recent call last):\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler   File \"/opt/stack/venvs/nova/local/lib/python2.7/site-packages/nova/api/metadata/handler.py\", line 136, in _handle_remote_ip_request\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler     meta_data = self.get_metadata_by_remote_address(remote_address)\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler   File \"/opt/stack/venvs/nova/local/lib/python2.7/site-packages/nova/api/metadata/handler.py\", line 78, in get_metadata_by_remote_address\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler     data = base.get_metadata_by_address(self.conductor_api, address)\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler   File \"/opt/stack/venvs/nova/local/lib/python2.7/site-packages/nova/api/metadata/base.py\", line 466, in get_metadata_by_address\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler     fixed_ip = network.API().get_fixed_ip_by_address(ctxt, address)\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler   File \"/opt/stack/venvs/nova/local/lib/python2.7/site-packages/nova/network/neutronv2/api.py\", line 680, in get_fixed_ip_by_address\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler     uuid_maps = self._get_instance_uuids_by_ip(context, address)\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler   File \"/opt/stack/venvs/nova/local/lib/python2.7/site-packages/nova/network/neutronv2/api.py\", line 582, in _get_instance_uuids_by_ip\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler     data = neutronv2.get_client(context).list_ports(**search_opts)\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler   File \"/opt/stack/venvs/nova/local/lib/python2.7/site-packages/nova/network/neutronv2/__init__.py\", line 69, in get_client\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler     raise exceptions.Unauthorized()\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler Unauthorized: Unauthorized: bad credentials\n\nAnalyzing this issue we found that Metadata API stopped working since change https://review.openstack.org/#/c/56174/4 was merged (it seems that change of line 57 in https://review.openstack.org/#/c/56174/4/nova/network/neutronv2/__init__.py is the reason).\n\nThe commit message looks pretty sane and that fix seems to be the right thing to do, because we don't want to do neutron requests on behalf of neutron service user we have in nova config, but rather on behalf of the admin user instead who made the original request to nova api. So it seems that context.is_admin should be extended to make it possible to distinguish between those two cases of admin users: the real admin users, and the cases when nova api needs to talk to neutron.\n\nThe problem is that all metadata queries are handled using default admin context (user and other vars are set to None while is_admin=True), so with https://review.openstack.org/#/c/56174/4 applied, get_client() always raises an exception when Metadata API requests are handled.", 
    "tags": [
        "in-stable-havana"
    ], 
    "importance": "Critical", 
    "heat": 20, 
    "link": "https://bugs.launchpad.net/nova/+bug/1255577", 
    "owner": "https://api.launchpad.net/1.0/~philip-day", 
    "id": 1255577, 
    "index": 161, 
    "openned": "2013-11-27 15:47:50.553616+00:00", 
    "created": "2013-11-27 15:47:50.553616+00:00", 
    "title": "Requests to Metadata API fail with 500 if Neutron network plugin  is used", 
    "comments": [
        {
            "content": "In TripleO devtest story we are using Nova + Baremetal Driver + Neutron. The provisioned baremetal instance obtains its configuration from Metadata API. Currently all requests to Metadata API fail with error 500.\n\nIn nova-api log I can see the following traceback:\n\n2013-11-27 11:44:01,423.423 5895 ERROR nova.api.metadata.handler [req-0d22f3c7-663e-452e-bfa9-747b728fc13b None None] Failed to get metadata for ip: 192.0.2.2\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler Traceback (most recent call last):\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler   File \"/opt/stack/venvs/nova/local/lib/python2.7/site-packages/nova/api/metadata/handler.py\", line 136, in _handle_remote_ip_request\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler     meta_data = self.get_metadata_by_remote_address(remote_address)\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler   File \"/opt/stack/venvs/nova/local/lib/python2.7/site-packages/nova/api/metadata/handler.py\", line 78, in get_metadata_by_remote_address\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler     data = base.get_metadata_by_address(self.conductor_api, address)\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler   File \"/opt/stack/venvs/nova/local/lib/python2.7/site-packages/nova/api/metadata/base.py\", line 466, in get_metadata_by_address\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler     fixed_ip = network.API().get_fixed_ip_by_address(ctxt, address)\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler   File \"/opt/stack/venvs/nova/local/lib/python2.7/site-packages/nova/network/neutronv2/api.py\", line 680, in get_fixed_ip_by_address\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler     uuid_maps = self._get_instance_uuids_by_ip(context, address)\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler   File \"/opt/stack/venvs/nova/local/lib/python2.7/site-packages/nova/network/neutronv2/api.py\", line 582, in _get_instance_uuids_by_ip\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler     data = neutronv2.get_client(context).list_ports(**search_opts)\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler   File \"/opt/stack/venvs/nova/local/lib/python2.7/site-packages/nova/network/neutronv2/__init__.py\", line 69, in get_client\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler     raise exceptions.Unauthorized()\n2013-11-27 11:44:01,423.423 5895 TRACE nova.api.metadata.handler Unauthorized: Unauthorized: bad credentials\n\nAnalyzing this issue we found that Metadata API stopped working since change https://review.openstack.org/#/c/56174/4 was merged (it seems that change of line 57 in https://review.openstack.org/#/c/56174/4/nova/network/neutronv2/__init__.py is the reason).\n\nThe commit message looks pretty sane and that fix seems to be the right thing to do, because we don't want to do neutron requests on behalf of neutron service user we have in nova config, but rather on behalf of the admin user instead who made the original request to nova api. So it seems that context.is_admin should be extended to make it possible to distinguish between those two cases of admin users: the real admin users, and the cases when nova api needs to talk to neutron.\n\nThe problem is that all metadata queries are handled using default admin context (user and other vars are set to None while is_admin=True), so with https://review.openstack.org/#/c/56174/4 applied, get_client() always raises an exception.", 
            "date_created": "2013-11-27 15:47:50.553616+00:00", 
            "author": "https://api.launchpad.net/1.0/~rpodolyaka"
        }, 
        {
            "content": "\nAlso note that the first occurance of this was a \nCI job that started at Nov 26 23:00:02 UTC \n\nThe Job the kicked off 2 hours previous was ok, its been failing ever sense", 
            "date_created": "2013-11-27 15:57:32.888428+00:00", 
            "author": "https://api.launchpad.net/1.0/~derekh"
        }, 
        {
            "content": "Short Story - Roman has a working patch.\n\nLong Story (discussion on IRC)\n\n[11:05] <dansmith> derekh: yeah, I know, not intending to blame you or anyone\n[11:05] <rpodolyaka> dims: so it's called from code that has no idea, if admin=True must be set\n[11:05] <dansmith> derekh: but it's clearly pretty fragile so I just think something more complicated must be going on and I think folks familiar with neutronapi should be taking a pretty deep look before we freak out this time\n[11:06] <dims> rpodolyaka, i see that the \"special\" admin context is created here - get_metadata_by_address\n[11:07] <dims> rpodolyaka, will you be able to try something (give me 10 mins)?\n[11:07] <rpodolyaka> dims: sure!\n[11:12] <rpodolyaka> dims: yeah, it's kind of special. What I want to say, is that PhilD's patch is all about making sure we pass admin=True to get_client() explicitly (and it's cool :) ), but e.g. the code of get_fixed_ip_by_address() have no idea about passing admin=True (and it seems, that it should not have, because it can be called to handle the request of a regular user too)\n[11:12] * garyk has quit (Quit: Leaving.)\n[11:12] <dansmith> yep\n[11:12] <dims> rpodolyaka, i know. try this - http://paste.openstack.org/show/54078/\n[11:13] <dims> rpodolyaka, i had mentioned this in the review for Phil's patch\n[11:13] * rpodolyaka is applying the patch and restarting nova\n[11:17] <rpodolyaka> dims: http://paste.openstack.org/show/54080/\n[11:17] <rpodolyaka> dims: looking at the patch itself now :)\n[11:18] <dansmith> change the context param,\n[11:18] <dims> rpodolyaka, heh :) yes please\n[11:18] <dansmith> so that it doesn't conflict with the context module\n[11:18] <dansmith> s/context/ctxt/ in that method\n[11:18] <dims> +1 to dansmith \n[11:20] <rpodolyaka> dims: dansmith: that was an easy one :)\n[11:20] <rpodolyaka> voila!\n[11:21] <dansmith> dims: can you explain why this fixes it?\n[11:21] <rpodolyaka> dims:  looks likes it works, thanks!\n[11:21] <dansmith> I don't have the context, but this seems sketchy to me\n[11:21] <rpodolyaka> it makes the admin context really special now, I think :)\n[11:21] <dims> rpodolyaka, nice\n[11:21] <dims> rpodolyaka, right\n[11:21] <rpodolyaka> not by is_admin=True\n[11:22] <dims> yep\n[11:22] <rpodolyaka> but making it a new type\n[11:22] <dansmith> heh, I can read :)\n[11:22] <dansmith> isinstance() and foo.is_admin==True is roughly equivalent\n[11:23] <dims> we have admin contexts we create by hand and there are contexts from users who are really admins\n[11:23] <dims> there only flag is is_admin for both cases\n[11:23] <dims> here we are adding another way to distinguish between the two\n[11:24] <dansmith> and that's a good thing why?\n[11:24] <dims> if it is an admin context created by hand, we use the neutron credentials in nova.conf \n[11:24] <dansmith> because this seems like a good way to be confused in a few months\n[11:24] <dims> dansmith, if you peek at phil's original patch you will see the issue\n[11:25] <rpodolyaka> not sure, if it's the best to do that, but must distinguish them somethow\n[11:25] <rpodolyaka> *we\n[11:26] <dansmith> is the problem that if the user is an admin we use his credentials instead of the neutron credentials when talking to nova?\n[11:26] <dansmith> er, talking to neutron\n[11:29] <dims> dansmith, we created a fake context marking it as is_admin and we were trying to use that to talk to neutron\n[11:30] * dansmith gives up\n[11:32] <rpodolyaka> dims: the thing that worries me is that how this passed the gate, aren't we testing the case when nova + neutron boot an instance which makes requests to Metadata API?\n[11:32] <dims> rpodolyaka, apparently not :(\n[11:33] <rpodolyaka> dims: I mean, this seems to kind of a 'core' feature of compute API", 
            "date_created": "2013-11-27 16:39:26.787081+00:00", 
            "author": "https://api.launchpad.net/1.0/~dims-v"
        }, 
        {
            "content": "Original Stack trace from Roman\n\n  /usr/local/lib/python2.7/dist-packages/eventlet/greenpool.py(80)_spawn_n_impl()\n-> func(*args, **kwargs)\n  /usr/local/lib/python2.7/dist-packages/eventlet/wsgi.py(594)process_request()\n-> proto.__init__(sock, address, self)\n  /usr/lib/python2.7/SocketServer.py(649)__init__()\n-> self.handle()\n  /usr/lib/python2.7/BaseHTTPServer.py(340)handle()\n-> self.handle_one_request()\n  /usr/local/lib/python2.7/dist-packages/eventlet/wsgi.py(285)handle_one_request()\n-> self.handle_one_response()\n  /usr/local/lib/python2.7/dist-packages/eventlet/wsgi.py(389)handle_one_response()\n-> result = self.application(self.environ, start_response)\n  /usr/lib/python2.7/dist-packages/paste/urlmap.py(203)__call__()\n-> return app(environ, start_response)\n  /usr/lib/python2.7/dist-packages/webob/dec.py(130)__call__()\n-> resp = self.call_func(req, *args, **self.kwargs)\n  /usr/lib/python2.7/dist-packages/webob/dec.py(195)call_func()\n-> return self.func(req, *args, **kwargs)\n  /opt/stack/venvs/nova/local/lib/python2.7/site-packages/nova/api/ec2/__init__.py(88)__call__()\n-> return req.get_response(self.application)\n  /usr/lib/python2.7/dist-packages/webob/request.py(1296)send()\n-> application, catch_exc_info=False)\n  /usr/lib/python2.7/dist-packages/webob/request.py(1260)call_application()\n-> app_iter = application(self.environ, start_response)\n  /usr/lib/python2.7/dist-packages/webob/dec.py(130)__call__()\n-> resp = self.call_func(req, *args, **self.kwargs)\n  /usr/lib/python2.7/dist-packages/webob/dec.py(195)call_func()\n-> return self.func(req, *args, **kwargs)\n  /opt/stack/venvs/nova/local/lib/python2.7/site-packages/nova/api/ec2/__init__.py(100)__call__()\n-> rv = req.get_response(self.application)\n  /usr/lib/python2.7/dist-packages/webob/request.py(1296)send()\n-> application, catch_exc_info=False)\n  /usr/lib/python2.7/dist-packages/webob/request.py(1260)call_application()\n-> app_iter = application(self.environ, start_response)\n  /usr/lib/python2.7/dist-packages/webob/dec.py(130)__call__()\n-> resp = self.call_func(req, *args, **self.kwargs)\n  /usr/lib/python2.7/dist-packages/webob/dec.py(195)call_func()\n-> return self.func(req, *args, **kwargs)\n  /opt/stack/venvs/nova/local/lib/python2.7/site-packages/nova/api/metadata/handler.py(115)__call__()\n-> meta_data = self._handle_remote_ip_request(req)\n  /opt/stack/venvs/nova/local/lib/python2.7/site-packages/nova/api/metadata/handler.py(136)_handle_remote_ip_request()\n-> meta_data = self.get_metadata_by_remote_address(remote_address)\n  /opt/stack/venvs/nova/local/lib/python2.7/site-packages/nova/api/metadata/handler.py(78)get_metadata_by_remote_address()\n-> data = base.get_metadata_by_address(self.conductor_api, address)\n  /opt/stack/venvs/nova/local/lib/python2.7/site-packages/nova/api/metadata/base.py(466)get_metadata_by_address()\n-> fixed_ip = network.API().get_fixed_ip_by_address(ctxt, address)\n  /opt/stack/venvs/nova/local/lib/python2.7/site-packages/nova/network/neutronv2/api.py(680)get_fixed_ip_by_address()\n-> uuid_maps = self._get_instance_uuids_by_ip(context, address)\n  /opt/stack/venvs/nova/local/lib/python2.7/site-packages/nova/network/neutronv2/api.py(582)_get_instance_uuids_by_ip()\n-> data = neutronv2.get_client(context).list_ports(**search_opts)\n> /opt/stack/venvs/nova/local/lib/python2.7/site-packages/nova/network/neutronv2/__init__.py(61)get_client()\n-> if admin:", 
            "date_created": "2013-11-27 19:23:48.619094+00:00", 
            "author": "https://api.launchpad.net/1.0/~dims-v"
        }, 
        {
            "content": "Applying the patch from https://review.openstack.org/#/c/58843 did solve this issue for me.\n\nThanks Dims!", 
            "date_created": "2013-11-27 19:55:59.168856+00:00", 
            "author": "https://api.launchpad.net/1.0/~kazer"
        }, 
        {
            "content": "Just to confirm that reverting https://review.openstack.org/56174 fixes the tripleo seed for me too\n\nSimply put, applying this change:\n\n -    if admin or context.is_admin:\n +   if admin: # or context.is_admin:\n\nand restarting the nova-api service, is enough to make a simple EC2 metadata GET start working again:\n\n    $> curl http://169.254.169.254/latest/meta-data/instance-id\n\nWithout that change, the GET fails with the nova-api traceback above", 
            "date_created": "2013-11-28 17:00:17.078813+00:00", 
            "author": "https://api.launchpad.net/1.0/~markmc"
        }, 
        {
            "content": "Bah, got that reversed - this is the change that fixes it for me:\n\n +    if admin:\n -    if admin or context.is_admin:\n", 
            "date_created": "2013-11-28 17:02:23.986425+00:00", 
            "author": "https://api.launchpad.net/1.0/~markmc"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/59243", 
            "date_created": "2013-11-29 23:39:08.719876+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/59243\nCommitted: http://github.com/openstack/nova/commit/652620d12f3afe6845e41d9762b52d23f44fd557\nSubmitter: Jenkins\nBranch:    master\n\ncommit 652620d12f3afe6845e41d9762b52d23f44fd557\nAuthor: Phil Day <email address hidden>\nDate:   Fri Nov 29 23:24:51 2013 +0000\n\n    Fix Neutron Authentication for Metadata Service\n    \n    A recent change to the way Nova creates a Neutron client\n    51e5f52e4cb60e266ccde71f205c91eb8c97b48b changed the conditions\n    under which it re-authenticates using the neutron admin credentials\n    from \"if admin\" to \"if admin or context.is_admin\".  However this\n    meant that any user with admin role in Nova interacted with Neutron\n    as a different tenant, preventing them from non-admin actions such\n    as allocating floating IPS.\n    \n    This was then addressed by 1c1371c78b990447aeaa4377b512f8887e6ff3ce\n    which only reauthenticated as admin on the explicit use of\n    \"admin=True\" parameter to neutonv2.get_client().\n    \n    However the metadata service does not explicitly create the neutron\n    client so it has to pass in a context created by\n    context.get_admin_context() which has is_admin=True but no auth_token.\n    \n    This change therefore accepts this combination of context values\n    as a valid reason to re-authenticate as admin, while still allowing\n    users with the admin role to use their own token.\n    \n    As a tidy up two tests for getting an admin client are moved from\n    TestNeutonClient to join the other admin client tests in\n    TestNeutronClientForAdminScenarios\n    \n    Change-Id: Ic2a6f383a85f6bb606d8d65feaefa0d23329adb9\n    Closes-Bug:  1255577\n", 
            "date_created": "2013-12-02 01:27:06.696824+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/54736\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=bdc7519862299e43af55d7a7a221669de905d15c\nSubmitter: Jenkins\nBranch:    stable/havana\n\ncommit bdc7519862299e43af55d7a7a221669de905d15c\nAuthor: Drew Thorstensen <email address hidden>\nDate:   Mon Oct 21 09:52:28 2013 -0500\n\n    Pass thru credentials to allow re-authentication\n    \n    This is a backport of 4 fixes squashed into one because:\n    \n    1. They need to all be merged together as they build on each\n       other as problems were found in each change after it was\n       merged on master.\n    2. The 3rd change won't pass Jenkins on it's own so it has\n       to be squashed with the 4th and final change, so I'm just\n       going to squash the entire topic branch together.\n    \n    The change bugs fixed and cherry pick commit hashes are left\n    intact for each change.\n    \n    Closes-Bug: #1241275\n    (cherry picked from commit 51e5f52e4cb60e266ccde71f205c91eb8c97b48b)\n    \n    Cache Neutron Client for Admin Scenarios\n    \n    Closes-Bug: #1250580\n    (cherry picked from commit 85332012dede96fa6729026c2a90594ea0502ac5)\n    \n    Users with admin role in Nova should not re-auth with Neutron\n    \n    Closes-Bug: 1250763\n    (cherry picked from commit 1c1371c78b990447aeaa4377b512f8887e6ff3ce)\n    \n    Fix Neutron Authentication for Metadata Service\n    \n    Closes-Bug:  1255577\n    (cherry picked from commit 652620d12f3afe6845e41d9762b52d23f44fd557)\n    \n    ============\n    \n    Change-Id: I2858562b180f3e058a2da9d67bef02af80927177\n", 
            "date_created": "2014-03-28 04:39:35.767684+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ], 
    "closed": "2013-12-04 10:00:26.179079+00:00"
}
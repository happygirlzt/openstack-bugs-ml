{
    "status": "Confirmed", 
    "last_updated": "2016-12-09 16:00:50.738409+00:00", 
    "description": "snapshot_volume_backed() in compute.API does not set a task_state during execution. However, in essence it does:\n\nif vm_state == ACTIVE:\n  quiesce()\nsnapshot()\nif vm_state == ACTIVE:\n  unquiesce()\n\nThere is no exclusion here, though, which means a user could do:\n\nquiesce()\n                   quiesce()\nsnapshot()\n                   snapshot()\n\nunquiesce()        --snapshot() now running after unquiesce -> corruption\n                   unquiesce()\n\nor:\n\nsuspend()\nsnapshot()\n  NO QUIESCE (we're suspended)\n  snapshot()\n                   resume()\n  --snapshot() now running after resume -> corruption\n\nSame goes for stop/start.\n\nNote that snapshot_volume_backed() is a separate top-level entry point from snapshot(). snapshot() does not suffer from this problem, because it atomically sets the task state to IMAGE_SNAPSHOT_PENDING when running, which prevents the user from performing a concurrent operation on the instance. I suggest that snapshot_volume_backed() should do the same.", 
    "tags": [
        "libvirt", 
        "snapshot", 
        "volumes"
    ], 
    "importance": "Low", 
    "heat": 10, 
    "link": "https://bugs.launchpad.net/nova/+bug/1619606", 
    "owner": "None", 
    "id": 1619606, 
    "index": 2067, 
    "openned": "2016-09-02 10:30:32.397893+00:00", 
    "created": "2016-09-02 10:30:32.397893+00:00", 
    "title": "snapshot_volume_backed races, could result in data corruption", 
    "comments": [
        {
            "content": "snapshot_volume_backed() in compute.API does not set a task_state during execution. However, in essence it does:\n\nif vm_state == ACTIVE:\n  quiesce()\nsnapshot()\nif vm_state == ACTIVE:\n  unquiesce()\n\nThere is no exclusion here, though, which means a user could do:\n\nquiesce()\n                   quiesce()\nsnapshot()\n                   snapshot()\n\nunquiesce()        --snapshot() now running after unquiesce -> corruption\n                   unquiesce()\n\nor:\n\nsuspend()\nsnapshot()\n  NO QUIESCE (we're suspended)\n  snapshot()\n                   resume()\n  --snapshot() now running after resume -> corruption\n\nSame goes for stop/start.\n\nNote that snapshot_volume_backed() is a separate top-level entry point from snapshot(). snapshot() does not suffer from this problem, because it atomically sets the task state to IMAGE_SNAPSHOT_PENDING when running, which prevents the user from performing a concurrent operation on the instance. I suggest that snapshot_volume_backed() should do the same.", 
            "date_created": "2016-09-02 10:30:32.397893+00:00", 
            "author": "https://api.launchpad.net/1.0/~mbooth-9"
        }, 
        {
            "content": "I believe this is an actual bug. I tested this on my debstack on in an ubuntu environment running on vmware 14.04 and when I ran the command to snapshot the instance booted from volume from two different command prompts at almost the same time. When I did this I had multiple 'cirros-rootfs' now booted on my sidebar yet when I delete the instance and it's associated images only one of the 'cirros-rootfs' volumes would be deleted.", 
            "date_created": "2016-09-19 14:44:41.244426+00:00", 
            "author": "https://api.launchpad.net/1.0/~cm876n"
        }
    ]
}
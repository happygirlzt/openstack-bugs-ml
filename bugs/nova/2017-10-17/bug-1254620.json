{
    "status": "Opinion", 
    "last_updated": "2014-09-15 12:48:03.289254+00:00", 
    "description": "It is a left issue related to patch https://review.openstack.org/#/c/51130/4\n\nFrom Mark: I'd be tempted to split out hard_reboot() and soft_reboot() methods and use the check_instance_state() decorator to check hard/soft reboot specific states ... but it wouldn't be appropriate to mix that up with this fix\n\nNow in compute api part, nova using reboot() to handle both soft and hard reboot, but soft and hard reboot need check instance in different state, so it is better to split reboot() to hard_reboot() and soft_reboot() and use the  check_instance_state() decorator to check hard/soft reboot specific states.\n\n@wrap_check_policy\n    @check_instance_lock\n    @check_instance_state(vm_state=[vm_states.ACTIVE, vm_states.STOPPED,\n                                    vm_states.PAUSED, vm_states.SUSPENDED,\n                                    vm_states.ERROR],\n                          task_state=[None, task_states.REBOOTING,\n                                      task_states.REBOOTING_HARD,\n                                      task_states.RESUMING,\n                                      task_states.UNPAUSING,\n                                      task_states.PAUSING,\n                                      task_states.SUSPENDING])\n    def reboot(self, context, instance, reboot_type):\n        \"\"\"Reboot the given instance.\"\"\"\n        if (reboot_type == 'SOFT' and\n                (instance['vm_state'] in [vm_states.STOPPED,\n                                          vm_states.PAUSED,\n                                          vm_states.SUSPENDED,\n                                          vm_states.ERROR])):\n            raise exception.InstanceInvalidState(\n                attr='vm_state',\n                instance_uuid=instance['uuid'],\n                state=instance['vm_state'],\n                method='reboot')\n        if ((reboot_type == 'SOFT' and\n                instance['task_state'] == task_states.REBOOTING) or\n            (reboot_type == 'HARD' and\n                instance['task_state'] == task_states.REBOOTING_HARD)):\n            raise exception.InstanceInvalidState(\n                attr='task_state',\n                instance_uuid=instance['uuid'],", 
    "tags": [
        "api", 
        "compute"
    ], 
    "importance": "Wishlist", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1254620", 
    "owner": "https://api.launchpad.net/1.0/~jay-lau-513", 
    "id": 1254620, 
    "index": 2714, 
    "openned": "2013-11-25 08:18:12.567197+00:00", 
    "created": "2013-11-25 08:18:12.567197+00:00", 
    "title": "Split reboot to hard_reboot and soft_reboot", 
    "comments": [
        {
            "content": "It is a left issue related to patch https://review.openstack.org/#/c/51130/4\n\nFrom Mark: I'd be tempted to split out hard_reboot() and soft_reboot() methods and use the check_instance_state() decorator to check hard/soft reboot specific states ... but it wouldn't be appropriate to mix that up with this fix\n\nNow in compute api part, nova using reboot() to handle both soft and hard reboot, but soft and hard reboot need check instance in different state, so it is better to split reboot() to hard_reboot() and soft_reboot() and use the  check_instance_state() decorator to check hard/soft reboot specific states.\n\n@wrap_check_policy\n    @check_instance_lock\n    @check_instance_state(vm_state=[vm_states.ACTIVE, vm_states.STOPPED,\n                                    vm_states.PAUSED, vm_states.SUSPENDED,\n                                    vm_states.ERROR],\n                          task_state=[None, task_states.REBOOTING,\n                                      task_states.REBOOTING_HARD,\n                                      task_states.RESUMING,\n                                      task_states.UNPAUSING,\n                                      task_states.PAUSING,\n                                      task_states.SUSPENDING])\n    def reboot(self, context, instance, reboot_type):\n        \"\"\"Reboot the given instance.\"\"\"\n        if (reboot_type == 'SOFT' and\n                (instance['vm_state'] in [vm_states.STOPPED,\n                                          vm_states.PAUSED,\n                                          vm_states.SUSPENDED,\n                                          vm_states.ERROR])):\n            raise exception.InstanceInvalidState(\n                attr='vm_state',\n                instance_uuid=instance['uuid'],\n                state=instance['vm_state'],\n                method='reboot')\n        if ((reboot_type == 'SOFT' and\n                instance['task_state'] == task_states.REBOOTING) or\n            (reboot_type == 'HARD' and\n                instance['task_state'] == task_states.REBOOTING_HARD)):\n            raise exception.InstanceInvalidState(\n                attr='task_state',\n                instance_uuid=instance['uuid'],", 
            "date_created": "2013-11-25 08:18:12.567197+00:00", 
            "author": "https://api.launchpad.net/1.0/~jay-lau-513"
        }, 
        {
            "content": "This is a bigger change than just fixing a bug, especially if it means changing the behavior of the API.  This would also impact how the virt drivers work, i.e. libvirt will attempt a soft reboot and failing that, resort to hard reboot.", 
            "date_created": "2013-12-08 21:13:43.011821+00:00", 
            "author": "https://api.launchpad.net/1.0/~mriedem"
        }
    ], 
    "closed": "2014-09-15 12:48:00.101952+00:00"
}
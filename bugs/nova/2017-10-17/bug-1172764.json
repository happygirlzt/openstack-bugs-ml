{
    "status": "Invalid", 
    "last_updated": "2014-07-09 23:42:40.479582+00:00", 
    "description": "Consider a scenario where a user issues a request to delete an instance but the instance doesn't disappear because of a problem with the infrastructure (e.g. a libvirt error). The instance then stays in vm_state=active and task_state=deleting. In that case, it is not the user's fault that the instance doesn't go away. However, the user is penalized for it, because that instance gets counted in the user's quota.\n\nThe problem was confirmed to exist on the trunk version of Nova: 2013.2.a332.g18d9a8b.\n\nOne way to reproduce this problem is to start an instance then shut down nova-compute and then try to delete the instance. Check the instance in the instances table in the data base. It will have vm_state=active and task_state=deleting. Then check the quota usage with \"nova absolute-limits\". The totalInstancesUsed variable will include that instance.", 
    "tags": [], 
    "importance": "Undecided", 
    "heat": 8, 
    "link": "https://bugs.launchpad.net/nova/+bug/1172764", 
    "owner": "None", 
    "id": 1172764, 
    "index": 4872, 
    "openned": "2013-04-25 15:43:33.992840+00:00", 
    "created": "2013-04-25 15:43:33.992840+00:00", 
    "title": "quota usage includes instances that are in task_state=deleting and vm_state=active", 
    "comments": [
        {
            "content": "Consider a scenario where a user issues a request to delete an instance but the instance doesn't disappear because of a problem with the infrastructure (e.g. a libvirt error). The instance then stays in vm_state=active and task_state=deleting. In that case, it is not the user's fault that the instance doesn't go away. However, the user is penalized for it, because that instance gets counted in the user's quota.\n\nThe problem was confirmed to exist on the trunk version of Nova: 2013.2.a332.g18d9a8b.\n\nOne way to reproduce this problem is to start an instance then shut down nova-compute and then try to delete the instance. Check the instance in the instances table in the data base. It will have vm_state=active and task_state=deleting. Then check the quota usage with \"nova absolute-limits\". The totalInstancesUsed variable will include that instance.", 
            "date_created": "2013-04-25 15:43:33.992840+00:00", 
            "author": "https://api.launchpad.net/1.0/~a-korzynski"
        }, 
        {
            "content": "Well, in that case, it should be possible to issue \"delete\" again and cause the instance to actually be deleted; if that fails, then that's the bug we need to fix, or it's due to some other problem (such as a compute being down) which is going to require administrative action anyway.  As long as the instance is active, and the user has some recourse through the API that can delete it, I feel the instance should be counted against the user\u2026", 
            "date_created": "2013-04-29 18:39:28.025524+00:00", 
            "author": "https://api.launchpad.net/1.0/~klmitch"
        }, 
        {
            "content": "Hi Kevin,   \n\nI don\u2019t really see the case for still counting resources against a user once the task state gets to \"deleting\".  At this point the used has said that want to delete the instance, and there is no way back - all they can do is issue more deletes so they have no effective control over it any more.    If it sticks in \u201cdeleting\u201d its an error in the system somewhere, so not the users problem and they shouldn\u2019t have it counted against their quota.\n\nA number of bugs around instances sticking in this stage have been fixed, and the system will now delete instances in the API is the compute service has timed out, so the window Aleksander describes is probably quiet small \u2013 but it still feels to me unfair to continue to count resources that the user has asked to be deleted and which they have no way of recovering to be counted against their quota when there is a glitch in the system.\n\nRegards,\nPhil  \n", 
            "date_created": "2013-04-30 14:18:15.720704+00:00", 
            "author": "https://api.launchpad.net/1.0/~philip-day"
        }, 
        {
            "content": "Well, perhaps the solution is a periodic task or something similar that looks for instances in the \"deleting\" state that have been around for too long, and automatically re-issue a delete on behalf of the user.  While some billing systems may be based on the in-use quantity from the quota system, others are probably based on the notifications of completion of deletion, and something like that should be good for covering that as well\u2026", 
            "date_created": "2013-04-30 15:10:06.363235+00:00", 
            "author": "https://api.launchpad.net/1.0/~klmitch"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/28063", 
            "date_created": "2013-05-02 17:13:17.188152+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Kevin, how about the solution I've just submitted? It adds a new flag: release_instance_quota_before_deletion. If the flag is set to true, the quota is released after the user submits the delete request, before the actual deletion begins. If set to false, quota is released after the deletion succeeds. The default is the current behaviour (i.e. the flag set to false).\n\nNote that I will add/modify tests and comments before marking it as ready for review.", 
            "date_created": "2013-05-02 17:27:44.080787+00:00", 
            "author": "https://api.launchpad.net/1.0/~a-korzynski"
        }, 
        {
            "content": "as per discussion on the patch, marking as invalid", 
            "date_created": "2014-07-09 23:42:24.589025+00:00", 
            "author": "https://api.launchpad.net/1.0/~jogo"
        }
    ], 
    "closed": "2014-07-09 23:42:34.452402+00:00"
}
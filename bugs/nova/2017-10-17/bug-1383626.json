{
    "status": "Expired", 
    "last_updated": "2015-04-02 04:17:31.092139+00:00", 
    "description": "when we create a instance by boot from image(create a new volume), if the image has one or more property, it will boot without the property.\nfor example, we add a property 'hw_qemu_guest_agent=yes' on image ubt1204,\n\u00a0Property | Value |\n+--------------------------------+--------------------------------------+\n| Property 'hw_qemu_guest_agent' | yes |\n| checksum | 2823c8bf0336349b23f20fb75ec60626 |\n| container_format | bare |\n| created_at | 2014-10-15T09:07:31 |\n| deleted | False |\n| disk_format | raw |\n| id | 92811d87-d905-4ef4-b173-c7a17805cf9b |\n| is_public | False |\n| min_disk | 0 |\n| min_ram | 0 |\n| name | qga-ubt1404 |\n| owner | b85e1c03b2c84e079417d57ffce97751 |\n| protected | False |\n| size | 5368709120 |\n| status | active |\n| updated_at | 2014-10-15T09:08:54\n\nthen,we create a instance on horizon by boot from image(create a new volume), in the libvirt.xml of this instance, it doesn't contain below config:\n<channel type=\"unix\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<source path=\"/var/lib/libvirt/qemu/org.qemu.guest_agent.0.instance-000000a4.sock\" mode=\"bind\"/>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<target type=\"virtio\" name=\"org.qemu.guest_agent.0\"/>\n\u00a0\u00a0</channel>\n\nand if we create a instance by boot from image, the libvirt.xml contain the above config\n\nI read the code and found :\nif we create a instance by boot from image(create a new volume), image_ref in instance is null, below is the code to create libvirt.xml:\n\u00a0\u00a0\u00a0\u00a0def to_xml(self, context, instance, network_info, disk_info,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image_meta=None, rescue=None,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0block_device_info=None, write_to_disk=False):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# We should get image metadata everytime for generating xml\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if image_meta is None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(image_service, image_id) = glance.get_remote_image_service(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0context, instance['image_ref'])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image_meta = compute_utils.get_image_metadata(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0context, image_service, image_id, instance)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# NOTE(danms): Stringifying a NetworkInfo will take a lock. Do\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# this ahead of time so that we don't acquire it while also\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# holding the logging lock.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0network_info_str = str(network_info)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LOG.debug(_('Start to_xml '\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'network_info=%(network_info)s '\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'disk_info=%(disk_info)s '\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'image_meta=%(image_meta)s rescue=%(rescue)s'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'block_device_info=%(block_device_info)s'),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{'network_info': network_info_str, 'disk_info': disk_info,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'image_meta': image_meta, 'rescue': rescue,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'block_device_info': block_device_info})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0conf = self.get_guest_config(instance, network_info, image_meta,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0disk_info, rescue, block_device_info)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0xml = conf.to_xml()\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if write_to_disk:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0instance_dir = libvirt_utils.get_instance_path(instance)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0xml_path = os.path.join(instance_dir, 'libvirt.xml')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0libvirt_utils.write_to_file(xml_path, xml)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LOG.debug(_('End to_xml instance=%(instance)s xml=%(xml)s'),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{'instance': instance, 'xml': xml})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return xml\n\nimage_ref is null so it can't generate full libvirt.xml", 
    "tags": [], 
    "importance": "Undecided", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1383626", 
    "owner": "None", 
    "id": 1383626, 
    "index": 6495, 
    "openned": "2014-10-21 08:57:08.843153+00:00", 
    "created": "2014-10-21 08:57:08.843153+00:00", 
    "title": "boot from image(create a new volume) lost image property", 
    "comments": [
        {
            "content": "when we create a instance by boot from image(create a new volume), if the image has one or more property, it will boot without the property.\nfor example, we add a property 'hw_qemu_guest_agent=yes' on image ubt1204,\n Property | Value |\n+--------------------------------+--------------------------------------+\n| Property 'hw_qemu_guest_agent' | yes |\n| checksum | 2823c8bf0336349b23f20fb75ec60626 |\n| container_format | bare |\n| created_at | 2014-10-15T09:07:31 |\n| deleted | False |\n| disk_format | raw |\n| id | 92811d87-d905-4ef4-b173-c7a17805cf9b |\n| is_public | False |\n| min_disk | 0 |\n| min_ram | 0 |\n| name | qga-ubt1404 |\n| owner | b85e1c03b2c84e079417d57ffce97751 |\n| protected | False |\n| size | 5368709120 |\n| status | active |\n| updated_at | 2014-10-15T09:08:54\n\nthen,we create a instance on horizon by boot from image(create a new volume), in the libvirt.xml of this instance, it doesn't contain below config:\n<channel type=\"unix\">\n      <source path=\"/var/lib/libvirt/qemu/org.qemu.guest_agent.0.instance-000000a4.sock\" mode=\"bind\"/>\n      <target type=\"virtio\" name=\"org.qemu.guest_agent.0\"/>\n  </channel>\n\nand if we create a instance by boot from image, the libvirt.xml contain the above config\n\nI read the code and found :\nif we create a instance by boot from image(create a new volume), image_ref in instance is null, below is the code to create libvirt.xml:\n    def to_xml(self, context, instance, network_info, disk_info,\n               image_meta=None, rescue=None,\n               block_device_info=None, write_to_disk=False):\n        # We should get image metadata everytime for generating xml\n        if image_meta is None:\n            (image_service, image_id) = glance.get_remote_image_service(\n                                            context, instance['image_ref'])\n            image_meta = compute_utils.get_image_metadata(\n                                context, image_service, image_id, instance)\n        # NOTE(danms): Stringifying a NetworkInfo will take a lock. Do\n        # this ahead of time so that we don't acquire it while also\n        # holding the logging lock.\n        network_info_str = str(network_info)\n        LOG.debug(_('Start to_xml '\n                    'network_info=%(network_info)s '\n                    'disk_info=%(disk_info)s '\n                    'image_meta=%(image_meta)s rescue=%(rescue)s'\n                    'block_device_info=%(block_device_info)s'),\n                  {'network_info': network_info_str, 'disk_info': disk_info,\n                   'image_meta': image_meta, 'rescue': rescue,\n                   'block_device_info': block_device_info})\n        conf = self.get_guest_config(instance, network_info, image_meta,\n                                     disk_info, rescue, block_device_info)\n        xml = conf.to_xml()\n\n        if write_to_disk:\n            instance_dir = libvirt_utils.get_instance_path(instance)\n            xml_path = os.path.join(instance_dir, 'libvirt.xml')\n            libvirt_utils.write_to_file(xml_path, xml)\n\n        LOG.debug(_('End to_xml instance=%(instance)s xml=%(xml)s'),\n                  {'instance': instance, 'xml': xml})\n        return xml\n\nimage_ref is null so it can't generate full libvirt.xml", 
            "date_created": "2014-10-21 08:57:08.843153+00:00", 
            "author": "https://api.launchpad.net/1.0/~foreverwingsfly"
        }, 
        {
            "content": "below is the code to add qga sock in libivrt.xml in /virt/libvirt/driver.py , it only check image_meta to find its property, so boot from image(create a new volume) is not in consideration.\n \nif CONF.libvirt_type in ('qemu', 'kvm'):\n            qga_enabled = False\n            # Enable qga only if the 'hw_qemu_guest_agent' property is set\n            if (image_meta is not None and image_meta.get('properties') and\n                    image_meta['properties'].get('hw_qemu_guest_agent')\n                    is not None):\n                hw_qga = image_meta['properties']['hw_qemu_guest_agent']\n                if hw_qga.lower() == 'yes':\n                    LOG.debug(_(\"Qemu guest agent is enabled through image \"\n                                \"metadata\"), instance=instance)\n                    qga_enabled = True\n\n            if qga_enabled:\n                qga = vconfig.LibvirtConfigGuestChannel()\n                qga.type = \"unix\"\n                qga.target_name = \"org.qemu.guest_agent.0\"\n                qga.source_path = (\"/var/lib/libvirt/qemu/%s.%s.sock\" %\n                                (\"org.qemu.guest_agent.0\", instance['name']))\n                guest.add_device(qga)\n", 
            "date_created": "2014-10-22 05:38:13.415012+00:00", 
            "author": "https://api.launchpad.net/1.0/~foreverwingsfly"
        }, 
        {
            "content": "Hi,\n\nWhich version of the code are you using?\nI didn't see image_ref being lost using the recent master.. and I couldn't reproduce this problem.\n\n", 
            "date_created": "2014-10-22 19:40:37.692344+00:00", 
            "author": "https://api.launchpad.net/1.0/~vladik-romanovsky"
        }, 
        {
            "content": "[Expired for OpenStack Compute (nova) because there has been no activity for 60 days.]", 
            "date_created": "2015-04-02 04:17:28.339199+00:00", 
            "author": "https://api.launchpad.net/1.0/~janitor"
        }
    ], 
    "closed": "2015-04-02 04:17:28.869416+00:00"
}
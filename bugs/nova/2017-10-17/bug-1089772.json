{
    "status": "Invalid", 
    "last_updated": "2013-05-08 05:23:49.177008+00:00", 
    "description": "1. nova compute need update instance to \"Error\" state. \nWhen the VM is  deleted on hypervisor directly, but nova compute just try to update it to \"power_state=0, vm_state=stopped  and status=SHUTOFF\".  \n\n\n2. The steps to recreate the issue.\na. launch instance on openstack\nb. delete the VM on hypervisor directly\nc. but OpenStack nova compute(the function _sync_power_states(self, context) in nova/compute/manager.py) just try to update instance to power_state=0, vm_state=stopped  and status=SHUTOFF\n\n\n3. The proposal to this issue:\nadd self._set_instance_error_state() into _sync_power_states(self, context) of nova/compute/manager.py to update instance to Error state.\n\n            elif vm_state == vm_states.ACTIVE:\n                # The only rational power state should be RUNNING\n                if vm_power_state in (power_state.NOSTATE,\n                                       power_state.SHUTDOWN,\n                                       power_state.CRASHED):\n                    LOG.warn(_(\"Instance shutdown by itself. Calling \"\n                               \"the stop API.\"), instance=db_instance)\n                    try:\n                        # Note(maoy): here we call the API instead of\n                        # brutally updating the vm_state in the database\n                        # to allow all the hooks and checks to be performed.\n                        self.compute_api.stop(context, db_instance)\n                    except Exception:\n                        # Note(maoy): there is no need to propagate the error\n                        # because the same power_state will be retrieved next\n                        # time and retried.\n                        # For example, there might be another task scheduled.\n                        LOG.exception(_(\"error during stop() in \"\n                                        \"sync_power_state.\"),\n                                      instance=db_instance)\n                        self._set_instance_error_state(context, db_instance['uuid'])\n                elif vm_power_state in (power_state.PAUSED,\n                                        power_state.SUSPENDED):\n                    LOG.warn(_(\"Instance is paused or suspended \"\n                               \"unexpectedly. Calling \"\n                               \"the stop API.\"), instance=db_instance)\n                    try:\n                        self.compute_api.stop(context, db_instance)\n                    except Exception:\n                        LOG.exception(_(\"error during stop() in \"\n                                        \"sync_power_state.\"),\n                                      instance=db_instance)\n                        self._set_instance_error_state(context, db_instance['uuid'])\n            elif vm_state == vm_states.STOPPED:\n                if vm_power_state not in (power_state.NOSTATE,\n                                          power_state.SHUTDOWN,\n                                          power_state.CRASHED):\n                    LOG.warn(_(\"Instance is not stopped. Calling \"\n                               \"the stop API.\"), instance=db_instance)\n                    try:\n                        # Note(maoy): this assumes that the stop API is\n                        # idempotent.\n                        self.compute_api.stop(context, db_instance)\n                    except Exception:\n                        LOG.exception(_(\"error during stop() in \"\n                                        \"sync_power_state.\"),\n                                      instance=db_instance)\n                elif vm_power_state == power_state.NOSTATE:\n                    LOG.warn(_(\"Instance is NOSTATE\"), instance=db_instance)\n                    self._set_instance_error_state(context, db_instance['uuid'])", 
    "tags": [], 
    "importance": "Undecided", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1089772", 
    "owner": "None", 
    "id": 1089772, 
    "index": 4532, 
    "openned": "2012-12-13 05:55:34.101600+00:00", 
    "created": "2012-12-13 05:55:34.101600+00:00", 
    "title": "nova compute need update instance to 'Error' state.", 
    "comments": [
        {
            "content": "1. nova compute need update instance to \"Error\" state. \nWhen the VM is  deleted on hypervisor directly, but nova compute just try to update it to \"power_state=0, vm_state=stopped  and status=SHUTOFF\".  \n\n\n2. The steps to recreate the issue.\na. launch instance on openstack\nb. delete the VM on hypervisor directly\nc. but OpenStack nova compute(the function _sync_power_states(self, context) in nova/compute/manager.py) just try to update instance to power_state=0, vm_state=stopped  and status=SHUTOFF\n\n\n3. The proposal to this issue:\nadd self._set_instance_error_state() into _sync_power_states(self, context) of nova/compute/manager.py to update instance to Error state.\n\n            elif vm_state == vm_states.ACTIVE:\n                # The only rational power state should be RUNNING\n                if vm_power_state in (power_state.NOSTATE,\n                                       power_state.SHUTDOWN,\n                                       power_state.CRASHED):\n                    LOG.warn(_(\"Instance shutdown by itself. Calling \"\n                               \"the stop API.\"), instance=db_instance)\n                    try:\n                        # Note(maoy): here we call the API instead of\n                        # brutally updating the vm_state in the database\n                        # to allow all the hooks and checks to be performed.\n                        self.compute_api.stop(context, db_instance)\n                    except Exception:\n                        # Note(maoy): there is no need to propagate the error\n                        # because the same power_state will be retrieved next\n                        # time and retried.\n                        # For example, there might be another task scheduled.\n                        LOG.exception(_(\"error during stop() in \"\n                                        \"sync_power_state.\"),\n                                      instance=db_instance)\n                        self._set_instance_error_state(context, db_instance['uuid'])\n                elif vm_power_state in (power_state.PAUSED,\n                                        power_state.SUSPENDED):\n                    LOG.warn(_(\"Instance is paused or suspended \"\n                               \"unexpectedly. Calling \"\n                               \"the stop API.\"), instance=db_instance)\n                    try:\n                        self.compute_api.stop(context, db_instance)\n                    except Exception:\n                        LOG.exception(_(\"error during stop() in \"\n                                        \"sync_power_state.\"),\n                                      instance=db_instance)\n                        self._set_instance_error_state(context, db_instance['uuid'])\n            elif vm_state == vm_states.STOPPED:\n                if vm_power_state not in (power_state.NOSTATE,\n                                          power_state.SHUTDOWN,\n                                          power_state.CRASHED):\n                    LOG.warn(_(\"Instance is not stopped. Calling \"\n                               \"the stop API.\"), instance=db_instance)\n                    try:\n                        # Note(maoy): this assumes that the stop API is\n                        # idempotent.\n                        self.compute_api.stop(context, db_instance)\n                    except Exception:\n                        LOG.exception(_(\"error during stop() in \"\n                                        \"sync_power_state.\"),\n                                      instance=db_instance)\n                elif vm_power_state == power_state.NOSTATE:\n                    LOG.warn(_(\"Instance is NOSTATE\"), instance=db_instance)\n                    self._set_instance_error_state(context, db_instance['uuid'])", 
            "date_created": "2012-12-13 05:55:34.101600+00:00", 
            "author": "https://api.launchpad.net/1.0/~yanglyy"
        }, 
        {
            "content": "It's obviously not normal operation to delete a VM from outside of nova.\n\nAside from that, nova's behavior seems reasonable anyway.  Once you try to go turn it on, I assume it goes into an Error state?", 
            "date_created": "2013-02-26 06:55:42.237997+00:00", 
            "author": "https://api.launchpad.net/1.0/~russellb"
        }, 
        {
            "content": "We cannot solve the issue you reported without more information. Could you please provide the requested information ?", 
            "date_created": "2013-03-18 12:09:39.725008+00:00", 
            "author": "https://api.launchpad.net/1.0/~dims-v"
        }
    ], 
    "closed": "2013-05-08 05:23:47.512425+00:00"
}
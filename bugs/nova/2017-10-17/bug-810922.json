{
    "status": "Invalid", 
    "last_updated": "2012-05-17 12:18:52.820155+00:00", 
    "description": "\nIn nova/virt/vmwareapi_conn.py 's function \"_call_method\", there is a corner case which is not taken care of. \n\n\n(Samples taken from vmwareapi/vmops.py module)\n\nCalls are made either through vim_util's utility functions. e.g \n\nself._session._call_method(vim_util, \"get_objects\",\n\t\t\t\"Datastore\", [\"summary.type\", \"summary.name\"])\n\nOr \n\ndirectly say a call like\n\nvm_create_task = self._session._call_method(\n\t\t\tself._session._get_vim(),\n\t\t\t\"CreateVM_Task\", vm_folder_mor,\n\t\t\tconfig=config_spec, pool=res_pool_mor)\n\n\nNow suppose the session we held expires at the vCenter, we get an error and we create say new vim object with a new session id. But in case of the second call,\nwe still are referring to the old vim object as the module palceholder. We just need to make it point to the latest vim object. Just need to add a line to the \n_call_method in the else part. The code would look like this after the change\n\nif not isinstance(module, vim.Vim):\n\t# If it is not the first try, then get the latest vim\n\t# object\n    if retry_count > 0:\n\t\targs = args[1:]\n\targs = [self.vim] + args\nelse:\n    module = self.vim", 
    "tags": [], 
    "importance": "Medium", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/810922", 
    "owner": "None", 
    "id": 810922, 
    "index": 2465, 
    "openned": "2011-07-15 08:21:37.690723+00:00", 
    "created": "2011-07-15 08:21:37.690723+00:00", 
    "title": "A corner case in _call_method of vmwareapi_conn.py", 
    "comments": [
        {
            "content": "\nIn nova/virt/vmwareapi_conn.py 's function \"_call_method\", there is a corner case which is not taken care of. \n\n\n(Samples taken from vmwareapi/vmops.py module)\n\nCalls are made either through vim_util's utility functions. e.g \n\nself._session._call_method(vim_util, \"get_objects\",\n\t\t\t\"Datastore\", [\"summary.type\", \"summary.name\"])\n\nOr \n\ndirectly say a call like\n\nvm_create_task = self._session._call_method(\n\t\t\tself._session._get_vim(),\n\t\t\t\"CreateVM_Task\", vm_folder_mor,\n\t\t\tconfig=config_spec, pool=res_pool_mor)\n\n\nNow suppose the session we held expires at the vCenter, we get an error and we create say new vim object with a new session id. But in case of the second call,\nwe still are referring to the old vim object as the module palceholder. We just need to make it point to the latest vim object. Just need to add a line to the \n_call_method in the else part. The code would look like this after the change\n\nif not isinstance(module, vim.Vim):\n\t# If it is not the first try, then get the latest vim\n\t# object\n    if retry_count > 0:\n\t\targs = args[1:]\n\targs = [self.vim] + args\nelse:\n    module = self.vim", 
            "date_created": "2011-07-15 08:21:37.690723+00:00", 
            "author": "https://api.launchpad.net/1.0/~neeraj-koul"
        }, 
        {
            "content": "I think code formatting was not proper in the bug description. What i meant was that add an else to cover up for the case when module is an instance of vim.Vim..\nAdd\nmodule = self.vim \nin the else part", 
            "date_created": "2011-07-15 08:24:26.906908+00:00", 
            "author": "https://api.launchpad.net/1.0/~neeraj-koul"
        }, 
        {
            "content": "@Neeraj: any chance you could submit your patch as a branch merge proposal ?", 
            "date_created": "2011-07-22 13:03:09.602902+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "I will work with Sateesh (https://launchpad.net/~sateesh-chodapuneedi) to do the same.. Will assist him at the code level and he can submit the branch merge proposal..", 
            "date_created": "2011-07-25 06:17:00.983590+00:00", 
            "author": "https://api.launchpad.net/1.0/~neeraj-koul"
        }, 
        {
            "content": "This case seems not likely to happen.\n\nSince self._session._get_vim() will return self.vim which is the same as you proposed.", 
            "date_created": "2012-01-10 05:44:56.134895+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudayou"
        }, 
        {
            "content": "It looks like this fix was never submitted, but looking at the code and @hudayou 's comments, it seems invalid anyway ... especially after all this time has passed.", 
            "date_created": "2012-05-17 12:18:41.901682+00:00", 
            "author": "https://api.launchpad.net/1.0/~fifieldt"
        }
    ], 
    "closed": "2012-05-17 12:18:51.095389+00:00"
}
{
    "status": "Fix Released", 
    "last_updated": "2016-10-07 16:59:50.277745+00:00", 
    "description": "There are multiple problems with the authentication information that nova/volume/cinder code passes to cinderclient:\n\n1. nova/volume/cinder.py passes 'cinder endpoint publicURL'  as the auth_url to cinderclient for credential authentication instead of the keystone auth_url .This happens here:\n\nget_cinder_client_version(context) sets the value for global CINDER_URL and passes it to\nc = cinder_client.Client(version,\n                             context.user_id,\n                             context.auth_token,\n                             project_id=context.project_id,\n                             auth_url=CINDER_URL,\n                             insecure=CONF.cinder.api_insecure,\n                             retries=CONF.cinder.http_retries,\n                             timeout=CONF.cinder.http_timeout,\n                             cacert=CONF.cinder.ca_certificates_file)\n\nc.client.auth_token = context.auth_token or '%s:%s' % (context.user_id,\n                                                           context.project_id)\n    \n\nUnder normal circumstances ( i e in cases where the context has auth_token) , the auth_url is never used/required. So this is required only when the token expires and an attempt to do fresh authentication is made here:\n\ndef _cs_request(self, url, method, **kwargs):\n        auth_attempts = 0\n        attempts = 0\n        backoff = 1\n        while True:\n            attempts += 1\n            if not self.management_url or not self.auth_token:\n                self.authenticate()\n            kwargs.setdefault('headers', {})['X-Auth-Token'] = self.auth_token\n            if self.projectid:\n                kwargs['headers']['X-Auth-Project-Id'] = self.projectid\n            try:\n                resp, body = self.request(self.management_url + url, method,\n                                          **kwargs)\n                return resp, body\n            except exceptions.BadRequest as e:\n                if attempts > self.retries:\n                    raise\n            except exceptions.Unauthorized:\n                if auth_attempts > 0:\n                    raise\n                self._logger.debug(\"Unauthorized, reauthenticating.\")\n                self.management_url = self.auth_token = None\n                # First reauth. Discount this attempt.\n                attempts -= 1\n                auth_attempts += 1\n                continue\n\n\n2. nova/volume.cinderclient.py >> cinderclient method passes context.auth_token instead of the password.Due to this HttpClient.password attribute is set to the auth token instead of the password. \n\n3. There are other problems around this which is summarized as below:\n\ncinderclient should really support a way of passing an auth_token in on the __init__ so it is explicitly supported for the caller to specify an auth_token, rather than forcing this hack that nova is currently using of setting the auth_token itself after creating the cinderclient instance. That's not strictly required, but it would be a much better design. At that point, cinderclient should also stop requiring the auth_url parameter (it currently raises an exception if that isn't specified) if an auth_token is specified and retries==0, since in that case the auth_url would never be used. Userid and password would also not be required in that case.\n\nnova needs to either start passing a valid userid and password and a valid auth_url so that retries will work, or stop setting retries to a non-zero number (it's using a conf setting to determine the number of retries, and the default is 3). If the decision is to get retries working, then we have to figure out what to pass for the userid and password. Nova won't know the end-user's user/password that correspond to the auth_token it initially uses, and we wouldn't want to be using a different user on retries than we do on the initial requests, so I don't think retries should be supported unless nova is going to make ALL requests with a service userid rather than with the end-user's userid... and I don't think that fits with the current OpenStack architecture. So that leaves us with not supporting retries. In that case, nova should still stop passing the auth_token in as the password so that someone doesn't stumble over that later when retry support is added. Similarly for the auth_url it should start passing the correct keystone auth_url, or at least make it clear that it's passing an invalid auth_url so someone doesn't stumble over that when trying to add retry support later. And it definitely needs to stop setting retries to a non-zero number.", 
    "tags": [
        "volumes"
    ], 
    "importance": "High", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1401437", 
    "owner": "None", 
    "id": 1401437, 
    "index": 1658, 
    "openned": "2014-12-11 09:06:58.310273+00:00", 
    "created": "2014-12-11 09:06:58.310273+00:00", 
    "title": "nova passes incorrect authentication info to cinderclient", 
    "comments": [
        {
            "content": "There are multiple problems with the authentication information that nova/volume/cinder code passes to cinderclient:\n\n1. nova/volume/cinder.py passes 'cinder endpoint publicURL'  as the auth_url to cinderclient for credential authentication instead of the keystone auth_url .This happens here:\n\nget_cinder_client_version(context) sets the value for global CINDER_URL and passes it to\nc = cinder_client.Client(version,\n                             context.user_id,\n                             context.auth_token,\n                             project_id=context.project_id,\n                             auth_url=CINDER_URL,\n                             insecure=CONF.cinder.api_insecure,\n                             retries=CONF.cinder.http_retries,\n                             timeout=CONF.cinder.http_timeout,\n                             cacert=CONF.cinder.ca_certificates_file)\n\nc.client.auth_token = context.auth_token or '%s:%s' % (context.user_id,\n                                                           context.project_id)\n    \n\nUnder normal circumstances ( i e in cases where the context has auth_token) , the auth_url is never used/required. So this is required only when the token expires and an attempt to do fresh authentication is made here:\n\ndef _cs_request(self, url, method, **kwargs):\n        auth_attempts = 0\n        attempts = 0\n        backoff = 1\n        while True:\n            attempts += 1\n            if not self.management_url or not self.auth_token:\n                self.authenticate()\n            kwargs.setdefault('headers', {})['X-Auth-Token'] = self.auth_token\n            if self.projectid:\n                kwargs['headers']['X-Auth-Project-Id'] = self.projectid\n            try:\n                resp, body = self.request(self.management_url + url, method,\n                                          **kwargs)\n                return resp, body\n            except exceptions.BadRequest as e:\n                if attempts > self.retries:\n                    raise\n            except exceptions.Unauthorized:\n                if auth_attempts > 0:\n                    raise\n                self._logger.debug(\"Unauthorized, reauthenticating.\")\n                self.management_url = self.auth_token = None\n                # First reauth. Discount this attempt.\n                attempts -= 1\n                auth_attempts += 1\n                continue\n\n\n2. nova/volume.cinderclient.py >> cinderclient method passes context.auth_token instead of the password.Due to this HttpClient.password attribute is set to the auth token instead of the password. \n\n3. There are other problems around this which is summarized as below:\n\ncinderclient should really support a way of passing an auth_token in on the __init__ so it is explicitly supported for the caller to specify an auth_token, rather than forcing this hack that nova is currently using of setting the auth_token itself after creating the cinderclient instance. That's not strictly required, but it would be a much better design. At that point, cinderclient should also stop requiring the auth_url parameter (it currently raises an exception if that isn't specified) if an auth_token is specified and retries==0, since in that case the auth_url would never be used. Userid and password would also not be required in that case.\n\nnova needs to either start passing a valid userid and password and a valid auth_url so that retries will work, or stop setting retries to a non-zero number (it's using a conf setting to determine the number of retries, and the default is 3). If the decision is to get retries working, then we have to figure out what to pass for the userid and password. Nova won't know the end-user's user/password that correspond to the auth_token it initially uses, and we wouldn't want to be using a different user on retries than we do on the initial requests, so I don't think retries should be supported unless nova is going to make ALL requests with a service userid rather than with the end-user's userid... and I don't think that fits with the current OpenStack architecture. So that leaves us with not supporting retries. In that case, nova should still stop passing the auth_token in as the password so that someone doesn't stumble over that later when retry support is added. Similarly for the auth_url it should start passing the correct keystone auth_url, or at least make it clear that it's passing an invalid auth_url so someone doesn't stumble over that when trying to add retry support later. And it definitely needs to stop setting retries to a non-zero number.", 
            "date_created": "2014-12-11 09:06:58.310273+00:00", 
            "author": "https://api.launchpad.net/1.0/~dikonoor"
        }, 
        {
            "content": "This looks to be using the user's token meaning a couple things: Nova could never pass a username/password to cinderclient, and refreshing the token is not working since you don't have a username/password [today].\n\nThere are a couple approaches to fix this (no particular order):\n\n1) as outlined, don't set retries\n\n2) Keystone team needs to evaluate allowing a \"refresh\" of a token with a longer expires in some cases (this however has a lot of security implications, and is unlikely to go through).\n\n3) (as discussed at the summit), when policy.py is graduated (in process) to it's own library we can add the ability to the rules engine to accept expired tokens (explicitly configured) for some calls (this also requires some changes to auth token middleware). This would need to also be reviewed by the security teams, but some cases it would be ok (checking status of things) be allowed to use an expired token. Some mechanics on this approach likely need to still be worked out.\n\n4) Migrate this call to use a service user nova actually controls.\n\n\nThe short answer is that as of today, the only easy option is to not retry, since the user's token isn't guaranteed to be valid the entire time and we can't refresh it.", 
            "date_created": "2014-12-11 14:45:58.308328+00:00", 
            "author": "https://api.launchpad.net/1.0/~mdrnstm"
        }, 
        {
            "content": "The code mentioned has been replaced. Looking at master calling client looks like: \n\n    return cinder_client.Client(version,\n                                session=_SESSION,\n                                auth=auth,\n                                endpoint_override=endpoint_override,\n                                connect_retries=CONF.cinder.http_retries,\n                                **service_parameters)\n\nThe auth plugin specified by auth knows that it got this from a user token and will not attempt to reauthenticate. \n\nSimilarly for problem 2, the auth plugin sorts this out, there is a token within the plugin that is used for requests.  This negates the need for all those horrible cinderclient context hacks. \n\nRetries are a known problem throughout all of OpenStack, however we can't pass a user_id and password to cinder from nova because this is the user's data - and nova never knows the user's password.", 
            "date_created": "2014-12-11 22:28:04.036763+00:00", 
            "author": "https://api.launchpad.net/1.0/~jamielennox"
        }, 
        {
            "content": "Looks to me like the changes referenced by Jaime address the issues on the nova side. As for cinderclient... It is great that nova switched to using cinderclient.client.SessionClient, but there remain a bunch of issues with cinderclient.client.HTTPClient which will affect other things that have not made that switch. For HTTPClient cases, we lack a way to pass an auth_token in on the __init__, which led to nova's horrible hack of setting it after the fact (before it switched to using sessions). HTTPClient should also stop requiring auth_url be passed in when retries is None or 0. It's also concerning that HTTPClient's authenticate() method doesn't support keystone v3. Since https://review.openstack.org/#/c/95305/ purports to add keystone v3 support to cinderclient, but didn't address that method, I assume whoever wrote that expects SessionClient to be used instead of HTTPClient when using keystone v3. That seems like an invalid assumption, though, or at least something that should be checked and a nice error returned in the event that keystone v3 was tried.", 
            "date_created": "2015-02-23 18:13:07.839705+00:00", 
            "author": "https://api.launchpad.net/1.0/~edmondsw"
        }, 
        {
            "content": "I opened a separate defect for cinderclient (https://bugs.launchpad.net/python-cinderclient/+bug/1424763) since that doesn't really seem to fit here. I think this one can probably be closed out, given the changes that have already gone into nova addressing the original issue, and the new cinderclient bug used to track what remains there.", 
            "date_created": "2015-02-23 18:29:31.024506+00:00", 
            "author": "https://api.launchpad.net/1.0/~edmondsw"
        }, 
        {
            "content": "Closing stale bug. This has be Incomplete status for over 90 days. If this is still an issue please reopen.", 
            "date_created": "2016-10-07 16:59:44.651503+00:00", 
            "author": "https://api.launchpad.net/1.0/~sean-mcginnis"
        }
    ], 
    "closed": "2015-04-10 09:19:26.066214+00:00"
}
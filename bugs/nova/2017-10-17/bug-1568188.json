{
    "status": "Opinion", 
    "last_updated": "2016-04-11 18:46:28.511594+00:00", 
    "description": "The feature track instance change introduced in KILO has performance issue when handling larger env when hypervisor count > 300.\n\nThe scheduler is still very slow even scheduler_tracks_instance_changes=False because every scheduling will invoke host_manager.get_all_host_states  and will invoke _add_instance_info for every host.\n\nPlease adding one line to respect tracks_instance_change.\nclass HostManager(BaseHostManager):\n    ....\n    def get_all_host_states(self, context):\n            ....\n            if self. tracks_instance_changes:\n                self._add_instance_info(context, compute, host_state)\n            ....", 
    "tags": [
        "scheduler"
    ], 
    "importance": "Undecided", 
    "heat": 12, 
    "link": "https://bugs.launchpad.net/nova/+bug/1568188", 
    "owner": "None", 
    "id": 1568188, 
    "index": 7416, 
    "openned": "2016-04-08 23:07:28.523991+00:00", 
    "created": "2016-04-08 23:07:28.523991+00:00", 
    "title": "Scheduler should respect the setting of scheduler_tracks_instance_changes", 
    "comments": [
        {
            "content": "The feature track instance change introduced in KILO has performance issue when handling larger env when hypervisor count > 300.\n\nThe scheduler is still very slow even scheduler_tracks_instance_changes=False because every scheduling will invoke host_manager.get_all_host_states  and will invoke _add_instance_info for every host.\n\nPlease adding one line to respect tracks_instance_change.\nclass HostManager(BaseHostManager):\n    ....\n    def get_all_host_states(self, context):\n            ....\n            if self. tracks_instance_changes:\n                self._add_instance_info(context, compute, host_state)\n            ....", 
            "date_created": "2016-04-08 23:07:28.523991+00:00", 
            "author": "https://api.launchpad.net/1.0/~wangfengatustc"
        }, 
        {
            "content": "That's a design discussion IMHO, not really a bug. In case you want to have a better performance because of the DB queries, please use the CachingScheduler instead of the FilterScheduler.\n\nThe CachingScheduler is good for not calling by every request the host states.\n", 
            "date_created": "2016-04-11 09:54:16.407181+00:00", 
            "author": "https://api.launchpad.net/1.0/~sylvain-bauza"
        }, 
        {
            "content": "Our scheduler was based on CachingScheduler but it is a bug when we try to tune off the option tracks_instance_change.\n\nWhen turn off tracks_instance_change:\n1. Scheduler will NOT build up _instance_info dict when startup.\n2. Compute will NOT send sync_instance_info to scheduler via message queue.\n\nThe problem is when turn off tracks_instance_change, using CachingScheduler, before the first call completed(for large env, it will take 5-10 minutes), all scheduling request will have cache-misses and will query database page by page to build up _instance_info which cause scheduler will not available in beginning few hours(when using eventlet, duplicated IO operation will delay first call a lot when operating in large env)\n\nIn case we are NOT using tracks_instance_change, why still need to build up _instance_info for every scheduling if not cached?\n\nMy recommended fix is to have host_manager.get_all_host_states respect the option and do NOT build _instance_info as it does in _init phase.\n\n", 
            "date_created": "2016-04-11 18:46:27.828436+00:00", 
            "author": "https://api.launchpad.net/1.0/~wangfengatustc"
        }
    ], 
    "closed": "2016-04-11 09:54:22.712510+00:00"
}
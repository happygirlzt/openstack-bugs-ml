{
    "status": "Expired", 
    "last_updated": "2016-07-05 09:55:30.447860+00:00", 
    "description": "Ironic nodes can only be assigned to a single instances. So resource allocation is \"all or nothing\" - i.e. if an instance is spawned on a node all the resources become unavailable no mater how much was stated in the flavor used. The view of the resource tracker does not match this behavior, leading to attempts to spawn instances that can not be accommodated.\n\nMore specifically, when an instance is sent to a host manager to build (in ComputeManager.build_and_run_instance()) the resource tracker for a target node will test to see if the node has sufficient resources to accept the instance (in ResourceTracker.instance_claim()). This test checks to see if the amount of resource available on the host (ram, disk, cpu, etc.) is more than the amount requested. If the instance passes this test, the resource tracker will deduct the amount of resource requested from the amount that is available. This may leave a lesser amount still available.\n\nIf there is a subsequent instance sent for that node, the resource tracker will accept it if the amount of resource it requests is less than the remaining amount available.\n\nIn ironic, spawning an instance will result in no resources left available on that host. So the resource tracker has the wrong view of how much resource is available at the node.\n\nNote that the ironic driver is complemented by an ironic version of the host manager at the scheduler that does do the right thing for ironic in its consume method. However, its values are overridden by those retrieved from the resource tracker, so it is overridden by the values provided by the resource tracker.\n\nAlso note that the get_available_resource() method on the ironic virt driver returns the correct resource availability to the resource tracker, but the resource tracker only uses the resource totals and recalculates the availability, thus overriding the values from the driver as well.\n\nResource tracking can only work with ironic if the exact match filters are used. In which case it works by coincidence. The resource tracker resource consumption should be specialised to deal with ironic nodes correctly.", 
    "tags": [
        "ironic", 
        "scheduler"
    ], 
    "importance": "Undecided", 
    "heat": 12, 
    "link": "https://bugs.launchpad.net/nova/+bug/1402658", 
    "owner": "None", 
    "id": 1402658, 
    "index": 6593, 
    "openned": "2014-12-15 13:15:14.094629+00:00", 
    "created": "2014-12-15 13:15:14.094629+00:00", 
    "title": "resource tracking is incorrect for ironic", 
    "comments": [
        {
            "content": "Ironic nodes can only be assigned to a single instances. So resource allocation is \"all or nothing\" - i.e. if an instance is spawned on a node all the resources become unavailable no mater how much was stated in the flavor used. The view of the resource tracker does not match this behavior, leading to attempts to spawn instances that can not be accommodated.\n\nMore specifically, when an instance is sent to a host manager to spawn, the resource tracker for a target node will test to see if the node has sufficient resources to accept the instance. This test checks to see if the amount of resource available on the host (ram, disk, cpu, etc.) is more than the amount requested. If the instance passes this test, the resource tracker will deduct the amount of resource requested from the amount that is available. This may leave a lesser amount still available.\n\nIf there is a subsequent instance sent for that node, the resource tracker will accept it if the amount of resource it requests is less than the remaining amount available.\n\nIn ironic, spawning an instance will result in no resources left available on that host. So the resource tracker has the wrong view of how much resource is available at the node.\n\nNote that the ironic driver is complemented by an ironic version of the host manager at the scheduler that does do the right thing for ironic in its consume method. However, its values are overridden by those retrieved from the resource tracker, so it is overridden by the values provided by the resource tracker.\n\nAlso, the get_available_resource() method on the ironic virt driver returns the correct resource availability to the resource tracker, but the resource tracker only uses the resource totals and recalculates the availability, thus overriding the values from the driver as well.\n\nResource tracking can only work with ironic if the exact match filters are used. In which case it works by coincidence. The resource tracker resource consumption should be specialised to deal with ironic nodes correctly.", 
            "date_created": "2014-12-15 13:15:14.094629+00:00", 
            "author": "https://api.launchpad.net/1.0/~pmurray"
        }, 
        {
            "content": "I saw some problem, and I test it, this problem can reproduce.", 
            "date_created": "2015-01-09 06:36:44.215444+00:00", 
            "author": "https://api.launchpad.net/1.0/~xuhj"
        }, 
        {
            "content": "As the discussion in this mail http://lists.openstack.org/pipermail/openstack-dev/2015-January/054083.html\n\nThis can be fixed by https://review.openstack.org/#/c/127610/", 
            "date_created": "2015-01-13 07:43:15.355023+00:00", 
            "author": "https://api.launchpad.net/1.0/~xuhj"
        }, 
        {
            "content": "Wrong spec @alex - https://review.openstack.org/#/c/127610/ is the request object spec. That doesn't deal with how resource availability is calculated. The spec that deals with resources is https://review.openstack.org/#/c/127609/\n\nHowever, the resource objects spec doesn't fix this in itself - it just provides a good place to fix it.", 
            "date_created": "2015-01-13 15:27:51.628601+00:00", 
            "author": "https://api.launchpad.net/1.0/~pmurray"
        }, 
        {
            "content": "This was discussed on 12-Aug at the Ironic Midcycle in Seattle.  It was suggested that this interface return \"Yes there are resources available\" or \"No resources available\" (i.e. -1 or 0), which is sufficient for Ironic scheduling.  This is covered by https://review.openstack.org/#/c/194453/", 
            "date_created": "2015-08-14 18:33:40.890656+00:00", 
            "author": "https://api.launchpad.net/1.0/~mrda"
        }, 
        {
            "content": "Is this bug active, in the sense that the current state of the code reflects the situation?", 
            "date_created": "2016-03-15 15:14:12.351315+00:00", 
            "author": "https://api.launchpad.net/1.0/~cdent"
        }, 
        {
            "content": "This bug should be investigated as I think it's still valid.", 
            "date_created": "2016-03-15 22:44:20.721843+00:00", 
            "author": "https://api.launchpad.net/1.0/~mrda"
        }, 
        {
            "content": "\nThis is an automated cleanup. This bug report has been closed because it\nis older than 18 months and there is no open code change to fix this.\nAfter this time it is unlikely that the circumstances which lead to\nthe observed issue can be reproduced.\n\nIf you can reproduce the bug, please:\n* reopen the bug report (set to status \"New\")\n* AND add the detailed steps to reproduce the issue (if applicable)\n* AND leave a comment \"CONFIRMED FOR: <RELEASE_NAME>\"\n  Only still supported release names are valid (LIBERTY, MITAKA, OCATA, NEWTON).\n  Valid example: CONFIRMED FOR: LIBERTY\n", 
            "date_created": "2016-07-05 09:55:29.831928+00:00", 
            "author": "https://api.launchpad.net/1.0/~mzoeller"
        }
    ], 
    "closed": "2016-07-05 09:55:27.739992+00:00"
}
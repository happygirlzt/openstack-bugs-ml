{
    "status": "Invalid", 
    "last_updated": "2014-02-07 21:48:29.118085+00:00", 
    "description": "Using devstack (master branch) + devstack + docker 0.6.6. What I'm seeing is that when you deploy a VM from a docker based image in glance, then snapshot that VM, the original image becomes non-runnable from a docker perspective.\n\nSteps to repo:\n- push a docker image into glance.. I'm using the centos docker image\n- deploy a vm via nova docker for that image\n- do a snapshot of the vm you just created via nova\n- try to deploy the initial image again\n--> fails\n\nWhat appears to be happening is that the snapshot process works (I see a new image). However the initial base image in glance no longer has a name. So after you snapshot the VM, the image that VM was created from now looks like this in glance.\n\nglance before snapshot (I can deploy this one):\n| f4034eef-cac6-4059-b3f1-c3b080bc70e4 | centos:latest           | raw         | docker           | 97706298\n\nglance after snapshot (same image -- can't deploy this):\n| f4034eef-cac6-4059-b3f1-c3b080bc70e4 | None                    | raw         | docker           | 97706298\n\n\nWhen I then try to deploy the initial image the docker.log has, the VM deploy fails. I see this in docker.log:\n\n2013/11/07 15:20:43 GET /v1.4/images/198.1.0.9:5042/None/json\n[error] api.go:1025 Error: No such image: 198.1.0.9:5042/None\n[error] api.go:79 HTTP Error: statusCode=404 No such image: 198.1.0.9:5042/None\n[debug] api.go:999 Calling POST /containers/create\n2013/11/07 15:20:43 POST /v1.4/containers/create\n[error] api.go:1025 Error: No such image: 198.1.0.9:5042/None (tag: latest)\n[error] api.go:79 HTTP Error: statusCode=404 No such image: 198.1.0.9:5042/None (tag: latest)\n[debug] api.go:999 Calling POST /images/create\n2013/11/07 15:20:43 POST /v1.4/images/create?fromImage=198.1.0.9&tag=5042/None\n[error] api.go:1025 Error: Invalid repository name (ex: \"registry.domain.tld/myrepos\")\n[error] api.go:79 HTTP Error: statusCode=500 Invalid repository name (ex: \"registry.domain.tld/myrepos\")\n\n\nAfter the fact I do see my image still in docker:\n\n198.1.0.9:5042/centos             latest              539c0211cd76        7 months ago        322.1 MB (virt\n\n\nSo in summary, snapshot is hosing up the VM's image... \n\nLet me also note that with the current way the docker virt driver works, you cannot easily use the novaclient for snapshotting.\n\nFor example some py code like this:\n\nimage_uuid = novaclient.servers.create_image(server, new_image_name)\n\nworks fine with non-docker snapshots -- but with docker that image_uuid does not exist. This is really a pain for those of us trying to integrate with docker virt.", 
    "tags": [
        "docker"
    ], 
    "importance": "Undecided", 
    "heat": 14, 
    "link": "https://bugs.launchpad.net/nova/+bug/1249102", 
    "owner": "None", 
    "id": 1249102, 
    "index": 5536, 
    "openned": "2013-11-07 21:35:16.855874+00:00", 
    "created": "2013-11-07 21:35:16.855874+00:00", 
    "title": "nova docker - snapshotting a vm renders image non-deployable", 
    "comments": [
        {
            "content": "Using devstack (master branch) + devstack + docker 0.6.6. What I'm seeing is that when you deploy a VM from a docker based image in glance, then snapshot that VM, the original image becomes non-runnable from a docker perspective.\n\nSteps to repo:\n- push a docker image into glance.. I'm using the centos docker image\n- deploy a vm via nova docker for that image\n- do a snapshot of the vm you just created via nova\n- try to deploy the initial image again\n--> fails\n\nWhat appears to be happening is that the snapshot process works (I see a new image). However the initial base image in glance no longer has a name. So after you snapshot the VM, the image that VM was created from now looks like this in glance.\n\nglance before snapshot (I can deploy this one):\n| f4034eef-cac6-4059-b3f1-c3b080bc70e4 | centos:latest           | raw         | docker           | 97706298\n\nglance after snapshot (same image -- can't deploy this):\n| f4034eef-cac6-4059-b3f1-c3b080bc70e4 | None                    | raw         | docker           | 97706298\n\n\nWhen I then try to deploy the initial image the docker.log has, the VM deploy fails. I see this in docker.log:\n\n2013/11/07 15:20:43 GET /v1.4/images/198.1.0.9:5042/None/json\n[error] api.go:1025 Error: No such image: 198.1.0.9:5042/None\n[error] api.go:79 HTTP Error: statusCode=404 No such image: 198.1.0.9:5042/None\n[debug] api.go:999 Calling POST /containers/create\n2013/11/07 15:20:43 POST /v1.4/containers/create\n[error] api.go:1025 Error: No such image: 198.1.0.9:5042/None (tag: latest)\n[error] api.go:79 HTTP Error: statusCode=404 No such image: 198.1.0.9:5042/None (tag: latest)\n[debug] api.go:999 Calling POST /images/create\n2013/11/07 15:20:43 POST /v1.4/images/create?fromImage=198.1.0.9&tag=5042/None\n[error] api.go:1025 Error: Invalid repository name (ex: \"registry.domain.tld/myrepos\")\n[error] api.go:79 HTTP Error: statusCode=500 Invalid repository name (ex: \"registry.domain.tld/myrepos\")\n\n\nAfter the fact I do see my image still in docker:\n\n198.1.0.9:5042/centos             latest              539c0211cd76        7 months ago        322.1 MB (virt\n\n\nSo in summary, snapshot is hosing up the VM's image... \n\nLet me also note that with the current way the docker virt driver works, you cannot easily use the novaclient for snapshotting.\n\nFor example some py code like this:\n\nimage_uuid = novaclient.servers.create_image(server, new_image_name)\n\nworks fine with non-docker snapshots -- but with docker that image_uuid does not exist. This is really a pain for those of us trying to integrate with docker virt.", 
            "date_created": "2013-11-07 21:35:16.855874+00:00", 
            "author": "https://api.launchpad.net/1.0/~boden"
        }, 
        {
            "content": "I believe that is a bug of the docker registry.  It seems like that the docker-registry deletes the Tag of any container up the hierarchy.\n\nEasy steps to reproduce:\n1. Upload the busybox image to glance (via docker_registry)\n2. Show glance images and verify busybox:latest is visible. Remember image ID.\n3. Build a new container derived from busybox (simple Dockerfile, just add a txt file or similar).\n4. Tag the new image busybox_modified and upload to glance (via docker_registry)\n5. Show glance images and verify busybox_modifed:latest is visible.\n6. BUG: busybox:latest tag/label disappeared. Image is still present (check ID)\n\n\n\n\n", 
            "date_created": "2014-01-13 21:59:55.365550+00:00", 
            "author": "https://api.launchpad.net/1.0/~daniel-kuffner"
        }, 
        {
            "content": "Submitted a bug: https://github.com/dotcloud/docker-registry/issues/193", 
            "date_created": "2014-01-13 22:04:47.836604+00:00", 
            "author": "https://api.launchpad.net/1.0/~daniel-kuffner"
        }, 
        {
            "content": "Closing since the bug appears to be an upstream docker bug", 
            "date_created": "2014-02-07 21:48:11.939565+00:00", 
            "author": "https://api.launchpad.net/1.0/~russellb"
        }
    ], 
    "closed": "2014-02-07 21:48:27.060516+00:00"
}
{
    "status": "Fix Released", 
    "last_updated": "2012-04-05 11:08:24.120472+00:00", 
    "description": "network_get_all_by_host in the sqlalchemy api should return entries were there is a fixed_ip on that host as well. Since the FK's got removed, this query no longer returns all the right rows.\n\nProposed:\n\n\n$ git diff\ndiff --git a/nova/db/sqlalchemy/api.py b/nova/db/sqlalchemy/api.py\nindex 2136dbd..3544023 100644\n--- a/nova/db/sqlalchemy/api.py\n+++ b/nova/db/sqlalchemy/api.py\n@@ -2067,11 +2067,15 @@ def network_get_all_by_instance(context, instance_id):\n \n @require_admin_context\n def network_get_all_by_host(context, host):\n+    session = get_session()\n+    fixed_ip_query = model_query(context, models.FixedIp.network_id,\n+                                 session=session).\\\n+                        filter(models.FixedIp.host == host)\n     # NOTE(vish): return networks that have host set\n     #             or that have a fixed ip with host set\n     host_filter = or_(models.Network.host == host,\n-                      models.FixedIp.host == host)\n-    return _network_get_query(context).\\\n+                      models.Network.id.in_(fixed_ip_query.subquery()))\n+    return _network_get_query(context, session=session).\\\n                        filter(host_filter).\\\n                        all()\n\n\nWhich emits the following query:\n\n\nSELECT\n    networks.created_at AS networks_created_at,\n    networks.updated_at AS networks_updated_at,\n    networks.deleted_at AS networks_deleted_at,\n    networks.deleted AS networks_deleted,\n    networks.id AS networks_id,\n    networks.label AS networks_label,\n    networks.injected AS networks_injected,\n    networks.cidr AS networks_cidr,\n    networks.cidr_v6 AS networks_cidr_v6,\n    networks.multi_host AS networks_multi_host,\n    networks.gateway_v6 AS networks_gateway_v6,\n    networks.netmask_v6 AS networks_netmask_v6,\n    networks.netmask AS networks_netmask,\n    networks.bridge AS networks_bridge,\n    networks.bridge_interface AS networks_bridge_interface,\n    networks.gateway AS networks_gateway,\n    networks.broadcast AS networks_broadcast,\n    networks.dns1 AS networks_dns1,\n    networks.dns2 AS networks_dns2,\n    networks.vlan AS networks_vlan,\n    networks.vpn_public_address AS networks_vpn_public_address,\n    networks.vpn_public_port AS networks_vpn_public_port,\n    networks.vpn_private_address AS networks_vpn_private_address,\n    networks.dhcp_start AS networks_dhcp_start,\n    networks.rxtx_base AS networks_rxtx_base,\n    networks.project_id AS networks_project_id,\n    networks.priority AS networks_priority,\n    networks.host AS networks_host,\n    networks.uuid AS networks_uuid\nFROM networks\nWHERE networks.deleted = :deleted_1\nAND (\n    networks.host = :host_1 OR\n    networks.id IN (SELECT fixed_ips.network_id\n                    FROM fixed_ips\n                    WHERE fixed_ips.deleted = :deleted_2\n                    AND fixed_ips.host = :host_2))", 
    "tags": [], 
    "importance": "Undecided", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/954341", 
    "owner": "https://api.launchpad.net/1.0/~jason-koelker", 
    "id": 954341, 
    "index": 3954, 
    "openned": "2012-03-13 19:14:00.303447+00:00", 
    "created": "2012-03-13 19:14:00.303447+00:00", 
    "title": "network_get_all_by_host does not return the right networks", 
    "comments": [
        {
            "content": "network_get_all_by_host in the sqlalchemy api should return entries were there is a fixed_ip on that host as well. Since the FK's got removed, this query no longer returns all the right rows.\n\nProposed:\n\n\n$ git diff\ndiff --git a/nova/db/sqlalchemy/api.py b/nova/db/sqlalchemy/api.py\nindex 2136dbd..3544023 100644\n--- a/nova/db/sqlalchemy/api.py\n+++ b/nova/db/sqlalchemy/api.py\n@@ -2067,11 +2067,15 @@ def network_get_all_by_instance(context, instance_id):\n \n @require_admin_context\n def network_get_all_by_host(context, host):\n+    session = get_session()\n+    fixed_ip_query = model_query(context, models.FixedIp.network_id,\n+                                 session=session).\\\n+                        filter(models.FixedIp.host == host)\n     # NOTE(vish): return networks that have host set\n     #             or that have a fixed ip with host set\n     host_filter = or_(models.Network.host == host,\n-                      models.FixedIp.host == host)\n-    return _network_get_query(context).\\\n+                      models.Network.id.in_(fixed_ip_query.subquery()))\n+    return _network_get_query(context, session=session).\\\n                        filter(host_filter).\\\n                        all()\n\n\nWhich emits the following query:\n\n\nSELECT\n    networks.created_at AS networks_created_at,\n    networks.updated_at AS networks_updated_at,\n    networks.deleted_at AS networks_deleted_at,\n    networks.deleted AS networks_deleted,\n    networks.id AS networks_id,\n    networks.label AS networks_label,\n    networks.injected AS networks_injected,\n    networks.cidr AS networks_cidr,\n    networks.cidr_v6 AS networks_cidr_v6,\n    networks.multi_host AS networks_multi_host,\n    networks.gateway_v6 AS networks_gateway_v6,\n    networks.netmask_v6 AS networks_netmask_v6,\n    networks.netmask AS networks_netmask,\n    networks.bridge AS networks_bridge,\n    networks.bridge_interface AS networks_bridge_interface,\n    networks.gateway AS networks_gateway,\n    networks.broadcast AS networks_broadcast,\n    networks.dns1 AS networks_dns1,\n    networks.dns2 AS networks_dns2,\n    networks.vlan AS networks_vlan,\n    networks.vpn_public_address AS networks_vpn_public_address,\n    networks.vpn_public_port AS networks_vpn_public_port,\n    networks.vpn_private_address AS networks_vpn_private_address,\n    networks.dhcp_start AS networks_dhcp_start,\n    networks.rxtx_base AS networks_rxtx_base,\n    networks.project_id AS networks_project_id,\n    networks.priority AS networks_priority,\n    networks.host AS networks_host,\n    networks.uuid AS networks_uuid\nFROM networks\nWHERE networks.deleted = :deleted_1\nAND (\n    networks.host = :host_1 OR\n    networks.id IN (SELECT fixed_ips.network_id\n                    FROM fixed_ips\n                    WHERE fixed_ips.deleted = :deleted_2\n                    AND fixed_ips.host = :host_2))", 
            "date_created": "2012-03-13 19:14:00.303447+00:00", 
            "author": "https://api.launchpad.net/1.0/~jason-koelker"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/5282", 
            "date_created": "2012-03-13 19:16:48.013106+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/5282\nCommitted: http://github.com/openstack/nova/commit/c8ad7f7c406b4684391bfd5aa0b309b4d9dafe70\nSubmitter: Jenkins\nBranch:    master\n\ncommit c8ad7f7c406b4684391bfd5aa0b309b4d9dafe70\nAuthor: Jason K\u00f6lker <email address hidden>\nDate:   Tue Mar 13 14:14:36 2012 -0500\n\n    Use a FixedIp subquery to find networks by host\n    \n    * Fixes LP954341\n    * The FK removals missed this FK reference. Updated function to use\n        a subquery in the filter\n    \n    Change-Id: Ia61d6536deb78e1aa16c5a94956bf919aa3356ba\n", 
            "date_created": "2012-03-13 20:51:30.355102+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ], 
    "closed": "2012-03-20 08:44:15.768306+00:00"
}
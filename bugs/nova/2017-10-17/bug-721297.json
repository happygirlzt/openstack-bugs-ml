{
    "status": "Fix Released", 
    "last_updated": "2011-04-21 07:13:59.753111+00:00", 
    "description": "Hi, when we use the AWS API and call the describe instances method of the API it returns all the information for the instance but an error regarding the date format is also returned:\n\nParser exception:\n\n734 [main] DEBUG httpclient.wire.content  - << \"InstancesResponse xmlns=\"http://ec2.amazonaws.com/doc/2010-06-15/\"><requestId>HA3TBNLQJE98TLK6WZQG</requestId><reservationSet><item><ownerId>testing</ownerId><groupSet><item><groupId>default</groupId></item></groupSet><reservationId>r-7hqrogwf</reservationId><instancesSet><item><displayDescription/><displayName>Server 1375</displayName><keyName>None (testing, bsa5954)</keyName><instanceId>i-0000055f</instanceId><instanceState><code>1</code><name>running</name></instanceState><publicDnsName/><imageId>ami-a03ndz0q</imageId><productCodesSet/><privateDnsName>10.68.35.28</privateDnsName><dnsName>10.68.35.28</dnsName><launchTime>2011-02-18 13:44:04</launchTime><placement><availabilityZone>nova</availabilityZone></placement><amiLaunchIndex>0</amiLaunchIndex><instanceType>m1.small</instanceType></item></instancesSet></item></reservationSet></DescribeInstancesResponse>\"\n766 [main] ERROR com.amazonaws.transform.SimpleTypeStaxUnmarshallers  - Unable to parse date '2011-02-18 13:44:04':  Unparseable date: \"2011-02-18 13:44:04\"\njava.text.ParseException: Unparseable date: \"2011-02-18 13:44:04\"\n\tat java.text.DateFormat.parse(DateFormat.java:337)\n\tat com.amazonaws.util.DateUtils.parseIso8601Date(DateUtils.java:75)\n\tat com.amazonaws.transform.SimpleTypeStaxUnmarshallers$DateStaxUnmarshaller.unmarshall(SimpleTypeStaxUnmarshallers.java:162)\n\tat com.amazonaws.services.ec2.model.transform.InstanceStaxUnmarshaller.unmarshall(InstanceStaxUnmarshaller.java:91)\n\tat com.amazonaws.services.ec2.model.transform.ReservationStaxUnmarshaller.unmarshall(ReservationStaxUnmarshaller.java:67)\n\tat com.amazonaws.services.ec2.model.transform.DescribeInstancesResultStaxUnmarshaller.unmarshall(DescribeInstancesResultStaxUnmarshaller.java:51)\n\tat com.amazonaws.services.ec2.model.transform.DescribeInstancesResultStaxUnmarshaller.unmarshall(DescribeInstancesResultStaxUnmarshaller.java:33)\n\tat com.amazonaws.http.StaxResponseHandler.handle(StaxResponseHandler.java:126)\n\tat com.amazonaws.http.StaxResponseHandler.handle(StaxResponseHandler.java:36)\n\tat com.amazonaws.http.HttpClient.handleResponse(HttpClient.java:383)\n\tat com.amazonaws.http.HttpClient.execute(HttpClient.java:157)\n\tat com.amazonaws.services.ec2.AmazonEC2Client.invoke(AmazonEC2Client.java:3639)\n\tat com.amazonaws.services.ec2.AmazonEC2Client.describeInstances(AmazonEC2Client.java:456)\n\tat com.sap.core.cloud.controllers.eucalyptus.EucaImpl.getState(EucaImpl.java:362)\n\tat com.sap.qa.Connect.main(Connect.java:71)\n\nAWS Java SDK client uses the following Data formats:\n\n/** ISO 8601 parser */\n    protected final SimpleDateFormat iso8601DateParser = \n        new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n    \n    /** Alternate ISO 8601 parser without fractional seconds */\n    protected final SimpleDateFormat alternateIo8601DateParser =\n        new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\n\n    /** RFC 822 parser */\n    protected final SimpleDateFormat rfc822DateParser = \n        new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss z\", Locale.US);\n\nAt least one of the two date formats should be kept for the \u201claunchTime\u201d in the sent response:\n\nyyyy-MM-dd'T'HH:mm:ss.SSS'Z'\nor\nyyyy-MM-dd'T'HH:mm:ss'Z'\n\nExample:\n\nIn Amazon, the correct parsable format is:\n\n<launchTime>2010-11-01T08:25:09.771Z</launchTime>\n\nIn OpenStack \u2013 not parsable:\n\n<launchTime>2011-02-14 19:31:41.194843</launchTime>\n<launchTime>2011-02-17 15:22:37</launchTime> \n\nIs this some configuration option that can be configured somewhere, or it is a matter of implementation?\n\nThanks", 
    "tags": [], 
    "importance": "Medium", 
    "heat": 8, 
    "link": "https://bugs.launchpad.net/nova/+bug/721297", 
    "owner": "https://api.launchpad.net/1.0/~ken-pepple", 
    "id": 721297, 
    "index": 2286, 
    "openned": "2011-02-18 14:40:51.365552+00:00", 
    "created": "2011-02-18 14:40:51.365552+00:00", 
    "title": "nova returns wrong date format in AWS API Calls", 
    "comments": [
        {
            "content": "Hi, when we use the AWS API and call the describe instances method of the API it returns all the information for the instance but an error regarding the date format is also returned:\n\nParser exception:\n\n734 [main] DEBUG httpclient.wire.content  - << \"InstancesResponse xmlns=\"http://ec2.amazonaws.com/doc/2010-06-15/\"><requestId>HA3TBNLQJE98TLK6WZQG</requestId><reservationSet><item><ownerId>testing</ownerId><groupSet><item><groupId>default</groupId></item></groupSet><reservationId>r-7hqrogwf</reservationId><instancesSet><item><displayDescription/><displayName>Server 1375</displayName><keyName>None (testing, bsa5954)</keyName><instanceId>i-0000055f</instanceId><instanceState><code>1</code><name>running</name></instanceState><publicDnsName/><imageId>ami-a03ndz0q</imageId><productCodesSet/><privateDnsName>10.68.35.28</privateDnsName><dnsName>10.68.35.28</dnsName><launchTime>2011-02-18 13:44:04</launchTime><placement><availabilityZone>nova</availabilityZone></placement><amiLaunchIndex>0</amiLaunchIndex><instanceType>m1.small</instanceType></item></instancesSet></item></reservationSet></DescribeInstancesResponse>\"\n766 [main] ERROR com.amazonaws.transform.SimpleTypeStaxUnmarshallers  - Unable to parse date '2011-02-18 13:44:04':  Unparseable date: \"2011-02-18 13:44:04\"\njava.text.ParseException: Unparseable date: \"2011-02-18 13:44:04\"\n\tat java.text.DateFormat.parse(DateFormat.java:337)\n\tat com.amazonaws.util.DateUtils.parseIso8601Date(DateUtils.java:75)\n\tat com.amazonaws.transform.SimpleTypeStaxUnmarshallers$DateStaxUnmarshaller.unmarshall(SimpleTypeStaxUnmarshallers.java:162)\n\tat com.amazonaws.services.ec2.model.transform.InstanceStaxUnmarshaller.unmarshall(InstanceStaxUnmarshaller.java:91)\n\tat com.amazonaws.services.ec2.model.transform.ReservationStaxUnmarshaller.unmarshall(ReservationStaxUnmarshaller.java:67)\n\tat com.amazonaws.services.ec2.model.transform.DescribeInstancesResultStaxUnmarshaller.unmarshall(DescribeInstancesResultStaxUnmarshaller.java:51)\n\tat com.amazonaws.services.ec2.model.transform.DescribeInstancesResultStaxUnmarshaller.unmarshall(DescribeInstancesResultStaxUnmarshaller.java:33)\n\tat com.amazonaws.http.StaxResponseHandler.handle(StaxResponseHandler.java:126)\n\tat com.amazonaws.http.StaxResponseHandler.handle(StaxResponseHandler.java:36)\n\tat com.amazonaws.http.HttpClient.handleResponse(HttpClient.java:383)\n\tat com.amazonaws.http.HttpClient.execute(HttpClient.java:157)\n\tat com.amazonaws.services.ec2.AmazonEC2Client.invoke(AmazonEC2Client.java:3639)\n\tat com.amazonaws.services.ec2.AmazonEC2Client.describeInstances(AmazonEC2Client.java:456)\n\tat com.sap.core.cloud.controllers.eucalyptus.EucaImpl.getState(EucaImpl.java:362)\n\tat com.sap.qa.Connect.main(Connect.java:71)\n\nAWS Java SDK client uses the following Data formats:\n\n/** ISO 8601 parser */\n    protected final SimpleDateFormat iso8601DateParser = \n        new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n    \n    /** Alternate ISO 8601 parser without fractional seconds */\n    protected final SimpleDateFormat alternateIo8601DateParser =\n        new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\n\n    /** RFC 822 parser */\n    protected final SimpleDateFormat rfc822DateParser = \n        new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss z\", Locale.US);\n\nAt least one of the two date formats should be kept for the \u201claunchTime\u201d in the sent response:\n\nyyyy-MM-dd'T'HH:mm:ss.SSS'Z'\nor\nyyyy-MM-dd'T'HH:mm:ss'Z'\n\nExample:\n\nIn Amazon, the correct parsable format is:\n\n<launchTime>2010-11-01T08:25:09.771Z</launchTime>\n\nIn OpenStack \u2013 not parsable:\n\n<launchTime>2011-02-14 19:31:41.194843</launchTime>\n<launchTime>2011-02-17 15:22:37</launchTime> \n\nIs this some configuration option that can be configured somewhere, or it is a matter of implementation?\n\nThanks", 
            "date_created": "2011-02-18 14:40:51.365552+00:00", 
            "author": "https://api.launchpad.net/1.0/~bobya"
        }, 
        {
            "content": "I believe this is a matter of implementation. In nova/api/ec2/apirequest.py:166, we _render_data according to the data class:\n\nif isinstance(data, list):\n            for item in data:\n                data_el.appendChild(self._render_data(xml, 'item', item))\n        elif isinstance(data, dict):\n            self._render_dict(xml, data_el, data)\n        elif hasattr(data, '__dict__'):\n            self._render_dict(xml, data_el, data.__dict__)\n        elif isinstance(data, bool):\n            data_el.appendChild(xml.createTextNode(str(data).lower()))\n        elif data != None:\n            data_el.appendChild(xml.createTextNode(str(data)))\n\nHowever, we never actually check to see if the data is a datetime instance (which is what comes out of our database). By adding these two lines (before the final elif date != None):\n\n        elif isinstance(data, datetime.datetime):\n            data_el.appendChild(xml.createTextNode(data.isoformat()))\n\nI believe we will catch _all_ the dates (not sure if there are any others in the responses) and convert them to ISO format.\n\nWe need to add this type of parsing to our integration tests.", 
            "date_created": "2011-02-19 10:03:18.301120+00:00", 
            "author": "https://api.launchpad.net/1.0/~ken-pepple"
        }, 
        {
            "content": "bobya  -- can you pull this branch (https://code.launchpad.net/~ken-pepple/nova/lp721297) and test against your tool ?", 
            "date_created": "2011-02-19 10:06:46.048837+00:00", 
            "author": "https://api.launchpad.net/1.0/~ken-pepple"
        }, 
        {
            "content": "sorry for the verbosity (this was hard to test) ... but I now see iso compliant response in my testing:\n\n2011-02-19 02:17:20,951 DEBUG nova.api.request [-] <?xml version=\"1.0\" ?><DescribeInstancesResponse xmlns=\"http://ec2.amazonaws.com/doc/2009-11-30/\"><requestId>N-L40NGYDKWV2G3NG-KD</requestId><reservationSet><item><ownerId>mtbcal</ownerId><groupSet/><reservationId>r-gle2kkul</reservationId><instancesSet><item><displayDescription/><displayName/><keyName>mykey (mtbcal, None)</keyName><instanceId>i-00000004</instanceId><instanceState><code/><name>scheduling</name></instanceState><publicDnsName/><imageId>ami-5b5mum3v</imageId><productCodesSet/><privateDnsName/><dnsName/><launchTime>2011-02-19T10:13:42</launchTime><placement><availabilityZone>unknown zone</availabilityZone></placement><amiLaunchIndex>0</amiLaunchIndex><instanceType>m1.small</instanceType></item></instancesSet></item><item><ownerId>mtbcal</ownerId><groupSet><item><groupId>default</groupId></item></groupSet><reservationId>r-2ofpbpqz</reservationId><instancesSet><item><displayDescription/><displayName>Server 3</displayName><keyName>mykey (mtbcal, openstack)</keyName><instanceId>i-00000003</instanceId><instanceState><code>1</code><name>running</name></instanceState><publicDnsName/><imageId>ami-5b5mum3v</imageId><productCodesSet/><privateDnsName>172.16.0.3</privateDnsName><dnsName>172.16.0.3</dnsName><launchTime>2011-02-19T10:02:45</launchTime><placement><availabilityZone>nova</availabilityZone></placement><amiLaunchIndex>0</amiLaunchIndex><instanceType>m1.small</instanceType></item></instancesSet></item></reservationSet></DescribeInstancesResponse> from MainProcess (pid=24085) _render_response /home/kpepple/src/nova/lp721297/nova/api/ec2/apirequest.py:150", 
            "date_created": "2011-02-19 10:18:24.433729+00:00", 
            "author": "https://api.launchpad.net/1.0/~ken-pepple"
        }, 
        {
            "content": "Sorry for the delay I will do the testing today and will reply as soon as we are done. Thanks for the fast reply", 
            "date_created": "2011-02-21 08:49:42.578984+00:00", 
            "author": "https://api.launchpad.net/1.0/~bobya"
        }, 
        {
            "content": "Hi Ken,\nwe have tested the fix today but found that python uses the old ISO8601 format that doesn't contain the 'Z' symbol at the end. Unfortunately the parsers in the Amazon java SDK use the new ISO8601 UTC format more information is available here:\nhttp://en.wikipedia.org/wiki/ISO_8601 \nin the UTC section.\nWe couldn't find a way to make python write the 'Z' symbol at the end of a date format. I don't know if you can help with this, but this is the way the Amazon API is written and it will break compatibility with it if it is not fixed.\nThe current fix does really convert the date to ISO format , but in \"Local Time\" not in UTC.", 
            "date_created": "2011-02-21 15:53:08.709504+00:00", 
            "author": "https://api.launchpad.net/1.0/~bobya"
        }, 
        {
            "content": "Ken, this should work: datetime.datetime.utcnow().strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n\n>>> print datetime.datetime.utcnow().strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n2011-02-21T16:12:55Z\n", 
            "date_created": "2011-02-21 16:14:04.441878+00:00", 
            "author": "https://api.launchpad.net/1.0/~jaypipes"
        }, 
        {
            "content": "bobya, jaypipes:\n\nSo I left the 'z'ed off the ISO date on purpose ... although it appears I *may* have been misguided. My rationale:\n\n     when we create the instance record, we create a record with created_at field \n     filled with a date like \"2011-02-21 19:01:45.653573\" (sqlite) which should be\n     localtime not utctime (which would have the \"z\" suffix).\n\nHowever, now that I look at it, we are logging utctime just not calling it that.\n\nLet me investigate whether this is DB dependent or not and then I'll update the bug and re-propose the merge. If we are logging utctime everywhere, it's a trivial change -- i should have something this afternoon PST.\n", 
            "date_created": "2011-02-21 19:13:58.703356+00:00", 
            "author": "https://api.launchpad.net/1.0/~ken-pepple"
        }, 
        {
            "content": "bobya -- \n\nFor the record, i maintain this is a bug in Amazon's implementation, as they define the launchTime as xs:dateTime (http://docs.amazonwebservices.com/AWSEC2/latest/APIReference/index.html?ApiReference-ItemType-RunningInstancesItemType.html) and returning a localtime value (sans 'z'ed) is valid by my reading of http://www.w3.org/TR/xmlschema-2/#dateTime\n\n:)", 
            "date_created": "2011-02-21 19:21:38.986894+00:00", 
            "author": "https://api.launchpad.net/1.0/~ken-pepple"
        }, 
        {
            "content": "Ok, with the fix I just pushed (#705), I now get:\n\n2011-02-21 14:20:25,790 DEBUG nova.api.request [-] <?xml version=\"1.0\" ?><RunInstancesResponse xmlns=\"http://ec2.amazonaws.com/doc/2009-11-30/\"><requestId>IDGIWP-7CJ9292AFG6RP</requestId><ownerId>mtbcal</ownerId><groupSet><item><groupId>default</groupId></item></groupSet><reservationId>r-xgnisy5c</reservationId><instancesSet><item><displayDescription/><displayName>Server 6</displayName><keyName>pk.pem (mtbcal, None)</keyName><instanceId>i-00000006</instanceId><instanceState><code/><name>scheduling</name></instanceState><publicDnsName/><imageId>ami-5b5mum3v</imageId><productCodesSet/><privateDnsName/><dnsName/><launchTime>2011-02-21T22:20:25Z</launchTime><placement><availabilityZone>unknown zone</availabilityZone></placement><amiLaunchIndex>0</amiLaunchIndex><instanceType>m1.small</instanceType></item></instancesSet></RunInstancesResponse> from MainProcess (pid=30279) _render_response /home/kpepple/src/nova/lp721297/nova/api/ec2/apirequest.py:155\n\nwhen i do a euca-run-instance. I believe \"<launchTime>2011-02-21T22:20:25Z</launchTime>\" is the format you need.\n\nI've also added a small test to prevent regressions on this.\n\nCan you test this (need to $lp merge lp:~ken-pepple/nova/lp721297) and report back ? \nIf it doesn't work, can you write  a simple test using that SDK that I can test against ?\n", 
            "date_created": "2011-02-21 22:26:49.544137+00:00", 
            "author": "https://api.launchpad.net/1.0/~ken-pepple"
        }, 
        {
            "content": "Thanks Ken,\nIt is working fine now. I agree to you that this is also a problem with the amazon implementation, which doesn't fully support xs:DateTime.\nI will see if I can report some bug to their implementation.", 
            "date_created": "2011-02-22 08:57:51.306810+00:00", 
            "author": "https://api.launchpad.net/1.0/~bobya"
        }, 
        {
            "content": "Do not set to FixCommitted until the fix is merged into trunk.", 
            "date_created": "2011-02-22 14:09:08.730446+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "ttx, it's been committed twice (#713, #703) :)", 
            "date_created": "2011-02-23 04:12:23.183802+00:00", 
            "author": "https://api.launchpad.net/1.0/~ken-pepple"
        }, 
        {
            "content": "Got lost by branch link, sorry about that", 
            "date_created": "2011-02-23 09:13:22.928728+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }
    ], 
    "closed": "2011-04-21 07:13:58.042532+00:00"
}
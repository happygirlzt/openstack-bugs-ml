{
    "status": "Fix Released", 
    "last_updated": "2017-06-16 17:23:23.450871+00:00", 
    "description": "Description\n===========\n\nShelve/unshelve operations fail when using \"NFV flavors\". This was reported on the mailing list initially.\n\nhttp://lists.openstack.org/pipermail/openstack-dev/2016-May/095631.html\n\nSteps to reproduce\n==================\n\n1. Create a flavor with 'hw:numa_nodes=2', 'hw:cpu_policy=dedicated' and 'hw:mempage_size=large'\n2. Configure Tempest to use this new flavor\n3. Run Tempest tests\n\nExpected result\n===============\n\nAll tests will pass.\n\nActual result\n=============\n\nThe shelve/unshelve Tempest tests always result in a timeout exception \nbeing raised, looking similar to the following, from [1]:\n\n    Traceback (most recent call last):\n      File \"tempest/api/compute/base.py\", line 166, in server_check_teardown\n    cls.server_id, 'ACTIVE')\n      File \"tempest/common/waiters.py\", line 95, in wait_for_server_status\n        raise exceptions.TimeoutException(message)2016-05-22 22:25:30.697 13974 ERROR tempest.api.compute.base TimeoutException: Request timed out\n    Details: (ServerActionsTestJSON:tearDown) Server cae6fd47-0968-4922-a03e-3f2872e4eb52 failed to reach ACTIVE status and task state \"None\" within the required time (196 s). Current status: SHELVED_OFFLOADED. Current task state: None.\n\nThe following errors are raised in the compute logs:\n\n    Traceback (most recent call last):\n      File \"/opt/stack/new/nova/nova/compute/manager.py\", line 4230, in _unshelve_instance\n        with rt.instance_claim(context, instance, limits):\n      File \"/usr/local/lib/python2.7/dist-packages/oslo_concurrency/lockutils.py\", line 271, in inner\n        return f(*args, **kwargs)\n      File \"/opt/stack/new/nova/nova/compute/resource_tracker.py\", line 151, in instance_claim\n    self._update_usage_from_instance(context, instance_ref)\n      File \"/opt/stack/new/nova/nova/compute/resource_tracker.py\", line 827, in _update_usage_from_instance\n        self._update_usage(instance, sign=sign)\n      File \"/opt/stack/new/nova/nova/compute/resource_tracker.py\", line 666, in _update_usage\n        self.compute_node, usage, free)\n      File \"/opt/stack/new/nova/nova/virt/hardware.py\", line 1482, in get_host_numa_usage_from_instance\n        host_numa_topology, instance_numa_topology, free=free))\n      File \"/opt/stack/new/nova/nova/virt/hardware.py\", line 1348, in numa_usage_from_instances\n        newcell.unpin_cpus(pinned_cpus)\n      File \"/opt/stack/new/nova/nova/objects/numa.py\", line 94, in unpin_cpus\n        pinned=list(self.pinned_cpus))\n    CPUPinningInvalid: Cannot pin/unpin cpus [6] from the following pinned set [0, 2, 4]\n\n[1] http://intel-openstack-ci-logs.ovh/86/319686/1/check/tempest-dsvm-full-nfv/b463722/testr_results.html.gz\n\nEnvironment\n===========\n\n1. Exact version of OpenStack you are running. See the following\n\nCommit '25fdf64'.", 
    "tags": [], 
    "importance": "Undecided", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1587386", 
    "owner": "https://api.launchpad.net/1.0/~stephenfinucane", 
    "id": 1587386, 
    "index": 7521, 
    "openned": "2016-05-31 09:55:15.821454+00:00", 
    "created": "2016-05-31 09:55:15.821454+00:00", 
    "title": "Unshelve results in duplicated resource deallocated", 
    "comments": [
        {
            "content": "Description\n===========\n\nShelve/unshelve operations fail when using \"NFV flavors\". This was reported on the mailing list initially.\n\nhttp://lists.openstack.org/pipermail/openstack-dev/2016-May/095631.html\n\nSteps to reproduce\n==================\n\n1. Create a flavor with 'hw:numa_nodes=2', 'hw:cpu_policy=dedicated' and 'hw:mempage_size=large'\n2. Configure Tempest to use this new flavor\n3. Run Tempest tests\n\nExpected result\n===============\n\nAll tests will pass.\n\nActual result\n=============\n\nThe shelve/unshelve Tempest tests always result in a timeout exception \nbeing raised, looking similar to the following, from [1]:\n\n    Traceback (most recent call last):\n      File \"tempest/api/compute/base.py\", line 166, in server_check_teardown\n    cls.server_id, 'ACTIVE')\n      File \"tempest/common/waiters.py\", line 95, in wait_for_server_status\n        raise exceptions.TimeoutException(message)2016-05-22 22:25:30.697 13974 ERROR tempest.api.compute.base TimeoutException: Request timed out\n    Details: (ServerActionsTestJSON:tearDown) Server cae6fd47-0968-4922-a03e-3f2872e4eb52 failed to reach ACTIVE status and task state \"None\" within the required time (196 s). Current status: SHELVED_OFFLOADED. Current task state: None.\n\nThe following errors are raised in the compute logs:\n\n    Traceback (most recent call last):\n      File \"/opt/stack/new/nova/nova/compute/manager.py\", line 4230, in _unshelve_instance\n        with rt.instance_claim(context, instance, limits):\n      File \"/usr/local/lib/python2.7/dist-packages/oslo_concurrency/lockutils.py\", line 271, in inner\n        return f(*args, **kwargs)\n      File \"/opt/stack/new/nova/nova/compute/resource_tracker.py\", line 151, in instance_claim\n    self._update_usage_from_instance(context, instance_ref)\n      File \"/opt/stack/new/nova/nova/compute/resource_tracker.py\", line 827, in _update_usage_from_instance\n        self._update_usage(instance, sign=sign)\n      File \"/opt/stack/new/nova/nova/compute/resource_tracker.py\", line 666, in _update_usage\n        self.compute_node, usage, free)\n      File \"/opt/stack/new/nova/nova/virt/hardware.py\", line 1482, in get_host_numa_usage_from_instance\n        host_numa_topology, instance_numa_topology, free=free))\n      File \"/opt/stack/new/nova/nova/virt/hardware.py\", line 1348, in numa_usage_from_instances\n        newcell.unpin_cpus(pinned_cpus)\n      File \"/opt/stack/new/nova/nova/objects/numa.py\", line 94, in unpin_cpus\n        pinned=list(self.pinned_cpus))\n    CPUPinningInvalid: Cannot pin/unpin cpus [6] from the following pinned set [0, 2, 4]\n\n[1] http://intel-openstack-ci-logs.ovh/86/319686/1/check/tempest-dsvm-full-nfv/b463722/testr_results.html.gz\n\nEnvironment\n===========\n\n1. Exact version of OpenStack you are running. See the following\n\nCommit '25fdf64'.", 
            "date_created": "2016-05-31 09:55:15.821454+00:00", 
            "author": "https://api.launchpad.net/1.0/~stephenfinucane"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/323269", 
            "date_created": "2016-05-31 10:06:24.264347+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/323269\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=f1320a7c2debf127a93773046adffb80563fd20b\nSubmitter: Jenkins\nBranch:    master\n\ncommit f1320a7c2debf127a93773046adffb80563fd20b\nAuthor: Stephen Finucane <email address hidden>\nDate:   Mon May 30 16:03:35 2016 +0100\n\n    Evaluate 'task_state' in resource (de)allocation\n    \n    There are two types of VM states associated with shelving. The first,\n    'shelved' indicates that the VM has been powered off but the resources\n    remain allocated on the hypervisor. The second, 'shelved_offloaded',\n    indicates that the VM has been powered off and the resources freed.\n    When \"unshelving\" VMs in the latter state, the VM state does not change\n    from 'shelved_offloaded' until some time after the VM has been\n    \"unshelved\".\n    \n    Change I83a5f06 introduced a change that allowed for deallocation of\n    resources when they were set to the 'shelved_offloaded' state. However,\n    the resource (de)allocation code path assumes any VM with a state of\n    'shelved_offloaded' should have resources deallocated from it, rather\n    than allocated to it. As the VM state has not changed when this code\n    path is executed, resources are incorrectly deallocated from the\n    instance twice.\n    \n    Enhance the aformentioned check to account for task state in addition to\n    VM state. This ensures a VM that's still in 'shelved_offloaded' state,\n    but is in fact being unshelved, does not trigger deallocation.\n    \n    Change-Id: Ie2e7b91937fc3d61bb1197fffc3549bebc65e8aa\n    Signed-off-by: Stephen Finucane <email address hidden>\n    Resolves-bug: #1587386\n    Related-bug: #1545675\n", 
            "date_created": "2016-06-28 16:07:31.802783+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Fix proposed to branch: stable/mitaka\nReview: https://review.openstack.org/337107", 
            "date_created": "2016-07-04 10:04:42.405274+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/337107\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=2703a3d80bcbd49eaafaae624289d00c521b5192\nSubmitter: Jenkins\nBranch:    stable/mitaka\n\ncommit 2703a3d80bcbd49eaafaae624289d00c521b5192\nAuthor: Stephen Finucane <email address hidden>\nDate:   Mon May 30 16:03:35 2016 +0100\n\n    Evaluate 'task_state' in resource (de)allocation\n    \n    There are two types of VM states associated with shelving. The first,\n    'shelved' indicates that the VM has been powered off but the resources\n    remain allocated on the hypervisor. The second, 'shelved_offloaded',\n    indicates that the VM has been powered off and the resources freed.\n    When \"unshelving\" VMs in the latter state, the VM state does not change\n    from 'shelved_offloaded' until some time after the VM has been\n    \"unshelved\".\n    \n    Change I83a5f06 introduced a change that allowed for deallocation of\n    resources when they were set to the 'shelved_offloaded' state. However,\n    the resource (de)allocation code path assumes any VM with a state of\n    'shelved_offloaded' should have resources deallocated from it, rather\n    than allocated to it. As the VM state has not changed when this code\n    path is executed, resources are incorrectly deallocated from the\n    instance twice.\n    \n    Enhance the aformentioned check to account for task state in addition to\n    VM state. This ensures a VM that's still in 'shelved_offloaded' state,\n    but is in fact being unshelved, does not trigger deallocation.\n    \n    Change-Id: Ie2e7b91937fc3d61bb1197fffc3549bebc65e8aa\n    Signed-off-by: Stephen Finucane <email address hidden>\n    Resolves-bug: #1587386\n    Related-bug: #1545675\n    (cherry picked from commit f1320a7c2debf127a93773046adffb80563fd20b)\n", 
            "date_created": "2016-08-08 17:46:08.598732+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ], 
    "closed": "2016-06-28 16:07:28.821283+00:00"
}
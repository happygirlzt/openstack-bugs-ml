{
    "status": "Won't Fix", 
    "last_updated": "2016-05-17 15:44:01.906832+00:00", 
    "description": "When a NovaObject primitive is deserialized the object version is checked and an IncompatibleObjectVersion exception is raised if the serialized primitive is labelled with a version that is not known locally. The exception indicates what version is known locally, and the deserialization attempts to backport the primitive to the local version.\n\nIf a NovaObject A has an ObjectField b containing NovaObject B and it is B that has the incompatible version, the version number in the exception will be the the locally supported version for B. The desrialization will then attempt to backport the primitive of object A to the locally supported version number for object B.", 
    "tags": [
        "unified-objects"
    ], 
    "importance": "Wishlist", 
    "heat": 20, 
    "link": "https://bugs.launchpad.net/nova/+bug/1275675", 
    "owner": "None", 
    "id": 1275675, 
    "index": 2754, 
    "openned": "2014-02-03 09:32:08.532153+00:00", 
    "created": "2014-02-03 09:32:08.532153+00:00", 
    "title": "Version change in ObjectField does not work with back-levelling", 
    "comments": [
        {
            "content": "When a NovaObject primitive is deserialized the object version is checked and an IncompatibleObjectVersion exception is raised is the serialized primitive has is labelled with a version that is not known locally. The exception indicates what version is known locallay, and the deserialization attempts backport the primitive to the local version.\n\nIf an object A has an ObjectField b containing object B and it is B that has the incompatible version, the version number in the exception will be the the locally supported version for B. The desrialization will then attempt to backport the primitive of object A to the locally supported version number for object B.", 
            "date_created": "2014-02-03 09:32:08.532153+00:00", 
            "author": "https://api.launchpad.net/1.0/~pmurray"
        }, 
        {
            "content": "The following test demonstrates the bug:\n\ngiven these class versions:\n\nclass Container(base.NovaObject):\n    VERSION = '5.5'\n    fields = {\n        'nested': fields.ObjectField('MyObj'),\n    }\n\nclass MyObj(base.NovaPersistentObject, base.NovaObject):\n    VERSION = '1.5'\n<...rest of object code cut out...>\n\nThe following test passes:\n\n    def test_deserialize_nested_object(self):\n        ser = base.NovaObjectSerializer()\n        ser._conductor = mock.Mock()\n        ser._conductor.object_backport.return_value = 'backported'\n        A = Container()\n        B = MyObj()\n        A.nested = B\n        B.VERSION = '1.25'\n        primitive = A.obj_to_primitive()\n        result = ser.deserialize_entity(self.context, primitive)\n        self.assertEqual('backported', result)\n        ser._conductor.object_backport.assert_called_with(self.context,\n                                                          primitive,\n                                                          '1.5')\n\nSo _conductor.object_backport is being called with the primitive of A and the version number of B.", 
            "date_created": "2014-02-03 09:38:33.093144+00:00", 
            "author": "https://api.launchpad.net/1.0/~pmurray"
        }, 
        {
            "content": "I think this was brought up here:\n\nhttp://lists.openstack.org/pipermail/openstack-dev/2014-February/026151.html", 
            "date_created": "2014-02-07 22:01:24.571366+00:00", 
            "author": "https://api.launchpad.net/1.0/~mriedem"
        }, 
        {
            "content": "As suggested here: http://lists.openstack.org/pipermail/openstack-dev/2014-February/026151.html the deserializer could indicate to conductor which object is the problem and allow it to attempt a conversion on that object. That could be a useful thing to do, but is not part of the original design and out of scope right now. In particular the object code currently assumes that the object versions line up correctly when nesting objects.\n\nThis bug should not surface if code is written and tested correctly, but its easy to check for so I'll propose the following fix to close it.\n\n1. Add new exception NestedObjectVersionError for this error condition.\n2. When the deserializer receives the IncompatibleObjectVersionError exception it checks to see it refers to the top level prim object itself. If it doesn't the exception comes from an incorrect nested object, so raise a new exception inidicating this condition.\n\n", 
            "date_created": "2014-03-06 11:03:36.319699+00:00", 
            "author": "https://api.launchpad.net/1.0/~pmurray"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/78605", 
            "date_created": "2014-03-06 13:51:41.049776+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Change abandoned by Paul Murray (<email address hidden>) on branch: master\nReview: https://review.openstack.org/78605\nReason: Actually, I'll just abandon it.", 
            "date_created": "2014-08-08 11:58:34.666264+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/202554", 
            "date_created": "2015-07-16 13:20:55.143775+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Fix proposed to branch: stable/kilo\nReview: https://review.openstack.org/202560", 
            "date_created": "2015-07-16 13:38:28.381011+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Change abandoned by Nikola Dipanov (<email address hidden>) on branch: master\nReview: https://review.openstack.org/202554\nReason: Will abandon for a more optimal fix that does not potentially send more than one backleveling request for a highly nested structure", 
            "date_created": "2015-07-16 15:00:02.010156+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Change abandoned by Nikola Dipanov (<email address hidden>) on branch: stable/kilo\nReview: https://review.openstack.org/202560", 
            "date_created": "2015-07-16 16:52:07.010815+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "This is now over 2 years old and the comments in [1] indicate that this is the responsibility of \"oslo.versionedobjects\" now. The ML discussion [1] doesn't show a clear path forward neither. I'm closing it as \"won't fix\".\n\nReferences:\n[1] https://review.openstack.org/#/c/202554/\n[2] http://lists.openstack.org/pipermail/openstack-dev/2014-February/026151.html", 
            "date_created": "2016-05-17 15:44:01.443935+00:00", 
            "author": "https://api.launchpad.net/1.0/~mzoeller"
        }
    ], 
    "closed": "2016-05-17 15:43:55.968004+00:00"
}
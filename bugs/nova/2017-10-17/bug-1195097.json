{
    "status": "Fix Released", 
    "last_updated": "2013-08-22 06:01:11.591814+00:00", 
    "description": "I noticed a backtrack in my nova logs\n\n---\nFailed storing info cache\n Traceback (most recent call last):\n   File \"/opt/stack/nova/nova/network/api.py\", line 80, in update_instance_cache_with_nw_info\n     cache)\n   File \"/opt/stack/nova/nova/conductor/api.py\", line 101, in instance_info_cache_update\n     values)\n   File \"/opt/stack/nova/nova/conductor/rpcapi.py\", line 352, in instance_info_cache_update\n     return self.call(context, msg, version='1.26')\n   File \"/opt/stack/nova/nova/openstack/common/rpc/proxy.py\", line 125, in call\n     result = rpc.call(context, real_topic, msg, timeout)\n   File \"/opt/stack/nova/nova/openstack/common/rpc/__init__.py\", line 140, in call\n     return _get_impl().call(CONF, context, topic, msg, timeout)\n   File \"/opt/stack/nova/nova/openstack/common/rpc/impl_qpid.py\", line 664, in call\n     rpc_amqp.get_connection_pool(conf, Connection))\n   File \"/opt/stack/nova/nova/openstack/common/rpc/amqp.py\", line 613, in call\n     rv = multicall(conf, context, topic, msg, timeout, connection_pool)\n   File \"/opt/stack/nova/nova/openstack/common/rpc/amqp.py\", line 599, in multicall\n     conn.topic_send(topic, rpc_common.serialize_msg(msg), timeout)\n   File \"/opt/stack/nova/nova/openstack/common/rpc/common.py\", line 468, in serialize_msg\n     _MESSAGE_KEY: jsonutils.dumps(raw_msg)}\n   File \"/opt/stack/nova/nova/openstack/common/jsonutils.py\", line 151, in dumps\n     return json.dumps(value, default=default, **kwargs)\n   File \"/usr/lib64/python2.6/json/__init__.py\", line 237, in dumps\n     **kw).encode(obj)\n   File \"/usr/lib64/python2.6/json/encoder.py\", line 367, in encode\n     chunks = list(self.iterencode(o))\n   File \"/usr/lib64/python2.6/json/encoder.py\", line 309, in _iterencode\n     for chunk in self._iterencode_dict(o, markers):\n   File \"/usr/lib64/python2.6/json/encoder.py\", line 275, in _iterencode_dict\n     for chunk in self._iterencode(value, markers):\n   File \"/usr/lib64/python2.6/json/encoder.py\", line 309, in _iterencode\n     for chunk in self._iterencode_dict(o, markers):\n   File \"/usr/lib64/python2.6/json/encoder.py\", line 275, in _iterencode_dict\n     for chunk in self._iterencode(value, markers):\n   File \"/usr/lib64/python2.6/json/encoder.py\", line 309, in _iterencode\n     for chunk in self._iterencode_dict(o, markers):\n   File \"/usr/lib64/python2.6/json/encoder.py\", line 275, in _iterencode_dict\n     for chunk in self._iterencode(value, markers):\n   File \"/usr/lib64/python2.6/json/encoder.py\", line 317, in _iterencode\n     for chunk in self._iterencode_default(o, markers):\n   File \"/usr/lib64/python2.6/json/encoder.py\", line 315, in _iterencode\n     raise ValueError(\"Circular reference detected\")\n ValueError: Circular reference detected\n---\n\nafter a fair bit of digging, I resolved this down to the \"access_ip_v6\" and \"access_ip_v4\" attributes of the instance object.  Turns out sqlalchemy turns them into netaddr.IPaddress types, which don't get serialized properly\n\n---\n[stack@rhel conductor]$ python\nPython 2.6.6 (r266:84292, Oct 12 2012, 14:23:48) \n[GCC 4.4.6 20120305 (Red Hat 4.4.6-4)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import netaddr\n>>> import gettext\n>>> gettext.install(\"nova\", unicode=1)\n>>> from nova.openstack.common import jsonutils\n>>> n = netaddr.IPAddress(\"127.0.0.1\")\n>>> jsonutils.dumps(n)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/opt/stack/nova/nova/openstack/common/jsonutils.py\", line 170, in dumps\n    return json.dumps(value, default=default, **kwargs)\n  File \"/usr/lib64/python2.6/json/__init__.py\", line 237, in dumps\n    **kw).encode(obj)\n  File \"/usr/lib64/python2.6/json/encoder.py\", line 367, in encode\n    chunks = list(self.iterencode(o))\n  File \"/usr/lib64/python2.6/json/encoder.py\", line 317, in _iterencode\n    for chunk in self._iterencode_default(o, markers):\n  File \"/usr/lib64/python2.6/json/encoder.py\", line 315, in _iterencode\n    raise ValueError(\"Circular reference detected\")\nValueError: Circular reference detected\n>>> import inspect\n>>> inspect.isclass(n)\nFalse\n>>> print n\n127.0.0.1\n>>> `n`\n\"IPAddress('127.0.0.1')\"\n>>> \n---\n\nI think the right thing to do is to special-case this?", 
    "tags": [], 
    "importance": "Undecided", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1195097", 
    "owner": "https://api.launchpad.net/1.0/~iwienand", 
    "id": 1195097, 
    "index": 5065, 
    "openned": "2013-06-27 03:23:38.345529+00:00", 
    "created": "2013-06-27 03:23:38.345529+00:00", 
    "title": "netaddr.ip.IPAddress kills jsonutils.dumps", 
    "comments": [
        {
            "content": "I noticed a backtrack in my nova logs\n\n---\nFailed storing info cache\n Traceback (most recent call last):\n   File \"/opt/stack/nova/nova/network/api.py\", line 80, in update_instance_cache_with_nw_info\n     cache)\n   File \"/opt/stack/nova/nova/conductor/api.py\", line 101, in instance_info_cache_update\n     values)\n   File \"/opt/stack/nova/nova/conductor/rpcapi.py\", line 352, in instance_info_cache_update\n     return self.call(context, msg, version='1.26')\n   File \"/opt/stack/nova/nova/openstack/common/rpc/proxy.py\", line 125, in call\n     result = rpc.call(context, real_topic, msg, timeout)\n   File \"/opt/stack/nova/nova/openstack/common/rpc/__init__.py\", line 140, in call\n     return _get_impl().call(CONF, context, topic, msg, timeout)\n   File \"/opt/stack/nova/nova/openstack/common/rpc/impl_qpid.py\", line 664, in call\n     rpc_amqp.get_connection_pool(conf, Connection))\n   File \"/opt/stack/nova/nova/openstack/common/rpc/amqp.py\", line 613, in call\n     rv = multicall(conf, context, topic, msg, timeout, connection_pool)\n   File \"/opt/stack/nova/nova/openstack/common/rpc/amqp.py\", line 599, in multicall\n     conn.topic_send(topic, rpc_common.serialize_msg(msg), timeout)\n   File \"/opt/stack/nova/nova/openstack/common/rpc/common.py\", line 468, in serialize_msg\n     _MESSAGE_KEY: jsonutils.dumps(raw_msg)}\n   File \"/opt/stack/nova/nova/openstack/common/jsonutils.py\", line 151, in dumps\n     return json.dumps(value, default=default, **kwargs)\n   File \"/usr/lib64/python2.6/json/__init__.py\", line 237, in dumps\n     **kw).encode(obj)\n   File \"/usr/lib64/python2.6/json/encoder.py\", line 367, in encode\n     chunks = list(self.iterencode(o))\n   File \"/usr/lib64/python2.6/json/encoder.py\", line 309, in _iterencode\n     for chunk in self._iterencode_dict(o, markers):\n   File \"/usr/lib64/python2.6/json/encoder.py\", line 275, in _iterencode_dict\n     for chunk in self._iterencode(value, markers):\n   File \"/usr/lib64/python2.6/json/encoder.py\", line 309, in _iterencode\n     for chunk in self._iterencode_dict(o, markers):\n   File \"/usr/lib64/python2.6/json/encoder.py\", line 275, in _iterencode_dict\n     for chunk in self._iterencode(value, markers):\n   File \"/usr/lib64/python2.6/json/encoder.py\", line 309, in _iterencode\n     for chunk in self._iterencode_dict(o, markers):\n   File \"/usr/lib64/python2.6/json/encoder.py\", line 275, in _iterencode_dict\n     for chunk in self._iterencode(value, markers):\n   File \"/usr/lib64/python2.6/json/encoder.py\", line 317, in _iterencode\n     for chunk in self._iterencode_default(o, markers):\n   File \"/usr/lib64/python2.6/json/encoder.py\", line 315, in _iterencode\n     raise ValueError(\"Circular reference detected\")\n ValueError: Circular reference detected\n---\n\nafter a fair bit of digging, I resolved this down to the \"access_ip_v6\" and \"access_ip_v4\" attributes of the instance object.  Turns out sqlalchemy turns them into netaddr.IPaddress types, which don't get serialized properly\n\n---\n[stack@rhel conductor]$ python\nPython 2.6.6 (r266:84292, Oct 12 2012, 14:23:48) \n[GCC 4.4.6 20120305 (Red Hat 4.4.6-4)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import netaddr\n>>> import gettext\n>>> gettext.install(\"nova\", unicode=1)\n>>> from nova.openstack.common import jsonutils\n>>> n = netaddr.IPAddress(\"127.0.0.1\")\n>>> jsonutils.dumps(n)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/opt/stack/nova/nova/openstack/common/jsonutils.py\", line 170, in dumps\n    return json.dumps(value, default=default, **kwargs)\n  File \"/usr/lib64/python2.6/json/__init__.py\", line 237, in dumps\n    **kw).encode(obj)\n  File \"/usr/lib64/python2.6/json/encoder.py\", line 367, in encode\n    chunks = list(self.iterencode(o))\n  File \"/usr/lib64/python2.6/json/encoder.py\", line 317, in _iterencode\n    for chunk in self._iterencode_default(o, markers):\n  File \"/usr/lib64/python2.6/json/encoder.py\", line 315, in _iterencode\n    raise ValueError(\"Circular reference detected\")\nValueError: Circular reference detected\n>>> import inspect\n>>> inspect.isclass(n)\nFalse\n>>> print n\n127.0.0.1\n>>> `n`\n\"IPAddress('127.0.0.1')\"\n>>> \n---\n\nI think the right thing to do is to special-case this?", 
            "date_created": "2013-06-27 03:23:38.345529+00:00", 
            "author": "https://api.launchpad.net/1.0/~iwienand"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/34667", 
            "date_created": "2013-06-27 03:28:19.681133+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ], 
    "closed": "2013-08-22 06:01:08.928266+00:00"
}
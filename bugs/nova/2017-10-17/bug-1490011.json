{
    "status": "Fix Released", 
    "last_updated": "2015-10-15 08:58:53.986681+00:00", 
    "description": "2015-08-28 18:41:12.128 | tempest.scenario.test_volume_boot_pattern.TestVolumeBootPatternV2.test_create_ebs_image_and_check_boot[compute,id-36c34c67-7b54-4b59-b188-02a2f458a63b,image,volume]\n2015-08-28 18:41:12.128 | --------------------------------------------------------------------------------------------------------------------------------------------------------------------\n2015-08-28 18:41:12.128 | \n2015-08-28 18:41:12.128 | Captured traceback:\n2015-08-28 18:41:12.128 | ~~~~~~~~~~~~~~~~~~~\n2015-08-28 18:41:12.128 |     Traceback (most recent call last):\n2015-08-28 18:41:12.128 |       File \"tempest/test.py\", line 126, in wrapper\n2015-08-28 18:41:12.128 |         return f(self, *func_args, **func_kwargs)\n2015-08-28 18:41:12.128 |       File \"tempest/scenario/test_volume_boot_pattern.py\", line 194, in test_create_ebs_image_and_check_boot\n2015-08-28 18:41:12.128 |         instance = self.create_server(image=image['id'])\n2015-08-28 18:41:12.129 |       File \"tempest/scenario/manager.py\", line 177, in create_server\n2015-08-28 18:41:12.129 |         **create_kwargs)\n2015-08-28 18:41:12.129 |       File \"tempest/services/compute/json/servers_client.py\", line 86, in create_server\n2015-08-28 18:41:12.129 |         resp, body = self.post('servers', post_body)\n2015-08-28 18:41:12.129 |       File \"/opt/stack/new/tempest/.tox/all/local/lib/python2.7/site-packages/tempest_lib/common/rest_client.py\", line 256, in post\n2015-08-28 18:41:12.129 |         return self.request('POST', url, extra_headers, headers, body)\n2015-08-28 18:41:12.129 |       File \"/opt/stack/new/tempest/.tox/all/local/lib/python2.7/site-packages/tempest_lib/common/rest_client.py\", line 643, in request\n2015-08-28 18:41:12.129 |         resp, resp_body)\n2015-08-28 18:41:12.129 |       File \"/opt/stack/new/tempest/.tox/all/local/lib/python2.7/site-packages/tempest_lib/common/rest_client.py\", line 700, in _error_checker\n2015-08-28 18:41:12.129 |         raise exceptions.BadRequest(resp_body)\n2015-08-28 18:41:12.129 |     tempest_lib.exceptions.BadRequest: Bad request\n2015-08-28 18:41:12.130 |     Details: {u'code': 400, u'message': u'Block Device Mapping is Invalid: Boot sequence for the instance and image/block device mapping combination is not valid.'}\n\nas seen at http://logs.openstack.org/96/216696/6/check/gate-tempest-dsvm-cells/5304a42/console.html\n\nThe cause appears to be a race with processing messages to create_or_update a bdm in the parent cell.  Rather than creating then updating the two messages both create due to the quickness with which they are sent and processed.  One solution is to send a create message and then an update.  A followup to enhance that would include adding a unique constraint so that two identical bdms can't be created.", 
    "tags": [
        "cells"
    ], 
    "importance": "Medium", 
    "heat": 8, 
    "link": "https://bugs.launchpad.net/nova/+bug/1490011", 
    "owner": "https://api.launchpad.net/1.0/~alaski", 
    "id": 1490011, 
    "index": 4339, 
    "openned": "2015-08-28 19:51:15.357830+00:00", 
    "created": "2015-08-28 19:51:15.357830+00:00", 
    "title": "cells: test_create_ebs_image_and_check_boot fails intermittently", 
    "comments": [
        {
            "content": "2015-08-28 18:41:12.128 | tempest.scenario.test_volume_boot_pattern.TestVolumeBootPatternV2.test_create_ebs_image_and_check_boot[compute,id-36c34c67-7b54-4b59-b188-02a2f458a63b,image,volume]\n2015-08-28 18:41:12.128 | --------------------------------------------------------------------------------------------------------------------------------------------------------------------\n2015-08-28 18:41:12.128 | \n2015-08-28 18:41:12.128 | Captured traceback:\n2015-08-28 18:41:12.128 | ~~~~~~~~~~~~~~~~~~~\n2015-08-28 18:41:12.128 |     Traceback (most recent call last):\n2015-08-28 18:41:12.128 |       File \"tempest/test.py\", line 126, in wrapper\n2015-08-28 18:41:12.128 |         return f(self, *func_args, **func_kwargs)\n2015-08-28 18:41:12.128 |       File \"tempest/scenario/test_volume_boot_pattern.py\", line 194, in test_create_ebs_image_and_check_boot\n2015-08-28 18:41:12.128 |         instance = self.create_server(image=image['id'])\n2015-08-28 18:41:12.129 |       File \"tempest/scenario/manager.py\", line 177, in create_server\n2015-08-28 18:41:12.129 |         **create_kwargs)\n2015-08-28 18:41:12.129 |       File \"tempest/services/compute/json/servers_client.py\", line 86, in create_server\n2015-08-28 18:41:12.129 |         resp, body = self.post('servers', post_body)\n2015-08-28 18:41:12.129 |       File \"/opt/stack/new/tempest/.tox/all/local/lib/python2.7/site-packages/tempest_lib/common/rest_client.py\", line 256, in post\n2015-08-28 18:41:12.129 |         return self.request('POST', url, extra_headers, headers, body)\n2015-08-28 18:41:12.129 |       File \"/opt/stack/new/tempest/.tox/all/local/lib/python2.7/site-packages/tempest_lib/common/rest_client.py\", line 643, in request\n2015-08-28 18:41:12.129 |         resp, resp_body)\n2015-08-28 18:41:12.129 |       File \"/opt/stack/new/tempest/.tox/all/local/lib/python2.7/site-packages/tempest_lib/common/rest_client.py\", line 700, in _error_checker\n2015-08-28 18:41:12.129 |         raise exceptions.BadRequest(resp_body)\n2015-08-28 18:41:12.129 |     tempest_lib.exceptions.BadRequest: Bad request\n2015-08-28 18:41:12.130 |     Details: {u'code': 400, u'message': u'Block Device Mapping is Invalid: Boot sequence for the instance and image/block device mapping combination is not valid.'}\n\nas seen at http://logs.openstack.org/96/216696/6/check/gate-tempest-dsvm-cells/5304a42/console.html\n\nThe cause appears to be a race with processing messages to create_or_update a bdm in the parent cell.  Rather than creating then updating the two messages both create due to the quickness with which they are sent and processed.  One solution is to send a create message and then an update.  A followup to enhance that would include adding a unique constraint so that two identical bdms can't be created.", 
            "date_created": "2015-08-28 19:51:15.357830+00:00", 
            "author": "https://api.launchpad.net/1.0/~alaski"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/218450", 
            "date_created": "2015-08-28 19:58:21.030219+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/218450\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=5e7dc40041d2870560b96b48f90a75f26642a234\nSubmitter: Jenkins\nBranch:    master\n\ncommit 5e7dc40041d2870560b96b48f90a75f26642a234\nAuthor: Andrew Laski <email address hidden>\nDate:   Fri Aug 28 15:41:05 2015 -0400\n\n    Cells: Improve block device mapping update/create calls\n    \n    There is a single RPC method used to both create and update block device\n    mappings in a parent cell.  Based on arguments passed to it it will\n    either create/update/update_or_create the block device mapping.  This\n    could cause duplicate bdms to be created if multiple update_or_create\n    calls come in quickly.  Instead the update_or_create argument should\n    only be used when sending the first RPC message to the parent cell.\n    \n    There's additional complexity here in that a bdm object create() call\n    should create the bdm and all save() calls should update.  However\n    create() doesn't send an update message if device_name isn't set due to\n    uniqueness being determined by a combination of instance uuid and device\n    name.  So save() needs to use update_or_create if device name is being\n    changed, and update all other times.\n    \n    Change-Id: Ic093f003abfbfe00500c318f7ee0abe884394342\n    Closes-bug: 1490011\n", 
            "date_created": "2015-08-31 19:07:51.669486+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ], 
    "closed": "2015-09-03 11:46:08.053657+00:00"
}
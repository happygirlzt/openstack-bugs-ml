{
    "status": "Confirmed", 
    "last_updated": "2017-01-11 00:28:10.491022+00:00", 
    "description": "When snapshotting an instance, any additional metadata that is added to the image using 'glance image-update --property key=value' that is over 255 character gets truncated because the nova.instance_system_metadata table has a limit of 255 characters. When the snapshot completes this can be verified by using either 'glance image-show <image-id>' or 'nova image-show <image-id>'.\n\nSteps to reproduce:\n1.) Add new image to glance\n2.) Use 'glance image-update --property key=value' to add an amount of data larger than 255 character\n3.) Launch an instance from the previously edited image so it contains the new metadata\n4.) Snapshot the image\n5.) Check the metadata property using 'nova image-show <new-snapshot-id>' or 'glance image-show <new-snapshot-id>'\n\nResult:\nThe expected output would be the entire property initially added to the image before the launching of the original image or the snapshot. The actual result is that the large property will be truncated at 255 characters because of the limit of the column (field = value) type in the nova.instance_system_metadata table:\n\nmysql> describe instance_system_metadata;\n+---------------+--------------+------+-----+---------+----------------+\n| Field                 |        Type         | Null  |  Key |  Default |        Extra          |\n+---------------+--------------+------+-----+---------+----------------+\n| created_at       |   datetime   | YES  |          | NULL    |                              |\n| updated_at      | datetime     | YES  |           | NULL    |                             |\n| deleted_at       | datetime     | YES  |           | NULL    |                             |\n| deleted             | tinyint(1)     | YES  |           | NULL    |                              |\n| id                        | int(11)          | NO   | PRI    | NULL    | auto_increment|\n| instance_uuid | varchar(36)  | NO   | MUL | NULL    |                               |\n| key                     | varchar(255) | NO   |         | NULL    |                                |\n| value                  | varchar(255) | YES  |         | NULL    |                               |\n+---------------+--------------+------+-----+---------+----------------+\n8 rows in set (0.00 sec)\n\nThe information stored in instance_system_metadata is stored in the corresponding Glance database table glance.image_properties, which doesn't have a limit on the 'value' row. Which is why there isn't an issue adding the large property to Glance. The 'value' field is of type text, which is inconsistent from nova.instance_system_metadata which is of type varchar(255)\n\nmysql> describe image_properties;\n+------------+--------------+------+-----+---------+----------------+\n| Field      | Type         | Null | Key | Default | Extra          |\n+------------+--------------+------+-----+---------+----------------+\n| id         | int(11)      | NO   | PRI | NULL    | auto_increment |\n| image_id   | varchar(36)  | NO   | MUL | NULL    |                |\n| name       | varchar(255) | NO   |     | NULL    |                |\n| value      | text         | YES  |     | NULL    |                |\n| created_at | datetime     | NO   |     | NULL    |                |\n| updated_at | datetime     | YES  |     | NULL    |                |\n| deleted_at | datetime     | YES  |     | NULL    |                |\n| deleted    | tinyint(1)   | NO   | MUL | NULL    |                |\n+------------+--------------+------+-----+---------+----------------+\n8 rows in set (0.00 sec)\n\nNo error will be thrown since it is not checked for when the value is written to the database.", 
    "tags": [
        "api", 
        "glancev2"
    ], 
    "importance": "Medium", 
    "heat": 16, 
    "link": "https://bugs.launchpad.net/nova/+bug/1117923", 
    "owner": "None", 
    "id": 1117923, 
    "index": 3225, 
    "openned": "2013-02-07 02:42:22.284377+00:00", 
    "created": "2013-02-07 02:42:22.284377+00:00", 
    "title": "instance_system_metadata column type truncates on snapshot", 
    "comments": [
        {
            "content": "When snapshotting an instance, any additional metadata that is added to the image using 'glance image-update --property key=value' that is over 255 character gets truncated because the nova.instance_system_metadata table has a limit of 255 characters. When the snapshot completes this can be verified by using either 'glance image-show <image-id>' or 'nova image-show <image-id>'. \n\nSteps to reproduce: \n1.) Add new image to glance \n2.) Use 'glance image-update --property key=value' to add an amount of data larger than 255 character\n3.) Launch an instance from the previous edited image so it contains the new metadata\n4.) Snapshot the image \n5.) Check the metadata property using 'nova image-show <new-snapshot-id>' or 'glance image-show <new-snapshot-id>'\n\nResult: \nThe expected output would be the entire property initially added to the image before the launching of the original image or the snapshot. The actual result is that the large property will be truncated at 255 characters because of the limit of the column (field = value) type in the nova.instance_system_metadata table: \n\nmysql> describe instance_system_metadata;\n+---------------+--------------+------+-----+---------+----------------+\n| Field                 |        Type         | Null  |  Key |  Default |        Extra          |\n+---------------+--------------+------+-----+---------+----------------+\n| created_at       |   datetime   | YES  |          | NULL    |                              |\n| updated_at      | datetime     | YES  |           | NULL    |                             |\n| deleted_at       | datetime     | YES  |           | NULL    |                             |\n| deleted             | tinyint(1)     | YES  |           | NULL    |                              |\n| id                        | int(11)          | NO   | PRI    | NULL    | auto_increment|\n| instance_uuid | varchar(36)  | NO   | MUL | NULL    |                               |\n| key                     | varchar(255) | NO   |         | NULL    |                                |\n| value                  | varchar(255) | YES  |         | NULL    |                               |\n+---------------+--------------+------+-----+---------+----------------+\n8 rows in set (0.00 sec)\n\nNo error will be thrown since it is not checked for when the value is written to the database.", 
            "date_created": "2013-02-07 02:42:22.284377+00:00", 
            "author": "https://api.launchpad.net/1.0/~lbragstad"
        }, 
        {
            "content": "Are we saying we need to remove restriction on the  value column in instance_system_metadata just like  image_properties?", 
            "date_created": "2013-02-07 15:46:09.971579+00:00", 
            "author": "https://api.launchpad.net/1.0/~dims-v"
        }, 
        {
            "content": "I would say that is the first thing to investigate. I am still researching a fix and trying a few things out. Since the glance db stores the same information wouldn't it make sense to have the nova db match? ", 
            "date_created": "2013-02-07 17:26:09.428343+00:00", 
            "author": "https://api.launchpad.net/1.0/~lbragstad"
        }, 
        {
            "content": "I found a check in nova/compute/apy.py, but I am not sure where the truncation actually takes place since I changed the type of the field to 'text' to match what the corresponding glance.image_properties tables has for the same value. The check is here: \n\nhttps://github.com/openstack/nova/blob/master/nova/compute/api.py#L317\n\n", 
            "date_created": "2013-02-07 20:53:30.205060+00:00", 
            "author": "https://api.launchpad.net/1.0/~lbragstad"
        }, 
        {
            "content": "This might not only be an issue with the database. After adjusting the database, I don't think that is the problem here. I think the real problem lies at the following line: \n\nhttps://github.com/openstack/nova/blob/master/nova/compute/api.py#L806\n\nWhich truncates the property before writing it to the database. According to the comment above, this looks like it might need to be updated. ", 
            "date_created": "2013-02-11 23:56:32.315859+00:00", 
            "author": "https://api.launchpad.net/1.0/~lbragstad"
        }, 
        {
            "content": "I have seen this as well.", 
            "date_created": "2013-02-14 15:38:34.997470+00:00", 
            "author": "https://api.launchpad.net/1.0/~zulcss"
        }, 
        {
            "content": "I have a little more to add on my findings. Originally looking at the issue, the truncation seemed to be a side effect of the field type in the database that stores image properties metadata. After writing a specific migration script to test if this was the root cause of the truncation, the problem still persisted. After investigating further down the rabbit hole, I believe this is also related to the fact I am using OpenStack Image API v1, which stores the information for image properties metadata in the header, and that has a limit of 255 character. This leads me to believe that the database constraint was implemented on top of an API limitation. \n\nTo fix this we can purpose two separate solutions. \n1.) Write a migration script to fix the tables that store the same instance_system_metadata properties in glance.image_properties as nova.instance_system_metadata, that way the tables will be consistent from a size limit perspective since they store the same data\n2.) Implement OpenStack's Image API v2 to include create() and update() in glanceclient so image metadata properties are not passed around in the headers but in the body of the request: \nhttps://github.com/openstack/python-glanceclient/blob/master/glanceclient/v2/images.py\nThis work already contains blueprints and has been partially implemented by Brian Waldon: \nhttps://blueprints.launchpad.net/glance/+spec/api-2\n\nI figured these details should be noted since both the database and API implementation are connected. Thoughts? ", 
            "date_created": "2013-02-14 18:56:11.515487+00:00", 
            "author": "https://api.launchpad.net/1.0/~lbragstad"
        }, 
        {
            "content": "To elaborate a little more on #1 from above, the database fix. We could change the nova.instance_system_metadata table to be consistent with glance.image_properties since Glance holds the larger value of the two. The nova.instance_system_metadata value field is of type VARCHAR(255), because of the API header limit in v1. The glance.image_properties value field is of type TEXT, which allows up to ~64K to be stored. Since that is the larger of the two it would make sense to make Nova database of the same type. \n\nWe have some time to think about this fix, since the real issue here is the API implementation. Once that is fixed, more focus can be directed to the database fix. ", 
            "date_created": "2013-02-14 20:59:55.466023+00:00", 
            "author": "https://api.launchpad.net/1.0/~lbragstad"
        }, 
        {
            "content": "Although the bug was created/reported three years ago,  we are still able to re-create the issue, and found that the property value truncation (and subsequent creation of an entry in the instance_system_metadata table) occurs during the Nova instance creation process - the value truncation is triggered by the following line of code under nova/utils.py's get_system_metadata_from_image function: \n\n        new_value = safe_truncate(six.text_type(value), 255)\n\nThe bug reporter suggested two solutions - \n(1) creating migration script to make the nova db instance_system_metadata table's value field length consistent with that of glance db's image_property table's value field, and \n(2) Implement OpenStack Image API v2 to include create() and update() in glanceclient so image metadata properties are not passed in the header but in the body of the request\n\nIssue with #1: currently researching on how to do this, and will reach out for help if needed.\nIssue with #2: Openstack Image API v2 has already been implemented - and as indicated in the first paragraph, the property value truncation happens in the instance creation (nova boot instance) process.  However, nowhere in the \"nova --debug boot\" log results show the \"curl\" command or REST API that shows the truncated image property is being added (to the instace_system_metadata) - so we couldnt tell if the truncated property value is being passed i the header or the body of the request.  \n\nHere is the complete \"nova --debug boot \" log for your reference:  http://paste.openstack.org/show/562819/  \n\nInputs are appreciated.", 
            "date_created": "2016-08-24 02:13:24.556735+00:00", 
            "author": "https://api.launchpad.net/1.0/~stewie925"
        }, 
        {
            "content": "update comment 2016-08-25:\n\nI believe this bug is actually a non-issue, but would like to hear others' opinion on this.\n\nThe original reporter noted that when an image property is assigned with a value > 255 chars, then that image property value gets truncated a max of 255 chars by the time it is populated in the instance_system_metadata table.\n\nAs indicated in my previous comment, there is truncation logic under nova/utils.py's get_system_metadata_from_image function in the form of the following line of code:\n\n        new_value = safe_truncate(six.text_type(value), 255)\n\nToday, I checked further and found that the nova/utils.py actually ALREADY stores logic that purposely SKIP specific system metadata keys (see SM_SKIP_KEYS in the code) from being stored in the instance_system_metadata table, as those keys are known to contain huge amount of data (greater than 255 chars) and would not have fit into the defined size constraint of the field currently defined as VARCHAR(255) .   Therefore I believe this is an \"intentional\" logic to trim any metadata property value to a manageable size (i.e., up to a max of 255 chars).", 
            "date_created": "2016-08-26 00:20:19.734427+00:00", 
            "author": "https://api.launchpad.net/1.0/~stewie925"
        }
    ]
}
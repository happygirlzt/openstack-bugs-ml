{
    "status": "Fix Released", 
    "last_updated": "2011-02-07 14:01:33.501630+00:00", 
    "description": "From Ed Leafe's explanation in a code review:\n\nThe problem is that translations are not word-for-word; a phrase in different languages may order the words differently. Probably the most common example would be adjectives coming before the noun in English (\"the white house\"), but after the noun in others (e.g., Spanish: \"la casa blanca\"). If your code looks like:\n\ncolor = \"white\"\nthing = \"house\"\nprint _(\"The %s %s\") % (color, thing)\n\n... it will print \"The white house\" in English, but the Spanish will print \"La blanca casa\", which is wrong. You need to use a mapping for the formatting, so that the code above would read:\n\ncolor = \"white\"\nthing = \"house\"\nprint _(\"The %(color)s %(thing)s\") % locals()\n\nYeah, I know that this is a weak example, since the color and thing are still in English, but it's just designed to demonstrate how positional substitution is to be avoided in localization strings. \n\nIf you run xgettext on a file that uses tuples for multiple substitutions, it will emit the following:\n\"warning: 'msgid' format string with unnamed arguments cannot be properly localized: The translator cannot reorder the arguments. Please consider using a format string with named arguments, and a mapping instead of a tuple for the arguments.\"", 
    "tags": [
        "i18n"
    ], 
    "importance": "Low", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/703041", 
    "owner": "https://api.launchpad.net/1.0/~ed-leafe", 
    "id": 703041, 
    "index": 66, 
    "openned": "2011-01-14 19:48:25.085852+00:00", 
    "created": "2011-01-14 19:48:25.085852+00:00", 
    "title": "i18n strings with >1 placeholder should always use dictionary, not tuple, replacement", 
    "comments": [
        {
            "content": "From Ed Leafe's explanation in a code review:\n\nThe problem is that translations are not word-for-word; a phrase in different languages may order the words differently. Probably the most common example would be adjectives coming before the noun in English (\"the white house\"), but after the noun in others (e.g., Spanish: \"la casa blanca\"). If your code looks like:\n\ncolor = \"white\"\nthing = \"house\"\nprint _(\"The %s %s\") % (color, thing)\n\n... it will print \"The white house\" in English, but the Spanish will print \"La blanca casa\", which is wrong. You need to use a mapping for the formatting, so that the code above would read:\n\ncolor = \"white\"\nthing = \"house\"\nprint _(\"The %(color)s %(thing)s\") % locals()\n\nYeah, I know that this is a weak example, since the color and thing are still in English, but it's just designed to demonstrate how positional substitution is to be avoided in localization strings. \n\nIf you run xgettext on a file that uses tuples for multiple substitutions, it will emit the following:\n\"warning: 'msgid' format string with unnamed arguments cannot be properly localized: The translator cannot reorder the arguments. Please consider using a format string with named arguments, and a mapping instead of a tuple for the arguments.\"", 
            "date_created": "2011-01-14 19:48:25.085852+00:00", 
            "author": "https://api.launchpad.net/1.0/~jaypipes"
        }
    ], 
    "closed": "2011-02-07 14:01:30.738765+00:00"
}
{
    "status": "Opinion", 
    "last_updated": "2015-01-22 23:09:18.610329+00:00", 
    "description": "Take three instances in two regions (A and B) such that they are named A1, A2, and B1.  A1 is the only instance with a public IP: A2 and B1 only have the standard private IPs they were given.  In this situation:\n\n  A1 can reach both of its own interfaces.\n  B1 can reach A1's public IP, but not its private IP.\n  A2 can reach A1's private IP, but not its public IP.  \n\nThis last line is counter-intuitive, as B1 can reach A1's public IP just fine.  In fact, if we bring a public IP up on B1, A2 can reach B1's public IP without trouble.\n\nTraceroutes halt right out of the gate, which may or may not indicate that this is enforced by nova-network itself.", 
    "tags": [
        "canonistack"
    ], 
    "importance": "Undecided", 
    "heat": 20, 
    "link": "https://bugs.launchpad.net/nova/+bug/1022612", 
    "owner": "None", 
    "id": 1022612, 
    "index": 4198, 
    "openned": "2014-01-09 14:16:47.621331+00:00", 
    "created": "2012-07-09 15:48:43.706757+00:00", 
    "title": "private instance IPs can only reach public IPs in other regions, not the same region", 
    "comments": [
        {
            "content": "Take three instances in two regions (A and B) such that they are named A1, A2, and B1.  A1 is the only instance with a public IP: A2 and B1 only have the standard private IPs they were given.  In this situation:\n\n  A1 can reach both of its own interfaces.\n  B1 can reach A1's public IP, but not its private IP.\n  A2 can reach A1's private IP, but not its public IP.  \n\nThis last line is counter-intuitive, as B1 can reach A1's public IP just fine.  In fact, if we bring a public IP up on B1, A2 can reach B1's public IP without trouble.\n\nTraceroutes halt right out of the gate, which may or may not indicate that this is enforced by nova-network itself.", 
            "date_created": "2012-07-09 15:48:43.706757+00:00", 
            "author": "https://api.launchpad.net/1.0/~nick-moffitt"
        }, 
        {
            "content": "FTR, actually A1 can't reach it's public IP either.", 
            "date_created": "2012-07-09 15:53:01.697162+00:00", 
            "author": "https://api.launchpad.net/1.0/~sidnei"
        }, 
        {
            "content": "Confirmed; instances within a region don't appear to be able to contact public addresses for either themselves or other instances in the same region.", 
            "date_created": "2012-07-13 10:44:24.155688+00:00", 
            "author": "https://api.launchpad.net/1.0/~james-page"
        }, 
        {
            "content": "This may be pertinent:\n\nhttp://docs.openstack.org/trunk/openstack-compute/admin/content/associating-public-ip.html\n\n\"Note that you cannot SSH to an instance with a public IP from within the same server as the routing configuration won't allow it.\"\n\nThis would explain the reason why 'a1' can't see its own public address; is it possible that a1/a2 are on the same server?", 
            "date_created": "2012-07-13 10:48:17.864901+00:00", 
            "author": "https://api.launchpad.net/1.0/~james-page"
        }, 
        {
            "content": "From http://docs.openstack.org/folsom/openstack-compute/admin/content/associating-public-ip.html:\n\n\"\"\"\nTraffic between VMs using floating IPs:\n\nNote that due to the way floating IPs are implemented using a source NAT (SNAT rule in iptables), inconsistent behaviour of security groups can be seen if VMs use their floating IP to communicate with other virtual machines - particularly on the same physical host. Traffic from VM to VM accross the fixed network does not have this issue, and this is the recommended path. To ensure traffic doesn't get SNATed to the floating range, explicitly set dmz_cidr=x.x.x.x/y. x.x.x.x/y is the range of floating ips for each pool of floating ips you define. This configuration is also necessary to make source_groups work if the vms in the source group have floating ips.\n\"\"\"\n\nThis might help...", 
            "date_created": "2013-05-29 12:44:45.962803+00:00", 
            "author": "https://api.launchpad.net/1.0/~mthaddon"
        }, 
        {
            "content": "Are a1/a2 on the same host? what version of nova  etc?", 
            "date_created": "2014-01-11 00:19:58.703391+00:00", 
            "author": "https://api.launchpad.net/1.0/~jogo"
        }, 
        {
            "content": "Joe Gordon: Are you unable to reproduce this?  We found documentation of this behaviour in openstack's official Web pages.  Is that not enough?", 
            "date_created": "2014-02-12 11:43:18.216901+00:00", 
            "author": "https://api.launchpad.net/1.0/~nick-moffitt"
        }, 
        {
            "content": "If anything, this looks related to bug #1178745", 
            "date_created": "2014-02-12 11:47:09.874882+00:00", 
            "author": "https://api.launchpad.net/1.0/~nick-moffitt"
        }, 
        {
            "content": "Nick, no documentation of the behavior does not mean the behavior still exists in the code, so it is not enough.", 
            "date_created": "2014-12-11 18:57:11.204585+00:00", 
            "author": "https://api.launchpad.net/1.0/~jogo"
        }, 
        {
            "content": "AFAIK this is a design issue with nova-network that isn't easy to fix. The preffered way forward is to Neutron.", 
            "date_created": "2015-01-22 21:59:21.927627+00:00", 
            "author": "https://api.launchpad.net/1.0/~jogo"
        }
    ], 
    "closed": "2015-01-22 23:09:14.832770+00:00"
}
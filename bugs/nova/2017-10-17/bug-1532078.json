{
    "status": "Invalid", 
    "last_updated": "2016-01-08 14:44:05.350676+00:00", 
    "description": "The Aggregate object has an availability_zone property that, when accessed, gets the availability zone as a key/value stored in the metadata field. The problem is, the metadata field is nullable, so if an Aggregate object is created with no metadata, calling the availability_zone property will explode because it is trying to get the 'availability_zone' key on the metadata field.\n\nHere is a simple test that fails to show the problem (put in nova/tests/unit/objects/test_aggregate.py):\n\ndef test_get_availability_zone_with_null_metadata(self):\n        agg = aggregate.Aggregate()\n        self.assertIsNone(agg.availability_zone)\n\nHere's the result of the test:\n\nnova.tests.unit.objects.test_aggregate.TestAggregateObject.test_get_availability_zone_with_null_metadata\n--------------------------------------------------------------------------------------------------------\n\nCaptured traceback:\n~~~~~~~~~~~~~~~~~~~\n    Traceback (most recent call last):\n      File \"nova/tests/unit/objects/test_aggregate.py\", line 192, in test_get_availability_zone_with_null_metadata\n        self.assertIsNone(agg.availability_zone)\n      File \"nova/objects/aggregate.py\", line 151, in availability_zone\n        return self.metadata.get('availability_zone', None)\n      File \"/opt/stack/nova/.tox/py27/local/lib/python2.7/site-packages/oslo_versionedobjects/base.py\", line 67, in getter\n        self.obj_load_attr(name)\n      File \"/opt/stack/nova/.tox/py27/local/lib/python2.7/site-packages/oslo_versionedobjects/base.py\", line 578, in obj_load_attr\n        _(\"Cannot load '%s' in the base class\") % attrname)\n    NotImplementedError: Cannot load 'metadata' in the base class", 
    "tags": [], 
    "importance": "Undecided", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1532078", 
    "owner": "https://api.launchpad.net/1.0/~rlrossit", 
    "id": 1532078, 
    "index": 7218, 
    "openned": "2016-01-08 04:47:22.724262+00:00", 
    "created": "2016-01-08 04:47:22.724262+00:00", 
    "title": "Aggregate availability_zone access throws NotImplementedError when metadata is null", 
    "comments": [
        {
            "content": "The Aggregate object has an availability_zone property that, when accessed, gets the availability zone as a key/value stored in the metadata field. The problem is, the metadata field is nullable, so if an Aggregate object is created with no metadata, calling the availability_zone property will explode because it is trying to get the 'availability_zone' key on the metadata field.\n\nHere is a simple test that fails to show the problem (put in nova/tests/unit/objects/test_aggregate.py):\n\ndef test_get_availability_zone_with_null_metadata(self):\n        agg = aggregate.Aggregate()\n        self.assertIsNone(agg.availability_zone)\n\nHere's the result of the test:\n\nnova.tests.unit.objects.test_aggregate.TestAggregateObject.test_get_availability_zone_with_null_metadata\n--------------------------------------------------------------------------------------------------------\n\nCaptured traceback:\n~~~~~~~~~~~~~~~~~~~\n    Traceback (most recent call last):\n      File \"nova/tests/unit/objects/test_aggregate.py\", line 192, in test_get_availability_zone_with_null_metadata\n        self.assertIsNone(agg.availability_zone)\n      File \"nova/objects/aggregate.py\", line 151, in availability_zone\n        return self.metadata.get('availability_zone', None)\n      File \"/opt/stack/nova/.tox/py27/local/lib/python2.7/site-packages/oslo_versionedobjects/base.py\", line 67, in getter\n        self.obj_load_attr(name)\n      File \"/opt/stack/nova/.tox/py27/local/lib/python2.7/site-packages/oslo_versionedobjects/base.py\", line 578, in obj_load_attr\n        _(\"Cannot load '%s' in the base class\") % attrname)\n    NotImplementedError: Cannot load 'metadata' in the base class", 
            "date_created": "2016-01-08 04:47:22.724262+00:00", 
            "author": "https://api.launchpad.net/1.0/~rlrossit"
        }, 
        {
            "content": "We assume by design that the AZ information is only a specific key/value pair of the metadata dict (where the key is 'availability_zone').\n\nTrying to access the AZ info if the metadata field is unset goes against that design decision because it makes no sense to persist it differently at the object layer. Having a level of indirection for accessing it doesn't mean we should have a defensive approach for accessing that information.", 
            "date_created": "2016-01-08 14:44:04.853365+00:00", 
            "author": "https://api.launchpad.net/1.0/~sylvain-bauza"
        }
    ], 
    "closed": "2016-01-08 14:40:39.936608+00:00"
}
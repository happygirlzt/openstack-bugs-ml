{
    "status": "Opinion", 
    "last_updated": "2014-09-18 23:42:58.527608+00:00", 
    "description": "Grizzly included a new feature to keep a history of actions performed on an instance.  The history kept in the database is unbounded.  As a result, a malicious user could perform actions in a loop and cause the database to grow without bounds.  Some of the quicker actions that could be used to exploit this are pause, unpause, or change password.", 
    "tags": [
        "security"
    ], 
    "importance": "Wishlist", 
    "heat": 14, 
    "link": "https://bugs.launchpad.net/nova/+bug/1175193", 
    "owner": "None", 
    "id": 1175193, 
    "index": 2627, 
    "openned": "2013-05-01 14:33:32.688233+00:00", 
    "created": "2013-05-01 14:33:32.688233+00:00", 
    "title": "Instance actions history is unbounded", 
    "comments": [
        {
            "content": "Grizzly included a new feature to keep a history of actions performed on an instance.  The history kept in the database is unbounded.  As a result, a malicious user could perform actions in a loop and cause the database to grow without bounds.  Some of the quicker actions that could be used to exploit this are pause, unpause, or change password.", 
            "date_created": "2013-05-01 14:33:32.688233+00:00", 
            "author": "https://api.launchpad.net/1.0/~russellb"
        }, 
        {
            "content": "I'm a bit reluctant to consider linear database growth due to normal usage a \"vulnerability\", but I guess if there is a quick and free action out there it could be easily exploited... Opinions ?", 
            "date_created": "2013-05-02 13:12:36.166751+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "Thierry, I would say that there's not a very large risk here.  Pause/unpause, start/stop, and change password are fairly cheap actions that could be used, but as you pointed out the db isn't going to just balloon quickly.  \n\nLooking at other models in the database they seem to be bounded in some way, typically by quotas or physical resources, while instance_actions and events are not.  So, though a small risk, it's still a risk.", 
            "date_created": "2013-05-02 19:35:01.715761+00:00", 
            "author": "https://api.launchpad.net/1.0/~alaski"
        }, 
        {
            "content": "I agree. This feels to me like a bug, but not a security bug. A row in\nthis table is 1,331 bytes assuming ASCII strings, so a user would have\nto change their password nearly 788 times to write a megabyte to the\ndatabase. Additionally, they wouldn't get that maximum row size unless\nthey carefully crafted the request to fill each column.\n\nOn Fri, May 3, 2013 at 5:35 AM, Andrew Laski <email address hidden> wrote:\n> Thierry, I would say that there's not a very large risk here.\n> Pause/unpause, start/stop, and change password are fairly cheap actions\n> that could be used, but as you pointed out the db isn't going to just\n> balloon quickly.\n>\n> Looking at other models in the database they seem to be bounded in some\n> way, typically by quotas or physical resources, while instance_actions\n> and events are not.  So, though a small risk, it's still a risk.\n>\n> ** Attachment added: \"patch\"\n>    https://bugs.launchpad.net/nova/+bug/1175193/+attachment/3662969/+files/patch\n>\n> --\n> You received this bug notification because you are a member of OpenStack\n> Vulnerability Management team, which is subscribed to the bug report.\n> https://bugs.launchpad.net/bugs/1175193\n>\n> Title:\n>   Instance actions history is unbounded\n>\n> To manage notifications about this bug go to:\n> https://bugs.launchpad.net/nova/+bug/1175193/+subscriptions\n", 
            "date_created": "2013-05-02 20:13:59+00:00", 
            "author": "https://api.launchpad.net/1.0/~mikal"
        }, 
        {
            "content": "I could go either way, but I'm tempted to consider this an automated database cleanup more than a vulnerability fix. Russell ?", 
            "date_created": "2013-05-03 12:45:32.196434+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "Yeah, I'd be interested in knowing what Russell thought about\nstrategies to cleanup this table. A periodic task? If so where would\nit sit?\n\nOn Fri, May 3, 2013 at 10:45 PM, Thierry Carrez\n<email address hidden> wrote:\n> I could go either way, but I'm tempted to consider this an automated\n> database cleanup more than a vulnerability fix. Russell ?\n>\n> --\n> You received this bug notification because you are a member of OpenStack\n> Vulnerability Management team, which is subscribed to the bug report.\n> https://bugs.launchpad.net/bugs/1175193\n>\n> Title:\n>   Instance actions history is unbounded\n>\n> To manage notifications about this bug go to:\n> https://bugs.launchpad.net/nova/+bug/1175193/+subscriptions\n", 
            "date_created": "2013-05-03 23:35:26+00:00", 
            "author": "https://api.launchpad.net/1.0/~mikal"
        }, 
        {
            "content": "This seems like a low severity security issue to me.  A user is able to consume resources unbounded in a way that does not cost them any money.  I think we need to treat that sort of thing as a vulnerability.", 
            "date_created": "2013-05-08 14:59:20.264374+00:00", 
            "author": "https://api.launchpad.net/1.0/~russellb"
        }, 
        {
            "content": "Also note, that I did submit a patch on my earlier comment.  That was one direction to go in, the other being a periodic task which could work as well though it still leaves a window of opportunity.", 
            "date_created": "2013-05-08 15:12:19.130172+00:00", 
            "author": "https://api.launchpad.net/1.0/~alaski"
        }, 
        {
            "content": "I'm not sure I agree with this being a bug at all.  :)   One can grow log files without bound, too.  Is that a bug?", 
            "date_created": "2013-05-08 19:01:05.646258+00:00", 
            "author": "https://api.launchpad.net/1.0/~cbehrens"
        }, 
        {
            "content": "\nOk so this is one of those lovely gray areas of informations ecurity, this is obviously a security related issue, but is this a security vulnerability (requiring CVE and full security treatment) or is this a security hardening issue (thus no CVE or full security treatment)?\n\nSo first let's look at trust boundaries. Now the end problem here is that the database gets filled up by spurious log entries. What level of access is needed to accomplish this? Luckily in this case it requires authenticated access, this cannot be done as a non authenicated user from what I am told (if this isn't true please let us know ASAP!). As such if an anonymous user was able to remotely flood the database that would be an obvious security problem, they could kill the system remotely which usually falls into the category of security vulnerability. \n\nBut in this case it requires authenticated access, and in general users are allowed to consume system resources, however typically we do not want to allow a single user, or even a group of users to consume resources in a way that renders the system unstable or unusable. In this case filling up the databse has a very negative effect on the system.\n\nSo this issue falls into the grey area of \"is it security or hardening?\" and then further falls down the rabbit hole of \"how much and how quickly do we allow a user to consume system resources before we call it a security vulnerability?\" So clearly the amount of data logged has a significant impact on this. For example if each pause/unpause/etc action generated say a megabyte of logged data this would be extremely easy to use to fill up the database (even a large database would fill quickly at 1meg/entry). In this case it's approximately 1k per entry, which is enough to make it interesting, assuming a few gigabytes are available then it would take some time for the attacker to exploit this enough times to cause a problem. Additionally because it requires authenticated access it is easy to track down who did it and censor them (e.g. tell them not to do it, remove their account, whatever). \n\nSo with this in mind I am inclined to classify this as a security hardening issue, and not a security vulnerability. This may of course change if new information comes to light (e.g. unauthenticated access allows exploitation, or the amount of data logged per entry can be increased somehow). \n\nNow a note on fixing this: there are several strategies used in logging systems to deal with attacks like this. The first one is a classic syslog \"the last message was repeated X times\", this allows multiple identical log entries to be consolidated quickly and easily, reducing the amount of logging space required and can work well with flooding attacks. The second strategy is to rotate and archive the logs once they hit a certain size (log files typically compress really well). Of course neither of these solutions will completely stop resources from being used, but they will reduce the amount of some of the resources used (e.g. disk space) at the cost of CPU time (to rotate/compress logs). \n\nThere are other solutions that will prevent resources from being abused, but will compromise the integrity of the data available, e.g. using a ring buffer per user (log the last 10000 events and then overwrite the oldest event once you get more than 10000). This would allow an attacker to attack the system in ways that are typically logged, and then cause the log of these activitires to be overwritten by executing 10000 non malicious logged events for example. You can also trade off availability for logging data, for example by blocking actions that can't be logged because the logging is full or has failed. I suspect in almost every use case instance of OpenStack this is not an acceptable tradeoff.\n\nTLDR: this is probably security hardening and not a security flaw. We should fix it by rotating the database entries out and compressing them, as configured by the user.\n\n\n", 
            "date_created": "2013-05-08 19:18:39.794353+00:00", 
            "author": "https://api.launchpad.net/1.0/~kseifried"
        }, 
        {
            "content": "Thanks for the detailed opinion, Kurt!  It looks like everyone agrees that we should treat this as hardening and open this up.", 
            "date_created": "2013-05-08 19:26:26.740703+00:00", 
            "author": "https://api.launchpad.net/1.0/~russellb"
        }, 
        {
            "content": "Awesome, thx Kurt! I definitely agree that it's a grey area... and that if it were wildly asymmetric or unauthenticated this would be much more \"exploitable\".", 
            "date_created": "2013-05-09 09:03:02.214726+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "Moving to medium since I have not seen any reports of issues with this, nor have I seen this cropping up in a large deployment I help maintain.", 
            "date_created": "2014-03-04 18:57:10.774875+00:00", 
            "author": "https://api.launchpad.net/1.0/~alaski"
        }, 
        {
            "content": "It's not really clear that anyone is actually seeing this thing, and there seems to be no interest in fixing it. So it's a pretty theoretical bug right now. ", 
            "date_created": "2014-09-18 23:42:56.756964+00:00", 
            "author": "https://api.launchpad.net/1.0/~sdague"
        }
    ], 
    "closed": "2014-09-18 23:42:28.759188+00:00"
}
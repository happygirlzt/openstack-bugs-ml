{
    "status": "Opinion", 
    "last_updated": "2014-07-10 17:56:52.831226+00:00", 
    "description": "I'm not exactly sure what the interaction is that causes this problem, but it is evidenced very nicely by calling compute_node_get_all. While the MySQL query returns this data in about 2 seconds, it takes another 53 seconds for SQLAlchemy to shove all those results into a list.\n\nHere's the script being run:\n\nhttp://paste.openstack.org/show/44079/\n\nHere are results:\n\nhttp://paste.openstack.org/show/44143/", 
    "tags": [
        "db"
    ], 
    "importance": "Undecided", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1212418", 
    "owner": "None", 
    "id": 1212418, 
    "index": 5229, 
    "openned": "2013-08-14 20:09:56.744575+00:00", 
    "created": "2013-08-14 20:09:56.744575+00:00", 
    "title": "SQLAlchemy performs poorly on large result sets", 
    "comments": [
        {
            "content": "There is more background information on this bug here:\n\nhttps://docs.google.com/document/d/1_DRv7it_mwalEZzLy5WO92TJcummpmWL4NWsWf0UWiQ\n\nThe gist of the problem is that scheduler calls compute_node_get_all on every request to run an instance. Even at large scale (~17k compute nodes) The mysql query for this is reasonably fast (2 seconds) but the time that it takes to actually return a call to compute_node_get_all is much longer. Here's some examples:\n\nI run this in my production environment:\n\nhttp://paste.openstack.org/show/44079/\n\nHere are results:\n\nhttp://paste.openstack.org/show/44143/", 
            "date_created": "2013-08-14 20:09:56.744575+00:00", 
            "author": "https://api.launchpad.net/1.0/~geekinutah"
        }, 
        {
            "content": "Same thing as bug #1212428", 
            "date_created": "2013-08-14 20:46:33.488949+00:00", 
            "author": "https://api.launchpad.net/1.0/~geekinutah"
        }, 
        {
            "content": "From discussions in #sqlalchemy:\n\n21:04 < agronholm> you could start by not doing joined loading on the stats relationship\n21:05 < agronholm> and instead query for the __table__ of the statistics class\n21:05 < agronholm> in a separate query\n21:06 < agronholm> that way sqla will skip collection manipulation and model class \n                   creation\n21:06 < agronholm> err, model class instantiation\n\n21:12 < agronholm> query for ModelClass.__table__ instead of ModelClass to skip model \n                   class instantiation\n21:12 < agronholm> and the ORM stuff\n21:13 < agronholm> so it's better to do that with the statistics class in a separate \n                   query\n\n", 
            "date_created": "2013-08-14 21:24:44.197183+00:00", 
            "author": "https://api.launchpad.net/1.0/~jogo"
        }, 
        {
            "content": "From running cProfile on the script above: http://paste.openstack.org/show/44165/", 
            "date_created": "2013-08-14 22:45:06.816200+00:00", 
            "author": "https://api.launchpad.net/1.0/~jogo"
        }, 
        {
            "content": "In the future we should try moving to using SQLAlchemy core, to preserve the DB agnostic nature and drop the ORM side of things, with Dansmiths's  db object work this should be easier", 
            "date_created": "2013-08-14 22:47:05.593589+00:00", 
            "author": "https://api.launchpad.net/1.0/~jogo"
        }, 
        {
            "content": "with the addition of Mike Bayer (sqlalchemy developer), it looks like there is hope for us on this one.", 
            "date_created": "2014-07-10 17:56:47.143620+00:00", 
            "author": "https://api.launchpad.net/1.0/~jogo"
        }
    ], 
    "closed": "2014-07-10 17:56:50.756896+00:00"
}
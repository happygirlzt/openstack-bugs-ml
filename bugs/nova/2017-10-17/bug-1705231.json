{
    "status": "Fix Released", 
    "last_updated": "2017-10-04 18:36:42.725138+00:00", 
    "description": "When GET allocation_candidate request is sent to the placement api with normal and custom resource requested the placement API returns no allocation candidates. \n\nThe scenario works properly if the two resources requested are from different providers but non of the is a custom resource.\n\nSee the functional test case reproducing the problem: https://review.openstack.org/#/c/485088\nSee the ML thread for the discussion: http://lists.openstack.org/pipermail/openstack-dev/2017-July/119832.html", 
    "tags": [
        "pike-rc-potential", 
        "placement"
    ], 
    "importance": "High", 
    "heat": 8, 
    "link": "https://bugs.launchpad.net/nova/+bug/1705231", 
    "owner": "https://api.launchpad.net/1.0/~cdent", 
    "id": 1705231, 
    "index": 2107, 
    "openned": "2017-07-19 10:13:02.858532+00:00", 
    "created": "2017-07-19 10:13:02.858532+00:00", 
    "title": "Placement returns no allocation candidate for request that  needs both compute resources and custom shared resources", 
    "comments": [
        {
            "content": "When GET allocation_candidate request is sent to the placement api with normal and custom resource requested the placement API returns no allocation candidates. \n\nThe scenario works properly if the two resources requested are from different providers but non of the is a custom resource.\n\nSee the functional test case reproducing the problem: https://review.openstack.org/#/c/485088\nSee the ML thread for the discussion: http://lists.openstack.org/pipermail/openstack-dev/2017-July/119832.html", 
            "date_created": "2017-07-19 10:13:02.858532+00:00", 
            "author": "https://api.launchpad.net/1.0/~balazs-gibizer"
        }, 
        {
            "content": "Locally this test is fluctuating for me. The easiest way to make it pass is using ostestr direclty in an activated virtual env. I.e.:\nostestr nova.tests.functional.db.test_resource_provider.AllocationCandidatesTestCase.test_local_with_shared_custom_resource\n\nHere is the select emitted when it fails and when it passes:\npassing: http://paste.openstack.org/show/615849/\nfailing: http://paste.openstack.org/show/615850/", 
            "date_created": "2017-07-19 13:20:32.820491+00:00", 
            "author": "https://api.launchpad.net/1.0/~balazs-gibizer"
        }, 
        {
            "content": "Related fix proposed to branch: master\nReview: https://review.openstack.org/485209", 
            "date_created": "2017-07-19 13:42:41.527170+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "I did a bit more poking around and the fluctuating is based on the ordering of the sharing_providers dict. If the sharing provider comes first, the test fails, if the dict is sorted by sps, the test consistently passes. The latter results in an initial inner join on the non-shared (and standard class) inventory whereas the former results in a left outer join on the shared (and custom class) inventory. The pastes linked above show the different sql and also the different ordered of the sharing_providers dict.\n\nThis code change gets things working:\n\n  for rc_id, sps in sorted(sharing_providers.items(), key=lambda x: x[1]):\n\ninstead of\n\n  for rc_id, sps in sharing_providers.items():\n\nHowever, I suspect that is simply masking a the real issue.", 
            "date_created": "2017-07-19 14:31:00.944382+00:00", 
            "author": "https://api.launchpad.net/1.0/~cdent"
        }, 
        {
            "content": "@cdent: interesting detective work :) wish I'd seen this earlier! I've spent the last few hours sprinkling LOG statements all over the place.", 
            "date_created": "2017-07-19 23:00:25.239489+00:00", 
            "author": "https://api.launchpad.net/1.0/~jaypipes"
        }, 
        {
            "content": "Aha, so yeah, the sorted() solution makes a lot of sense. The SQL JOINs that are generated by the _get_all_with_shared() function depend on a specific order. For non-shared resources, an INNER JOIN is done to the preceding derived query whereas for shared resources, a LEFT JOIN is done.\n\nIf we do the LEFT JOIN followed by INNER JOINs, the SQL expression will produce an incorrect projection.", 
            "date_created": "2017-07-19 23:07:56.379167+00:00", 
            "author": "https://api.launchpad.net/1.0/~jaypipes"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/485088\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=5858fb7995bb86cb976f90ba3f2712f3fd2d78fa\nSubmitter: Jenkins\nBranch:    master\n\ncommit 5858fb7995bb86cb976f90ba3f2712f3fd2d78fa\nAuthor: Balazs Gibizer <email address hidden>\nDate:   Wed Jul 19 10:11:32 2017 +0200\n\n    placement: proper JOIN order for shared resources\n    \n    There is an existing functional test that proves that shared non custom\n    resource (DISK_GB) mixed with non shared compute resources works. This\n    patch adds a test case where the shared resource is also a custom\n    resource.\n    \n    An issue in the _get_all_with_shared() function where the dict of\n    resource to sharing resource providers that is used to construct the\n    JOIN chain was not being sorted so that non-shared resources were added\n    to the JOIN chain ahead of shared resources.\n    \n    The SQL JOINs that are generated by the _get_all_with_shared() function\n    depend on a specific order. For non-shared resources, an INNER JOIN is\n    done to the preceding derived query whereas for shared resources, a\n    LEFT JOIN is done.\n    \n    If we do the LEFT JOIN followed by INNER JOINs, the SQL expression will\n    produce an incorrect projection.\n    \n    Fixes-bug: #1705231\n    Co-Authored-By: Chris Dent <email address hidden>\n    Co-Authored-By: Jay Pipes <email address hidden>\n    Change-Id: If47c970eb57dcb81f2ce40104ceec42a92c59066\n", 
            "date_created": "2017-07-21 23:22:29.479332+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/485209\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=9984b91dc17657054938961a6a6b8cea7619ccd7\nSubmitter: Jenkins\nBranch:    master\n\ncommit 9984b91dc17657054938961a6a6b8cea7619ccd7\nAuthor: Chris Dent <email address hidden>\nDate:   Wed Jul 19 14:38:31 2017 +0100\n\n    [placement] gabbi tests for shared custom resource class\n    \n    The change adds a gabbi test to cover the case where one of the resources\n    comes from shared resource provider that uses a custom resource class.\n    There had been a bug in the SQL that caused this to be incorrect, it is\n    now fixed. This simply adds some additional tests to confirm things are\n    working as desired. See the related bug for more information.\n    \n    The behavior with the same query on /allocation_candidates and\n    /resource_providers is intentionally different, as described in the\n    comments on the last two tests.\n    \n    Change-Id: Ic42f0cd74665574129d36eeaa093f3f316879592\n    Related-Bug: #1705231\n", 
            "date_created": "2017-10-04 18:36:41.718007+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ], 
    "closed": "2017-07-21 23:22:27.713224+00:00"
}
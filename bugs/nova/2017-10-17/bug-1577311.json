{
    "status": "Invalid", 
    "last_updated": "2016-05-03 13:40:38.033334+00:00", 
    "description": "This error happens in Mitaka on ubuntu 14.04\nI have configured nova on separate nodes\n1) 192.168.1.177 (Glance)\n2)192.168.1.176(Keystone, and  mysql  for both glance, keystone, nova).\n3)192.168.1.181(nova controller and nova compute).\n\nAm using a python script nova to connect and everything works fine, I can list flavors, i can list images, but when i try to create\na server with nova.servers.create(name=\"TestServer\", image=images_returned[0], flavors=flavors_avail[0])\n\nIt looks like the api does not connect to the database server, rather than connect to the database server \"192.168.1.176\" it connects to itself that is 192.168.1.181, I  have not configured the mysql to run on the nova controler rather the mysql database server is running on  a different node as described on the onset. \n\nWorse yet it that it connects to the real database when I list images and other flavors, but when i try to create the server it brings these areas \n ERROR nova.api.openstack.extensions OperationalError: (pymysql.err.OperationalError) (1045, u\"Access denied for user 'nova'@'192.168.1.181' (using password: YES)\")\n\nAnd that is not the database i configured it to use i configured it to use a different database 192.168.1.176\n\nHere are my configs.\n\n\n[DEFAULT]\ndhcpbridge_flagfile=/etc/nova/nova.conf\ndhcpbridge=/usr/bin/nova-dhcpbridge\nlog-dir=/var/log/nova\nstate_path=/var/lib/nova\nlock_path=/var/lock/nova\nforce_dhcp_release=True\nlibvirt_use_virtio_for_bridges=True\nverbose=True\nec2_private_dns_show_ip=True\napi_paste_config=/etc/nova/api-paste.ini\nenabled_apis=ec2,osapi_compute,metadata\n\n# Libvirt and Virtualization\nconnection_type=libvirt\nlibvirt_type=qemu\n\n\n# Database\n#connection = mysql://nova:nova/@192.168.1.176/nova\n\n# Messaging\nrabbit_host=192.168.1.181\n\n# EC2 API Flags\nec2_host=192.168.1.181\nec2_dmz_host=192.168.1.181\nec2_private_dns_show_ip=True\n\n\n# Networking\npublic_interface=eth0\nauto_assign_floating_ip=True\n\n# Image\nimage_service=nova.image.Glance.GlanceIageService\nglance_api_servers=192.168.1.177:9292\n\n# Scheduler\nscheduler_default_filters=AllHostsFilter\n\n# Object storage\niscsi_helper=tgtadm\n\n# Auth\nkeystone_ec2_url=http://192.168.1.176:6000/v3/ec2tokens\nauth_stragety=keystone\n\n\n[glance]\napi_servers=192.168.1.177:9292\nhost=192.168.1.177\nport=9292\nprotocol=http\n\n[libvirt]\nvirt_type=qemu\n\n\n[api_database]\n\n#\n# From nova\n#\n# The SQLAlchemy connection string to use to connect to the Nova API database.\n# (string value)\nconnection = mysql://nova:nova/@192.168.1.176/nova\n\n# If True, SQLite uses synchronous mode. (boolean value)\n#sqlite_synchronous = true\n\n# The SQLAlchemy connection string to use to connect to the slave database.\n# (string value)\n#slave_connection = <None>\n\n# The SQL mode to be used for MySQL sessions. This option, including the\n# default, overrides any server-set SQL mode. To use whatever SQL mode is set\n# by the server configuration, set this to no value. Example: mysql_sql_mode=\n# (string value)\nmysql_sql_mode = TRADITIONAL\n\n# Timeout before idle SQL connections are reaped. (integer value)\n#idle_timeout = 3600\n\n# Maximum number of SQL connections to keep open in a pool. (integer value)\n#max_pool_size = <None>\n\n# Maximum number of database connection retries during startup. Set to -1 to\n# specify an infinite retry count. (integer value)\n#max_retries = 10\n\n# Interval between retries of opening a SQL connection. (integer value)\n#retry_interval = 10\n\n# If set, use this value for max_overflow with SQLAlchemy. (integer value)\n\n# Verbosity of SQL debugging information: 0=None, 100=Everything. (integer\n# value)\nconnection_debug = 100\n\n# Add Python stack traces to SQL as comment strings. (boolean value)\nconnection_trace = true\n\n# If set, use this value for pool_timeout with SQLAlchemy. (integer value)\n#pool_timeout = <None>", 
    "tags": [
        "cells"
    ], 
    "importance": "Undecided", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1577311", 
    "owner": "None", 
    "id": 1577311, 
    "index": 7454, 
    "openned": "2016-05-02 07:20:43.987901+00:00", 
    "created": "2016-05-02 07:20:43.987901+00:00", 
    "title": "OperationalError: (pymysql.err.OperationalError)", 
    "comments": [
        {
            "content": "This error happens in Mitaka on ubuntu 14.04\nI have configured nova on separate nodes\n1) 192.168.1.177 (Glance)\n2)192.168.1.176(Keystone, and  mysql  for both glance, keystone, nova).\n3)192.168.1.181(nova controller and nova compute).\n\nAm using a python script nova to connect and everything works fine, I can list flavors, i can list images, but when i try to create\na server with nova.servers.create(name=\"TestServer\", image=images_returned[0], flavors=flavors_avail[0])\n\nIt looks like the api does not connect to the database server, rather than connect to the database server \"192.168.1.176\" it connects to itself that is 192.168.1.181, I  have not configured the mysql to run on the nova controler rather the mysql database server is running on  a different node as described on the onset. \n\nWorse yet it that it connects to the real database when I list images and other flavors, but when i try to create the server it brings these areas \n ERROR nova.api.openstack.extensions OperationalError: (pymysql.err.OperationalError) (1045, u\"Access denied for user 'nova'@'192.168.1.181' (using password: YES)\")\n\nAnd that is not the database i configured it to use i configured it to use a different database 192.168.1.176\n\nHere are my configs.\n\n\n[DEFAULT]\ndhcpbridge_flagfile=/etc/nova/nova.conf\ndhcpbridge=/usr/bin/nova-dhcpbridge\nlog-dir=/var/log/nova\nstate_path=/var/lib/nova\nlock_path=/var/lock/nova\nforce_dhcp_release=True\nlibvirt_use_virtio_for_bridges=True\nverbose=True\nec2_private_dns_show_ip=True\napi_paste_config=/etc/nova/api-paste.ini\nenabled_apis=ec2,osapi_compute,metadata\n\n# Libvirt and Virtualization\nconnection_type=libvirt\nlibvirt_type=qemu\n\n\n# Database\n#connection = mysql://nova:nova/@192.168.1.176/nova\n\n# Messaging\nrabbit_host=192.168.1.181\n\n# EC2 API Flags\nec2_host=192.168.1.181\nec2_dmz_host=192.168.1.181\nec2_private_dns_show_ip=True\n\n\n# Networking\npublic_interface=eth0\nauto_assign_floating_ip=True\n\n# Image\nimage_service=nova.image.Glance.GlanceIageService\nglance_api_servers=192.168.1.177:9292\n\n# Scheduler\nscheduler_default_filters=AllHostsFilter\n\n# Object storage\niscsi_helper=tgtadm\n\n# Auth\nkeystone_ec2_url=http://192.168.1.176:6000/v3/ec2tokens\nauth_stragety=keystone\n\n\n[glance]\napi_servers=192.168.1.177:9292\nhost=192.168.1.177\nport=9292\nprotocol=http\n\n[libvirt]\nvirt_type=qemu\n\n\n[api_database]\n\n#\n# From nova\n#\n# The SQLAlchemy connection string to use to connect to the Nova API database.\n# (string value)\nconnection = mysql://nova:nova/@192.168.1.176/nova\n\n# If True, SQLite uses synchronous mode. (boolean value)\n#sqlite_synchronous = true\n\n# The SQLAlchemy connection string to use to connect to the slave database.\n# (string value)\n#slave_connection = <None>\n\n# The SQL mode to be used for MySQL sessions. This option, including the\n# default, overrides any server-set SQL mode. To use whatever SQL mode is set\n# by the server configuration, set this to no value. Example: mysql_sql_mode=\n# (string value)\nmysql_sql_mode = TRADITIONAL\n\n# Timeout before idle SQL connections are reaped. (integer value)\n#idle_timeout = 3600\n\n# Maximum number of SQL connections to keep open in a pool. (integer value)\n#max_pool_size = <None>\n\n# Maximum number of database connection retries during startup. Set to -1 to\n# specify an infinite retry count. (integer value)\n#max_retries = 10\n\n# Interval between retries of opening a SQL connection. (integer value)\n#retry_interval = 10\n\n# If set, use this value for max_overflow with SQLAlchemy. (integer value)\n\n# Verbosity of SQL debugging information: 0=None, 100=Everything. (integer\n# value)\nconnection_debug = 100\n\n# Add Python stack traces to SQL as comment strings. (boolean value)\nconnection_trace = true\n\n# If set, use this value for pool_timeout with SQLAlchemy. (integer value)\n#pool_timeout = <None>", 
            "date_created": "2016-05-02 07:20:43.987901+00:00", 
            "author": "https://api.launchpad.net/1.0/~wangoloj"
        }, 
        {
            "content": "You have only specified the api_database, not the main database. Both are needed. ", 
            "date_created": "2016-05-03 13:40:37.414212+00:00", 
            "author": "https://api.launchpad.net/1.0/~sdague"
        }
    ], 
    "closed": "2016-05-03 13:39:47.529156+00:00"
}
{
    "status": "Opinion", 
    "last_updated": "2016-02-19 20:19:15.695108+00:00", 
    "description": "Nova's requirements.txt does not list python-ironicclient, meaning a stable/juno nova deployment (at least in our gate) will be running with the most recent release of python-ironicclient.\n\nMany new features have been added to Ironic since juno and have been introduced incrementally via API micro-versions.   The client library released at the time of stable/juno did not send any API version header. The current (kilo) server recognizes this and defaults to the lowest API version (v1.1) it supports. The desired behavior of python-ironicclient is for it to request the greatest API version it understands (presently 1.6) [3].\n\nThe nova.virt.ironic driver in juno/stable depends on node states only available in the corresponding version [1] of Ironic.  These have changed since then and the new node states are exposed via new API micro-versions [2]. Using a new client library with a new server release will result in the new states being returned to Nova. In particular, the state of a node that is available for use, as returned by the v1.1 API is \"NOSTATE\", and as returned by the current Kilo API,  is \"AVAILABLE\". \n\nThe goal is to make the client transparently negotiate which version to use with the Ironic server if the latest version is not supported.  This is a feature that would be introduced in a future python-ironicclient release.\n\nHowever, since Nova is not listing python-ironicclient in its requirements, during upgrades we can end up with a stable/juno Nova using this new client version to speak to a Kilo Ironic server via the most recent API micro versions. This would result in nova driver errors as the Ironic server would be returning node states that stable/juno driver [1] does not understand [2].\n\nWe either need to introduce python-ironicclient as a listed requirement of Nova (at least in stable), or explicitly declare that the driver use the older API version in its client interactions, or require that operators upgrade Nova (and python-ironicclient) to Kilo before upgrading Ironic.\n\n[1] https://git.openstack.org/cgit/openstack/nova/tree/nova/virt/ironic/ironic_states.py?h=stable%2Fjuno\n[2] https://git.openstack.org/cgit/openstack/nova/tree/nova/virt/ironic/ironic_states.py\n[3] http://specs.openstack.org/openstack/ironic-specs/specs/kilo/api-microversions.html", 
    "tags": [], 
    "importance": "Undecided", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1433805", 
    "owner": "None", 
    "id": 1433805, 
    "index": 6739, 
    "openned": "2015-03-18 21:55:53.903929+00:00", 
    "created": "2015-03-18 21:55:39.902833+00:00", 
    "title": "Absence of python-ironicclient in nova requirements.txt making upgrades awkward, python-ironicclient features diffucult", 
    "comments": [
        {
            "content": "Nova's requirements.txt does not list python-ironicclient, meaning a stable/juno nova deployment (at least in our gate) will be running with the most recent release of python-ironicclient.\n\nMany new features have been added to Ironic since juno and have been introduced incrementally via API micro-versions.   The client library released at the time of stable/juno did not send any API version header. The current (kilo) server recognizes this and defaults to the lowest API version (v1.1) it supports. The desired behavior of python-ironicclient is for it to request the greatest API version it understands (presently 1.6) [3].\n\nThe nova.virt.ironic driver in juno/stable depends on node states only available in the corresponding version [1] of Ironic.  These have changed since then and the new node states are exposed via new API micro-versions [2]. Using a new client library with a new server release will result in the new states being returned to Nova. In particular, the state of a node that is available for use, as returned by the v1.1 API is \"NOSTATE\", and as returned by the current Kilo API,  is \"AVAILABLE\". \n\nThe goal is to make the client transparently negotiate which version to use with the Ironic server if the latest version is not supported.  This is a feature that would be introduced in a future python-ironicclient release.\n\nHowever, since Nova is not listing python-ironicclient in its requirements, during upgrades we can end up with a stable/juno Nova using this new client version to speak to a Kilo Ironic server via the most recent API micro versions. This would result in nova driver errors as the Ironic server would be returning node states that stable/juno driver [1] does not understand [2].\n\nWe either need to introduce python-ironicclient as a listed requirement of Nova (at least in stable), or explicitly declare that the driver use the older API version in its client interactions, or require that operators upgrade Nova (and python-ironicclient) to Kilo before upgrading Ironic.\n\n[1] https://git.openstack.org/cgit/openstack/nova/tree/nova/virt/ironic/ironic_states.py?h=stable%2Fjuno\n[2] https://git.openstack.org/cgit/openstack/nova/tree/nova/virt/ironic/ironic_states.py\n[3] http://specs.openstack.org/openstack/ironic-specs/specs/kilo/api-microversions.html", 
            "date_created": "2015-03-18 21:55:39.902833+00:00", 
            "author": "https://api.launchpad.net/1.0/~gandelman-a"
        }, 
        {
            "content": "This is also an issue for upgrades where Nova to Kilo is upgraded before Ironic:\n\nKilo Ironic added support to its node API for config drives.  Kilo Nova takes advantage of this via support added to the client.  When running a Juno Ironic with a Kilo Nova, the nova driver attempts to unconditionally pass config drive to the ironic node.  In the case of a Juno Ironic API server, this field is unknown and returns a 400. See https://bugs.launchpad.net/ironic/+bug/1433727", 
            "date_created": "2015-03-19 20:02:04.864405+00:00", 
            "author": "https://api.launchpad.net/1.0/~gandelman-a"
        }, 
        {
            "content": "Very good catch! I think the Ironic part is largely duplicate of #1433727, so I'm closing it here.", 
            "date_created": "2015-03-23 11:20:58.469893+00:00", 
            "author": "https://api.launchpad.net/1.0/~divius"
        }, 
        {
            "content": "So instance spawning works okay with stable/juno using the new API, but instance deletion is where the problem occurs:\n\nhttps://git.openstack.org/cgit/openstack/nova/tree/nova/virt/ironic/driver.py?h=stable%2Fjuno#n692", 
            "date_created": "2015-03-23 22:57:10.571016+00:00", 
            "author": "https://api.launchpad.net/1.0/~gandelman-a"
        }, 
        {
            "content": "Fix proposed to branch: stable/juno\nReview: https://review.openstack.org/167038", 
            "date_created": "2015-03-23 23:18:52.078215+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Can this just be handled with changing the required upgrade order? Just make ironic go first?", 
            "date_created": "2015-03-30 11:34:58.271807+00:00", 
            "author": "https://api.launchpad.net/1.0/~sdague"
        }, 
        {
            "content": "I'm not really convinced this is a Nova issue, but non diruptive changes might be allowed here.", 
            "date_created": "2015-03-30 11:35:48.570203+00:00", 
            "author": "https://api.launchpad.net/1.0/~sdague"
        }, 
        {
            "content": "Change abandoned by Adam Gandelman (<email address hidden>) on branch: stable/juno\nReview: https://review.openstack.org/167038", 
            "date_created": "2015-06-25 21:32:05.832814+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ], 
    "closed": "2015-03-30 11:35:23.867449+00:00"
}
{
    "status": "Fix Released", 
    "last_updated": "2015-10-15 09:02:52.189260+00:00", 
    "description": "Currently in the NUMA topology case (so multi-node guest, dedicated CPUs, hugepages in the guest, etc.) a single guest is not allowed to consume more CPU/RAM than the host actually has in total regardless of the specified overcommit ratio.  In other words, the overcommit ratio only applies when the host resources are being used by multiple guests.  A given host resource can only be used once by any particular guest.\n\nSo as an example, if the host has 2 pCPUs in total for guests, a single guest instance is not allowed to use more than 2CPUs but you might be able to have 16 such instances running. (Assuming default CPU overcommit ratio.)\n\nHowever, this is not true when the NUMA topology is not involved.  In that case a host with 2 pCPUs would allow a guest with 3 vCPUs to be spawned.\n\nWe should pick one behaviour as \"correct\" and adjust the other one to match.  Given that the NUMA topology case was discussed more recently, it seems reasonable to select it as the \"correct\" behaviour.", 
    "tags": [
        "compute", 
        "scheduler"
    ], 
    "importance": "Undecided", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1485631", 
    "owner": "https://api.launchpad.net/1.0/~mikal", 
    "id": 1485631, 
    "index": 6982, 
    "openned": "2015-08-17 14:47:29.279018+00:00", 
    "created": "2015-08-17 14:47:29.279018+00:00", 
    "title": "CPU/RAM overcommit treated differently by 'normal' and 'NUMA topology' case", 
    "comments": [
        {
            "content": "Currently in the NUMA topology case (so multi-node guest, dedicated CPUs, hugepages in the guest, etc.) a single guest is not allowed to consume more CPU/RAM than the host actually has in total regardless of the specified overcommit ratio.  In other words, the overcommit ratio only applies when the host resources are being used by multiple guests.  A given host resource can only be used once by any particular guest.\n\nSo as an example, if the host has 2 pCPUs in total for guests, a single guest instance is not allowed to use more than 2CPUs but you might be able to have 16 such instances running. (Assuming default CPU overcommit ratio.)\n\nHowever, this is not true when the NUMA topology is not involved.  In that case a host with 2 pCPUs would allow a guest with 3 vCPUs to be spawned.\n\nWe should pick one behaviour as \"correct\" and adjust the other one to match.  Given that the NUMA topology case was discussed more recently, it seems reasonable to select it as the \"correct\" behaviour.", 
            "date_created": "2015-08-17 14:47:29.279018+00:00", 
            "author": "https://api.launchpad.net/1.0/~cbf123"
        }, 
        {
            "content": "I would say that the \"correct\" behaviour is what NUMA fitting logic does, and that is to not allow overcommit against itself, and we should fix \"normal\" (non - numa) overcommit.", 
            "date_created": "2015-08-17 21:42:41.910871+00:00", 
            "author": "https://api.launchpad.net/1.0/~ndipanov"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/215764", 
            "date_created": "2015-08-21 19:45:52.239073+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/215764\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=95940ccbb9cbf0cbf6421b0650bf3e2c4dd12e61\nSubmitter: Jenkins\nBranch:    master\n\ncommit 95940ccbb9cbf0cbf6421b0650bf3e2c4dd12e61\nAuthor: Chris Friesen <email address hidden>\nDate:   Fri Aug 21 13:34:04 2015 -0600\n\n    Don't allow instance to overcommit against itself\n    \n    Even with overcommit enabled, a single instance shouldn't be allowed\n    to consume more resources than the host has available.\n    \n    The NUMATopologyFilter already gives this behaviour, this is just\n    updating the other filters.\n    \n    DocImpact: the largest size instance you can schedule to a single\n    hypervisor node is the size of that hypervisor node. Overcommit is\n    against other instances, not within a single instance.\n    \n    Change-Id: Ib5f2a5eb69bcfbc4f147be000cba29c0c2d11089\n    Closes-Bug: #1485631\n", 
            "date_created": "2015-08-25 11:02:16.181782+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ], 
    "closed": "2015-09-03 11:47:44.380323+00:00"
}
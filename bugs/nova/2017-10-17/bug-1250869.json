{
    "status": "Invalid", 
    "last_updated": "2013-11-15 15:09:53.154362+00:00", 
    "description": "If a compute manager is stopped / fails during certain operations then the instance will be left stuck with a transitional task_state.\n\nIdeally during compute manager start-up we would identify instances in these states and transition them to a logical stable state.\n\nAlready there are two bugs dealing with specific cases of this problem (instances stuck in BUILDING and DELETING):\nhttps://bugs.launchpad.net/nova/+bug/1247174\nhttps://bugs.launchpad.net/nova/+bug/1197024\n\nThis bug is to avoid raising more individual bugs for other states that require a handling.\n\nMore information (taken from https://etherpad.openstack.org/p/NovaCleaningUpStuckInstances):\nCleaning up \"Stuck\" instance state\n\nWhat do you mean by \"Stuck\" ?\n\"Stuck\" state in this context occurs when an action fails to complete in the computer manager.\nTypically seen on failure / restart\n\nWhy do you care ?\nIn some as state gates actions it stops you from being able to move forwards\nRelying on the user to clean up is a real pin when you want to migrate an instance\nIt's confusing for the users (which means we have to spend time diagnosing and helping to fix it)\n\nIsn't this all going to be fixed by the task manager / clean-shutdown ? \nProbably - but there some even quicker wins that also help towards that, and some issues that\nare also going to be relevent to task manager.\n\nBasic Premis:  The one time you know there is no running thread in the compute manager is during start-up.\nAt that point there are some task states that can be safely cleared / re-processed.  The tricky thing is to \ndisambiguate between an action which has started and failed to complete, and an action which is actually still\non the message queue (given that the compute manager may have been down for some time)\n\nA bit of history:\nWe tried to address all of these and disambiguate the \"still queued\" case by recoding the task_state seen on the compute manager at the\nstart of the action, but that was (rightly) blocked on because it involved more DB access and is going to be fixed by task manager.\nAre now re-working some easier cases that don't need the disambiguation. \nhttps://review.openstack.org/#/c/47836/ \n\nEasy cases:    \nDeleting:    It's always safe to go ahead and rerun the delete.\n\nBuliding:   Can always be put into an error state.  If the message was still on the queue instance.host won't have been set\n\nImage_pending_upload / Image_uploading:   Can be cleared - these are only set in the compute manager.\n\nPowering Off:   re-run the power off.  If the VM is already off, or the request is in the queue this is a no-op.\n\nPowering On:  re-run the power on: If the VM is already off, or the request is in the queue this is a no-op.\n\nAll accepted as worth doing - submit as separte patches\n\nHarder cases:\nImage_snaphot:  (Set in API) - could be cleared on start-up and re-asserted on the compute manager at the start\nof snapshot to cover the case of a still queued request\n\nRebooting:\n    If the VM isn't running - reboot it  (risk is a second reboot)\n    If the VM is running - just clear the status (risk is a user needs to make another reboot)\n    \nAccepted to add additional task_state value to be set on compute manager to disambiguate the queued vs started case\n    \nEven harder:\nRebuilding:  Would be nice to be able to treat this like Building and go to an error state, but we can't use instance.host to\ndisambiguate.   We could do something here if we add an extra task state (Rebuild_started) that is set immediatly on the \ncompute manager.   Could use the same approach to remove the risk of missed / additional reboots.\n\nAs above", 
    "tags": [], 
    "importance": "Undecided", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1250869", 
    "owner": "https://api.launchpad.net/1.0/~dave-mcnally", 
    "id": 1250869, 
    "index": 5551, 
    "openned": "2013-11-13 14:19:08.564497+00:00", 
    "created": "2013-11-13 14:19:08.564497+00:00", 
    "title": "Recover from 'stuck' states on compute manager start-up", 
    "comments": [
        {
            "content": "If a compute manager is stopped / fails during certain operations then the instance will be left stuck with a transitional task_state.\n\nIdeally during compute manager start-up we would identify instances in these states and transition them to a logical stable state.\n\nAlready there are two bugs dealing with specific cases of this problem (instances stuck in BUILDING and DELETING):\nhttps://bugs.launchpad.net/nova/+bug/1247174\nhttps://bugs.launchpad.net/nova/+bug/1197024\n\nThis bug is to avoid raising more individual bugs for other states that require a handling.\n\nMore information (taken from https://etherpad.openstack.org/p/NovaCleaningUpStuckInstances):\nCleaning up \"Stuck\" instance state\n\nWhat do you mean by \"Stuck\" ?\n\"Stuck\" state in this context occurs when an action fails to complete in the computer manager.\nTypically seen on failure / restart\n\nWhy do you care ?\nIn some as state gates actions it stops you from being able to move forwards\nRelying on the user to clean up is a real pin when you want to migrate an instance\nIt's confusing for the users (which means we have to spend time diagnosing and helping to fix it)\n\nIsn't this all going to be fixed by the task manager / clean-shutdown ? \nProbably - but there some even quicker wins that also help towards that, and some issues that\nare also going to be relevent to task manager.\n\nBasic Premis:  The one time you know there is no running thread in the compute manager is during start-up.\nAt that point there are some task states that can be safely cleared / re-processed.  The tricky thing is to \ndisambiguate between an action which has started and failed to complete, and an action which is actually still\non the message queue (given that the compute manager may have been down for some time)\n\nA bit of history:\nWe tried to address all of these and disambiguate the \"still queued\" case by recoding the task_state seen on the compute manager at the\nstart of the action, but that was (rightly) blocked on because it involved more DB access and is going to be fixed by task manager.\nAre now re-working some easier cases that don't need the disambiguation. \nhttps://review.openstack.org/#/c/47836/ \n\nEasy cases:    \nDeleting:    It's always safe to go ahead and rerun the delete.\n\nBuliding:   Can always be put into an error state.  If the message was still on the queue instance.host won't have been set\n\nImage_pending_upload / Image_uploading:   Can be cleared - these are only set in the compute manager.\n\nPowering Off:   re-run the power off.  If the VM is already off, or the request is in the queue this is a no-op.\n\nPowering On:  re-run the power on: If the VM is already off, or the request is in the queue this is a no-op.\n\nAll accepted as worth doing - submit as separte patches\n\nHarder cases:\nImage_snaphot:  (Set in API) - could be cleared on start-up and re-asserted on the compute manager at the start\nof snapshot to cover the case of a still queued request\n\nRebooting:\n    If the VM isn't running - reboot it  (risk is a second reboot)\n    If the VM is running - just clear the status (risk is a user needs to make another reboot)\n    \nAccepted to add additional task_state value to be set on compute manager to disambiguate the queued vs started case\n    \nEven harder:\nRebuilding:  Would be nice to be able to treat this like Building and go to an error state, but we can't use instance.host to\ndisambiguate.   We could do something here if we add an extra task state (Rebuild_started) that is set immediatly on the \ncompute manager.   Could use the same approach to remove the risk of missed / additional reboots.\n\nAs above", 
            "date_created": "2013-11-13 14:19:08.564497+00:00", 
            "author": "https://api.launchpad.net/1.0/~dave-mcnally"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/56223", 
            "date_created": "2013-11-13 14:43:30.127863+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "This bug is now covered by a blueprint:\nhttps://blueprints.launchpad.net/nova/+spec/recover-stuck-state\n\nAs such the bug can probably be closed.", 
            "date_created": "2013-11-15 11:15:57.102270+00:00", 
            "author": "https://api.launchpad.net/1.0/~dave-mcnally"
        }
    ], 
    "closed": "2013-11-15 15:09:51.190346+00:00"
}
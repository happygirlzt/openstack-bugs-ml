{
    "status": "Fix Released", 
    "last_updated": "2014-10-16 08:58:06.866457+00:00", 
    "description": "tl;dr\n\nIn a few versions of oslo.db (maybe when we release 1.0.0?), every project using oslo.db should inspect their code and remove usages of 'raw' DB exceptions like IntegrityError/OperationalError/etc from except clauses and replace them with the corresponding custom exceptions from oslo.db (at least a base one - DBError).\n\nFull version\n\nA recent commit to oslo.db changed the way the 'raw' DB exceptions are wrapped (e.g. IntegrityError, OperationalError, etc). Previously, we used decorators on Session methods and wrapped those exceptions with oslo.db custom ones. This is mostly useful for handling them later (e.g. to retry DB API methods on deadlocks).\n\nThe problem with Session decorators was that it wasn't possible to catch and wrap all possible exceptions. E.g. SA Core exceptions and exceptions raised in Query.all() calls were ignored. Now we are using a low level SQLAlchemy event to catch all possible DB exceptions. This means that if consuming projects had workarounds for those cases and expected 'raw' exceptions instead of oslo.db ones, they would be broken. That's why we *temporarily* added both 'raw' exceptions and new ones to expect clauses in consuming projects code when they were ported to using of oslo.db to make the transition smooth and allow them to work with different oslo.db versions.\n\nOn the positive side, we now have a solution for problems like https://bugs.launchpad.net/nova/+bug/1283987 when exceptions in Query methods calls weren't handled properly.\n\nIn a few releases of oslo.db we can safely remove 'raw' DB exceptions like IntegrityError/OperationalError/etc from projects code and except only oslo.db specific ones like DBDuplicateError/DBReferenceError/DBDeadLockError/etc (at least, we wrap all the DB exceptions with our base exception DBError, if we haven't found a better match).\n\noslo.db exceptions and their description: https://github.com/openstack/oslo.db/blob/master/oslo/db/exception.py", 
    "tags": [
        "db"
    ], 
    "importance": "Undecided", 
    "heat": 10, 
    "link": "https://bugs.launchpad.net/nova/+bug/1364986", 
    "owner": "https://api.launchpad.net/1.0/~ekudryashova", 
    "id": 1364986, 
    "index": 6403, 
    "openned": "2014-09-03 14:24:01.194952+00:00", 
    "created": "2014-09-03 14:24:01.194952+00:00", 
    "title": "oslo.db now wraps all DB exceptions", 
    "comments": [
        {
            "content": "tl;dr\n\nIn a few versions of oslo.db (maybe when we release 1.0.0), every project using oslo.db should inspect their code and remove usages of 'raw' DB exceptions like IntegrityError/OperationalError/etc from except clauses and replace them with the corresponding custom exceptions from oslo.db (at least a base one - DBError).\n\n\nFull version\n\n\nA recent commit to oslo.db changed the way the 'raw' DB exceptions are wrapped (e.g. IntegrityError, OperationalError, etc). Previously, we used decorators on Session methods and wrapped those exceptions with oslo.db custom ones. This is mostly useful for handling them later (e.g. to retry DB API methods on deadlocks).\n\nThe problem with Session decorators was that it wasn't possible to catch and wrap all possible exceptions. E.g. SA Core exceptions and exceptions raised in Query.all() calls were ignored. Now we are using a low level SQLAlchemy event to catch all possible DB exceptions. This means that if consuming projects had workarounds for those cases and expected 'raw' exceptions instead of oslo.db ones, they would be broken. That's why we *temporarily* added both 'raw' exceptions and new ones to expect clauses in consuming projects code when they were ported to using of oslo.db. On the positive side, we now have a solution for problems like https://bugs.launchpad.net/nova/+bug/1283987 when exceptions in Query methods calls weren't handled properly.\n\nIn a few releases of oslo.db we can safely remove 'raw' DB exceptions like IntegrityError/OperationalError/etc from projects code and except only oslo.db specific ones like DBDuplicateError/DBReferenceError/DBDeadLockError/etc (at least, we wrap all the DB exceptions with our base exception DBError, if we haven't found a better match).\n\noslo.db exceptions and their description: https://github.com/openstack/oslo.db/blob/master/oslo/db/exception.py", 
            "date_created": "2014-09-03 14:24:01.194952+00:00", 
            "author": "https://api.launchpad.net/1.0/~rpodolyaka"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/101901\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=1b83b2f11054ddd3f72fe75c5cef496060afcb3a\nSubmitter: Jenkins\nBranch:    master\n\ncommit 1b83b2f11054ddd3f72fe75c5cef496060afcb3a\nAuthor: Andrey Kurilin <email address hidden>\nDate:   Sat Jun 21 13:56:42 2014 +0300\n\n    Move to oslo.db\n    \n    Replace common oslo code nova.openstack.common.db by usage\n    of oslo.db library and remove common code.\n    \n    Replaced catching of raw sqlalchemy exceptions by catches\n    of oslo.db exceptions(such as DBError, DBDuplicateEntry, etc).\n    \n    Co-Authored-By: Eugeniya Kudryashova  <email address hidden>\n    \n    Closes-Bug: #1364986\n    Closes-Bug: #1353131\n    Closes-Bug: #1283987\n    Closes-Bug: #1274523\n    Change-Id: I0649539e071b2318ec85ed5d70259c949408e64b\n", 
            "date_created": "2014-09-07 12:58:33.405466+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ], 
    "closed": "2014-10-01 07:42:30.588590+00:00"
}
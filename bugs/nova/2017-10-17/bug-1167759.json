{
    "status": "Fix Released", 
    "last_updated": "2014-03-30 22:36:43.275734+00:00", 
    "description": "Currently, if live migration failed, nova compute did not send notification, this caused other service such as nova-scheduler has no chance to do some operation based on the result of live migration.\n\nIt is better that we add notification logic for live_migration logic like other operations such as resize, run instance etc.\n\nA proposed code diff would be as following, please feel free to show your comments if any. Thanks.\n\nAfter some discussion with Joe, we work out a draft code diff for compute/manager.py. I did not get a chance to do some test, just append the logic here. Please show your comments if any.\n\nroot@liugya-ubuntu:~/src/nova-es/nova/nova/compute# git diff\ndiff --git a/nova/compute/manager.py b/nova/compute/manager.py\nindex 687594a..b8b99b6 100755\n--- a/nova/compute/manager.py\n+++ b/nova/compute/manager.py\n@@ -3127,6 +3127,10 @@ class ComputeManager(manager.SchedulerDependentManager):\n         return self.driver.check_can_live_migrate_source(ctxt, instance,\n                                                          dest_check_data)\n \n+    @exception.wrap_exception(notifier=notifier, publisher_id=publisher_id())\n+    @reverts_task_state\n+    @wrap_instance_event\n+    @wrap_instance_fault\n     def pre_live_migration(self, context, instance,\n                            block_migration=False, disk=None,\n                            migrate_data=None):\n@@ -3146,6 +3150,10 @@ class ComputeManager(manager.SchedulerDependentManager):\n \n         network_info = self._get_instance_nw_info(context, instance)\n \n+        self._notify_about_instance_usage(\n+            context, instance, \"pre.live_migration.start\",\n+            network_info=network_info)\n+\n         # TODO(tr3buchet): figure out how on the earth this is necessary\n         fixed_ips = network_info.fixed_ips()\n         if not fixed_ips:\n@@ -3173,7 +3181,14 @@ class ComputeManager(manager.SchedulerDependentManager):\n         # Preparation for block migration\n         if block_migration:\n             self.driver.pre_block_migration(context, instance, disk)\n+        self._notify_about_instance_usage(\n+            context, instance, \"pre.live_migration.end\",\n+            network_info=network_info)\n \n+    @exception.wrap_exception(notifier=notifier, publisher_id=publisher_id())\n+    @reverts_task_state\n+    @wrap_instance_event\n+    @wrap_instance_fault\n     def live_migration(self, context, dest, instance,\n                        block_migration=False, migrate_data=None):\n         \"\"\"Executing live migration.\n@@ -3286,6 +3301,10 @@ class ComputeManager(manager.SchedulerDependentManager):\n                    \"This error can be safely ignored.\"),\n                  instance=instance_ref)\n \n+    @exception.wrap_exception(notifier=notifier, publisher_id=publisher_id())\n+    @reverts_task_state\n+    @wrap_instance_event\n+    @wrap_instance_fault\n     def post_live_migration_at_destination(self, context, instance,\n                                            block_migration=False):\n         \"\"\"Post operations for live migration .\n@@ -3311,6 +3330,9 @@ class ComputeManager(manager.SchedulerDependentManager):\n                                                            migration)\n \n         network_info = self._get_instance_nw_info(context, instance)\n+        self._notify_about_instance_usage(\n+            context, instance, \"post.live_migration.start\",\n+            network_info=network_info)\n         block_device_info = self._get_instance_volume_block_device_info(\n                             context, instance)\n \n@@ -3326,6 +3348,9 @@ class ComputeManager(manager.SchedulerDependentManager):\n \n         # NOTE(vish): this is necessary to update dhcp\n         self.network_api.setup_networks_on_host(context, instance, self.host)\n+        self._notify_about_instance_usage(\n+            context, instance, \"post.live_migration.end\",\n+            network_info=network_info)\n \n     def _rollback_live_migration(self, context, instance,\n                                  dest, block_migration, migrate_data=None):\n@@ -3369,6 +3394,10 @@ class ComputeManager(manager.SchedulerDependentManager):\n             self.compute_rpcapi.rollback_live_migration_at_destination(context,\n                     instance, dest)\n \n+    @exception.wrap_exception(notifier=notifier, publisher_id=publisher_id())\n+    @reverts_task_state\n+    @wrap_instance_event\n+    @wrap_instance_fault\n     def rollback_live_migration_at_destination(self, context, instance):\n         \"\"\"Cleaning up image directory that is created pre_live_migration.\n \n@@ -3377,6 +3406,9 @@ class ComputeManager(manager.SchedulerDependentManager):\n         \"\"\"\n         network_info = self._get_instance_nw_info(context, instance)\n \n+        self._notify_about_instance_usage(\n+            context, instance, \"rollback.live_migration.start\",\n+            network_info=network_info)\n         # NOTE(tr3buchet): tear down networks on destination host\n         self.network_api.setup_networks_on_host(context, instance,\n                                                 self.host, teardown=True)\n@@ -3387,6 +3419,9 @@ class ComputeManager(manager.SchedulerDependentManager):\n                             context, instance)\n         self.driver.destroy(instance, self._legacy_nw_info(network_info),\n                             block_device_info)\n+        self._notify_about_instance_usage(\n+            context, instance, \"rollback.live_migration.end\",\n+            network_info=network_info)\n \n     @manager.periodic_task\n     def _heal_instance_info_cache(self, context)", 
    "tags": [], 
    "importance": "Medium", 
    "heat": 10, 
    "link": "https://bugs.launchpad.net/nova/+bug/1167759", 
    "owner": "https://api.launchpad.net/1.0/~jay-lau-513", 
    "id": 1167759, 
    "index": 3351, 
    "openned": "2013-04-11 08:03:01.332867+00:00", 
    "created": "2013-04-11 08:03:01.332867+00:00", 
    "title": "live migration did not send notification for other componments", 
    "comments": [
        {
            "content": "Currently, if live migration failed, nova compute did not send notification, this caused other service such as nova-scheduler has no chance to do some operation based on the result of live migration.\n\nIt is better that we add notification logic for live_migration logic like other operations such as resize, run instance etc.\n\nA proposed code diff would be as following, please feel free to show your comments if any. Thanks.\n\nAfter some discussion with Joe, we work out a draft code diff for compute/manager.py. I did not get a chance to do some test, just append the logic here. Please show your comments if any.\n\nroot@liugya-ubuntu:~/src/nova-es/nova/nova/compute# git diff\ndiff --git a/nova/compute/manager.py b/nova/compute/manager.py\nindex 687594a..b8b99b6 100755\n--- a/nova/compute/manager.py\n+++ b/nova/compute/manager.py\n@@ -3127,6 +3127,10 @@ class ComputeManager(manager.SchedulerDependentManager):\n         return self.driver.check_can_live_migrate_source(ctxt, instance,\n                                                          dest_check_data)\n \n+    @exception.wrap_exception(notifier=notifier, publisher_id=publisher_id())\n+    @reverts_task_state\n+    @wrap_instance_event\n+    @wrap_instance_fault\n     def pre_live_migration(self, context, instance,\n                            block_migration=False, disk=None,\n                            migrate_data=None):\n@@ -3146,6 +3150,10 @@ class ComputeManager(manager.SchedulerDependentManager):\n \n         network_info = self._get_instance_nw_info(context, instance)\n \n+        self._notify_about_instance_usage(\n+            context, instance, \"pre.live_migration.start\",\n+            network_info=network_info)\n+\n         # TODO(tr3buchet): figure out how on the earth this is necessary\n         fixed_ips = network_info.fixed_ips()\n         if not fixed_ips:\n@@ -3173,7 +3181,14 @@ class ComputeManager(manager.SchedulerDependentManager):\n         # Preparation for block migration\n         if block_migration:\n             self.driver.pre_block_migration(context, instance, disk)\n+        self._notify_about_instance_usage(\n+            context, instance, \"pre.live_migration.end\",\n+            network_info=network_info)\n \n+    @exception.wrap_exception(notifier=notifier, publisher_id=publisher_id())\n+    @reverts_task_state\n+    @wrap_instance_event\n+    @wrap_instance_fault\n     def live_migration(self, context, dest, instance,\n                        block_migration=False, migrate_data=None):\n         \"\"\"Executing live migration.\n@@ -3286,6 +3301,10 @@ class ComputeManager(manager.SchedulerDependentManager):\n                    \"This error can be safely ignored.\"),\n                  instance=instance_ref)\n \n+    @exception.wrap_exception(notifier=notifier, publisher_id=publisher_id())\n+    @reverts_task_state\n+    @wrap_instance_event\n+    @wrap_instance_fault\n     def post_live_migration_at_destination(self, context, instance,\n                                            block_migration=False):\n         \"\"\"Post operations for live migration .\n@@ -3311,6 +3330,9 @@ class ComputeManager(manager.SchedulerDependentManager):\n                                                            migration)\n \n         network_info = self._get_instance_nw_info(context, instance)\n+        self._notify_about_instance_usage(\n+            context, instance, \"post.live_migration.start\",\n+            network_info=network_info)\n         block_device_info = self._get_instance_volume_block_device_info(\n                             context, instance)\n \n@@ -3326,6 +3348,9 @@ class ComputeManager(manager.SchedulerDependentManager):\n \n         # NOTE(vish): this is necessary to update dhcp\n         self.network_api.setup_networks_on_host(context, instance, self.host)\n+        self._notify_about_instance_usage(\n+            context, instance, \"post.live_migration.end\",\n+            network_info=network_info)\n \n     def _rollback_live_migration(self, context, instance,\n                                  dest, block_migration, migrate_data=None):\n@@ -3369,6 +3394,10 @@ class ComputeManager(manager.SchedulerDependentManager):\n             self.compute_rpcapi.rollback_live_migration_at_destination(context,\n                     instance, dest)\n \n+    @exception.wrap_exception(notifier=notifier, publisher_id=publisher_id())\n+    @reverts_task_state\n+    @wrap_instance_event\n+    @wrap_instance_fault\n     def rollback_live_migration_at_destination(self, context, instance):\n         \"\"\"Cleaning up image directory that is created pre_live_migration.\n \n@@ -3377,6 +3406,9 @@ class ComputeManager(manager.SchedulerDependentManager):\n         \"\"\"\n         network_info = self._get_instance_nw_info(context, instance)\n \n+        self._notify_about_instance_usage(\n+            context, instance, \"rollback.live_migration.start\",\n+            network_info=network_info)\n         # NOTE(tr3buchet): tear down networks on destination host\n         self.network_api.setup_networks_on_host(context, instance,\n                                                 self.host, teardown=True)\n@@ -3387,6 +3419,9 @@ class ComputeManager(manager.SchedulerDependentManager):\n                             context, instance)\n         self.driver.destroy(instance, self._legacy_nw_info(network_info),\n                             block_device_info)\n+        self._notify_about_instance_usage(\n+            context, instance, \"rollback.live_migration.end\",\n+            network_info=network_info)\n \n     @manager.periodic_task\n     def _heal_instance_info_cache(self, context)", 
            "date_created": "2013-04-11 08:03:01.332867+00:00", 
            "author": "https://api.launchpad.net/1.0/~tramper2008-deactivatedaccount"
        }, 
        {
            "content": "Please submit patch into Gerrit for review:\nhttps://wiki.openstack.org/wiki/Gerrit_Workflow", 
            "date_created": "2013-05-08 09:05:52.917596+00:00", 
            "author": "https://api.launchpad.net/1.0/~johngarbutt"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/28871", 
            "date_created": "2013-05-11 14:01:33.392582+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/28871\nCommitted: http://github.com/openstack/nova/commit/fe8bddc0f25c78af3cd98ba06b0768f2a99b9093\nSubmitter: Jenkins\nBranch:    master\n\ncommit fe8bddc0f25c78af3cd98ba06b0768f2a99b9093\nAuthor: Jay Lau <email address hidden>\nDate:   Sat May 11 21:53:20 2013 +0800\n\n    Add notification for live migration\n    \n    Fix bug 1167759\n    \n    Currently, if live migration failed, nova compute did not send\n    notification, this causes other services such as nova-scheduler\n    to have no chance to do some operations\n    \n    The fix add notification logic for live_migration like other\n    VM instance operations such as resize, run instance etc.\n    \n    Change-Id: Iaf61f5268e07284fd7d69ff331ce3bacd380c02b\n", 
            "date_created": "2013-05-21 20:55:25.327424+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ], 
    "closed": "2013-05-29 10:26:06.704604+00:00"
}
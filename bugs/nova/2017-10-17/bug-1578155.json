{
    "status": "Fix Released", 
    "last_updated": "2017-02-02 11:11:40.362552+00:00", 
    "description": "Description\n===========\n\n'hw:cpu_thread_policy=prefer' allocates vCPUs in pairs of sibling threads properly. An odd number of vCPUs will allocate pairs and a single one. That single one should not be isolated. So 20 available threads, shall be able to allocate 4 VMs of 5 vCPUs. When booting up the third VM, it is giving an error.\n\nSteps to reproduce\n==================\n\n1.- Creating a flavor:\n\nnova flavor-create pinning auto 1024 10 5\nnova flavor-key pinning set hw:cpu_policy=dedicated\nnova flavor-key pinning set hw:cpu_thread_policy=prefer\nnova flavor-key pinning set hw:numa_nodes=1\n\n2.- Booting up simple VMs:\n\nnova boot testPin1 --flavor pinning --image cirros --nic net-id=$NET_ID\n\nIn my setup, I have 20 available threads:\n\n  NUMANode L#0 (P#0 32GB)\n    Socket L#0 + L3 L#0 (15MB)\n      L2 L#0 (256KB) + L1d L#0 (32KB) + L1i L#0 (32KB) + Core L#0\n        PU L#0 (P#0)\n        PU L#1 (P#12)\n      L2 L#1 (256KB) + L1d L#1 (32KB) + L1i L#1 (32KB) + Core L#1\n        PU L#2 (P#2)\n        PU L#3 (P#14)\n      L2 L#2 (256KB) + L1d L#2 (32KB) + L1i L#2 (32KB) + Core L#2\n        PU L#4 (P#4)\n        PU L#5 (P#16)\n      L2 L#3 (256KB) + L1d L#3 (32KB) + L1i L#3 (32KB) + Core L#3\n        PU L#6 (P#6)\n        PU L#7 (P#18)\n      L2 L#4 (256KB) + L1d L#4 (32KB) + L1i L#4 (32KB) + Core L#4\n        PU L#8 (P#8)\n        PU L#9 (P#20)\n      L2 L#5 (256KB) + L1d L#5 (32KB) + L1i L#5 (32KB) + Core L#5\n        PU L#10 (P#10)\n        PU L#11 (P#22)\n\n  NUMANode L#1 (P#1 32GB) + Socket L#1 + L3 L#1 (15MB)\n    L2 L#6 (256KB) + L1d L#6 (32KB) + L1i L#6 (32KB) + Core L#6\n      PU L#12 (P#1)\n      PU L#13 (P#13)\n    L2 L#7 (256KB) + L1d L#7 (32KB) + L1i L#7 (32KB) + Core L#7\n      PU L#14 (P#3)\n      PU L#15 (P#15)\n    L2 L#8 (256KB) + L1d L#8 (32KB) + L1i L#8 (32KB) + Core L#8\n      PU L#16 (P#5)\n      PU L#17 (P#17)\n    L2 L#9 (256KB) + L1d L#9 (32KB) + L1i L#9 (32KB) + Core L#9\n      PU L#18 (P#7)\n      PU L#19 (P#19)\n    L2 L#10 (256KB) + L1d L#10 (32KB) + L1i L#10 (32KB) + Core L#10\n      PU L#20 (P#9)\n      PU L#21 (P#21)\n    L2 L#11 (256KB) + L1d L#11 (32KB) + L1i L#11 (32KB) + Core L#11\n      PU L#22 (P#11)\n      PU L#23 (P#23)\n\nUsing the cpu_thread_policy:prefer, the behaviour is ok for the first two VMs. So 5 threads are allocated in pairs.\n\n[root@nfvsdn-04 ~(keystone_admin)]# virsh vcpupin 2\nVCPU: CPU Affinity\n----------------------------------\n   0: 10\n   1: 22\n   2: 16\n   3: 4\n   4: 8\n\n[root@nfvsdn-04 ~(keystone_admin)]# virsh vcpupin 3\nVCPU: CPU Affinity\n----------------------------------\n   0: 17\n   1: 5\n   2: 3\n   3: 15\n   4: 11\n\nHowever, eventhough there are enough threads in order to allocate another 2 VMs with the same flavor, I get the following error booting up the third VM:\n\nINFO nova.filters Filtering removed all hosts for the request with instance ID 'cbb53e29-a7da-4c14-a3ad-4fb3aa04f101'. Filter results: ['RetryFilter: (start: 1, end: 1)', 'AvailabilityZoneFilter: (start: 1, end: 1)', 'RamFilter: (start: 1, end: 1)', 'C[r\u2502omputeFilter: (start: 1, end: 1)', 'ComputeCapabilitiesFilter: (start: 1, end: 1)', 'ImagePropertiesFilter: (start: 1, end: 1)', 'CoreFilter: (start: 1, end: 1)', 'NUMATopologyFilter: (start: 1, endo: 0)']\n\n\nThere should be enough space for 4 VMs allocated with cpu_thread_policy=prefer flavor.\n\nExpected result\n===============\n\nTo have 4 VMs up&running with flavor 'pinning'.\n\nActual result\n=============\n\n3rd VM fails at scheduling.\n\nEnvironment\n==========\n\nAll-in-one environment.", 
    "tags": [
        "numa"
    ], 
    "importance": "Medium", 
    "heat": 36, 
    "link": "https://bugs.launchpad.net/nova/+bug/1578155", 
    "owner": "https://api.launchpad.net/1.0/~stephenfinucane", 
    "id": 1578155, 
    "index": 4525, 
    "openned": "2016-05-04 11:04:49.991499+00:00", 
    "created": "2016-05-04 11:04:49.991499+00:00", 
    "title": "'hw:cpu_thread_policy=prefer' misbehaviour", 
    "comments": [
        {
            "content": "Description\n===========\n\n'hw:cpu_thread_policy=prefer' allocates vCPUs in pairs of sibling threads properly. An odd number of vCPUs will allocate pairs and a single one. That single one should not be isolated. So 20 available threads, shall be able to allocate 4 VMs of 5 vCPUs. When booting up the third VM, it is giving an error.\n\nSteps to reproduce\n==================\n\n1.- Creating a flavor:\n\nnova flavor-create pinning auto 1024 10 5\nnova flavor-key pinning set hw:cpu_policy=dedicated\nnova flavor-key pinning set hw:cpu_thread_policy=prefer\nnova flavor-key pinning set hw:numa_nodes=1\n\n2.- Booting up simple VMs:\n\nnova boot testPin1 --flavor pinning --image cirros --nic net-id=$NET_ID\n\nIn my setup, I have 20 available threads:\n\n  NUMANode L#0 (P#0 32GB)\n    Socket L#0 + L3 L#0 (15MB)\n      L2 L#0 (256KB) + L1d L#0 (32KB) + L1i L#0 (32KB) + Core L#0\n        PU L#0 (P#0)\n        PU L#1 (P#12)\n      L2 L#1 (256KB) + L1d L#1 (32KB) + L1i L#1 (32KB) + Core L#1\n        PU L#2 (P#2)\n        PU L#3 (P#14)\n      L2 L#2 (256KB) + L1d L#2 (32KB) + L1i L#2 (32KB) + Core L#2\n        PU L#4 (P#4)\n        PU L#5 (P#16)\n      L2 L#3 (256KB) + L1d L#3 (32KB) + L1i L#3 (32KB) + Core L#3\n        PU L#6 (P#6)\n        PU L#7 (P#18)\n      L2 L#4 (256KB) + L1d L#4 (32KB) + L1i L#4 (32KB) + Core L#4\n        PU L#8 (P#8)\n        PU L#9 (P#20)\n      L2 L#5 (256KB) + L1d L#5 (32KB) + L1i L#5 (32KB) + Core L#5\n        PU L#10 (P#10)\n        PU L#11 (P#22)\n\n  NUMANode L#1 (P#1 32GB) + Socket L#1 + L3 L#1 (15MB)\n    L2 L#6 (256KB) + L1d L#6 (32KB) + L1i L#6 (32KB) + Core L#6\n      PU L#12 (P#1)\n      PU L#13 (P#13)\n    L2 L#7 (256KB) + L1d L#7 (32KB) + L1i L#7 (32KB) + Core L#7\n      PU L#14 (P#3)\n      PU L#15 (P#15)\n    L2 L#8 (256KB) + L1d L#8 (32KB) + L1i L#8 (32KB) + Core L#8\n      PU L#16 (P#5)\n      PU L#17 (P#17)\n    L2 L#9 (256KB) + L1d L#9 (32KB) + L1i L#9 (32KB) + Core L#9\n      PU L#18 (P#7)\n      PU L#19 (P#19)\n    L2 L#10 (256KB) + L1d L#10 (32KB) + L1i L#10 (32KB) + Core L#10\n      PU L#20 (P#9)\n      PU L#21 (P#21)\n    L2 L#11 (256KB) + L1d L#11 (32KB) + L1i L#11 (32KB) + Core L#11\n      PU L#22 (P#11)\n      PU L#23 (P#23)\n\nUsing the cpu_thread_policy:prefer, the behaviour is ok for the first two VMs. So 5 threads are allocated in pairs.\n\n[root@nfvsdn-04 ~(keystone_admin)]# virsh vcpupin 2\nVCPU: CPU Affinity\n----------------------------------\n   0: 10\n   1: 22\n   2: 16\n   3: 4\n   4: 8\n\n[root@nfvsdn-04 ~(keystone_admin)]# virsh vcpupin 3\nVCPU: CPU Affinity\n----------------------------------\n   0: 17\n   1: 5\n   2: 3\n   3: 15\n   4: 11\n\nHowever, eventhough there are enough threads in order to allocate another 2 VMs with the same flavor, I get the following error booting up the third VM:\n\nINFO nova.filters Filtering removed all hosts for the request with instance ID 'cbb53e29-a7da-4c14-a3ad-4fb3aa04f101'. Filter results: ['RetryFilter: (start: 1, end: 1)', 'AvailabilityZoneFilter: (start: 1, end: 1)', 'RamFilter: (start: 1, end: 1)', 'C[r\u2502omputeFilter: (start: 1, end: 1)', 'ComputeCapabilitiesFilter: (start: 1, end: 1)', 'ImagePropertiesFilter: (start: 1, end: 1)', 'CoreFilter: (start: 1, end: 1)', 'NUMATopologyFilter: (start: 1, endo: 0)']\n\n\nThere should be enough space for 4 VMs allocated with cpu_thread_policy=prefer flavor.\n\nExpected result\n===============\n\nTo have 4 VMs up&running with flavor 'pinning'.\n\nActual result\n=============\n\n3rd VM fails at scheduling.\n\nEnvironment\n==========\n\nAll-in-one environment.", 
            "date_created": "2016-05-04 11:04:49.991499+00:00", 
            "author": "https://api.launchpad.net/1.0/~rnoriega-b"
        }, 
        {
            "content": "Change abandoned by Artom Lifshitz (<email address hidden>) on branch: master\nReview: https://review.openstack.org/344992\nReason: You got there first and have more reviews :)", 
            "date_created": "2016-08-10 04:49:45.151342+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Was this a regression in Newton or prevent upgrades to Newton? Otherwise it shouldn't be tagged with newton-rc-potential?", 
            "date_created": "2016-09-13 14:44:02.484429+00:00", 
            "author": "https://api.launchpad.net/1.0/~mriedem"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/342709\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=8361d8d6c315bb3ae71c3ff0147f7d5156bc46f3\nSubmitter: Jenkins\nBranch:    master\n\ncommit 8361d8d6c315bb3ae71c3ff0147f7d5156bc46f3\nAuthor: Stephen Finucane <email address hidden>\nDate:   Tue Jul 19 14:01:53 2016 -0700\n\n    Allow linear packing of cores\n    \n    Given the following single-socket, four-core, HT-enabled CPU topology:\n    \n       +---+---+ +---+---+ +---+---+ +---+---+\n       | x | x | | x |   | | x |   | |   |   |\n       +---+---+ +---+---+ +---+---+ +---+---+\n         1   4     2   5     3   6     4   7\n    \n    Attempting to boot an instance with four cores and no explicit\n    'cpu_thread_policy' should be successful, with cores 5,6,4,7 used.\n    However, the current implementation of this implicit policy attempts to\n    fit the same number of instance cores onto each host CPU. For example,\n    a four core instance would result in either a 2*2 layout (two instance\n    cores on each of two host CPUs), or a 1*4 layout (one instance core on\n    each of four host CPUs). This may be correct behavior *where possible*,\n    but if this is not possible then any and all cores should be used.\n    \n    Resolve this issue by adding a fallthrough case, whereby if the\n    standard fitting policy fails, a linear assignment is used to properly\n    fit the instance cores.\n    \n    Change-Id: I73f7f771b7514060f1f74066e3dea1da8fe74c21\n    Closes-Bug: #1578155\n    mitaka-backport-potential\n", 
            "date_created": "2016-09-20 21:19:59.179238+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Fix proposed to branch: stable/newton\nReview: https://review.openstack.org/373889", 
            "date_created": "2016-09-21 08:32:46.954747+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/373889\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=2dcf8c22f845de6b4ae12ae3d75f89041b839e57\nSubmitter: Jenkins\nBranch:    stable/newton\n\ncommit 2dcf8c22f845de6b4ae12ae3d75f89041b839e57\nAuthor: Stephen Finucane <email address hidden>\nDate:   Tue Jul 19 14:01:53 2016 -0700\n\n    Allow linear packing of cores\n    \n    Given the following single-socket, four-core, HT-enabled CPU topology:\n    \n       +---+---+ +---+---+ +---+---+ +---+---+\n       | x | x | | x |   | | x |   | |   |   |\n       +---+---+ +---+---+ +---+---+ +---+---+\n         1   4     2   5     3   6     4   7\n    \n    Attempting to boot an instance with four cores and no explicit\n    'cpu_thread_policy' should be successful, with cores 5,6,4,7 used.\n    However, the current implementation of this implicit policy attempts to\n    fit the same number of instance cores onto each host CPU. For example,\n    a four core instance would result in either a 2*2 layout (two instance\n    cores on each of two host CPUs), or a 1*4 layout (one instance core on\n    each of four host CPUs). This may be correct behavior *where possible*,\n    but if this is not possible then any and all cores should be used.\n    \n    Resolve this issue by adding a fallthrough case, whereby if the\n    standard fitting policy fails, a linear assignment is used to properly\n    fit the instance cores.\n    \n    Change-Id: I73f7f771b7514060f1f74066e3dea1da8fe74c21\n    Closes-Bug: #1578155\n    (cherry picked from commit 8361d8d6c315bb3ae71c3ff0147f7d5156bc46f3)\n", 
            "date_created": "2016-10-11 22:45:32.899806+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "This issue was fixed in the openstack/nova 14.0.1 release.", 
            "date_created": "2016-10-12 03:48:36.538789+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "This issue was fixed in the openstack/nova 15.0.0.0b1 development milestone.", 
            "date_created": "2016-11-17 13:14:37.318567+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Fix proposed to branch: stable/mitaka\nReview: https://review.openstack.org/427119", 
            "date_created": "2017-01-31 11:47:52.872724+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Change abandoned by Stephen Finucane (<email address hidden>) on branch: stable/mitaka\nReview: https://review.openstack.org/427119", 
            "date_created": "2017-02-02 11:11:39.846216+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ], 
    "closed": "2016-09-20 21:19:56.029935+00:00"
}
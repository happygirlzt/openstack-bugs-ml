{
    "status": "Fix Released", 
    "last_updated": "2014-10-16 08:27:44.029314+00:00", 
    "description": "Seem to be experiencing a bug with libvirt.xml device formatting when --ephemeral flag is used after initial booth and then use of nova stop/start or nova reboot --hard.  We are using following libvirt options in nova.conf for storage:\nlibvirt_images_type=lvm\nlibvirt_images_volume_group=vglocal\n\nWhen normally using nova boot with a flavor that has ephemeral defined it create two LVM volumes appropriatly ex.\ninstance-0000077e_disk\ninstance-0000077e_disk.local\n\nThe instance libvirt.xml contains disk devices entry as follows:\n<devices>\n    <disk type=\"block\" device=\"disk\">\n      <driver name=\"qemu\" type=\"raw\" cache=\"none\"/>\n      <source dev=\"/dev/vgephemeral/instance-0000077e_disk\"/>\n      <target bus=\"virtio\" dev=\"vda\"/>\n    </disk>\n    <disk type=\"block\" device=\"disk\">\n      <driver name=\"qemu\" type=\"raw\" cache=\"none\"/>\n      <source dev=\"/dev/vgephemeral/instance-0000077e_disk.local\"/>\n      <target bus=\"virtio\" dev=\"vdb\"/>\n    </disk>\n\n\nIf we use \"nova boot --flavor 757c75fa-0b6d-4d4f-a128-27813009bff4 --image caa978e0-acae-4205-a4a4-2cf159c166fd --nic net-id=44f2fb0b-0a7a-475c-8fff-54cd4b37958b --ephemeral size=1 --ephemeral size=1 localdisk-1\" the LVM disks for ephemeral goes through enumeration logic whether there is one or more --ephemeral options\n instance-000007ed_disk                                   \n instance-000007ed_disk.eph0  \n instance-000007ed_disk.eph1\n\nThe instance libvirt.xml after instance spawn has disk device entries like below and the instances happily boots.\n <devices>\n    <disk type=\"block\" device=\"disk\">\n      <driver name=\"qemu\" type=\"raw\" cache=\"none\"/>\n      <source dev=\"/dev/vgephemeral/instance-000007ed_disk\"/>\n      <target bus=\"virtio\" dev=\"vda\"/>\n    </disk>\n    <disk type=\"block\" device=\"disk\">\n      <driver name=\"qemu\" type=\"raw\" cache=\"none\"/>\n      <source dev=\"/dev/vgephemeral/instance-000007ed_disk.eph0\"/>\n      <target bus=\"virtio\" dev=\"vdb\"/>\n    </disk>\n    <disk type=\"block\" device=\"disk\">\n      <driver name=\"qemu\" type=\"raw\" cache=\"none\"/>\n      <source dev=\"/dev/vgephemeral/instance-000007ed_disk.eph1\"/>\n      <target bus=\"virtio\" dev=\"vdc\"/>\n    </disk>\n\nIf nova stop/start or nova reboot --hard is executed the instance is destroyed and libvirt.xml gets recreated.  At this stage whatever values we passed with --ephemeral are not respected and libvirt.xml revirts to configuration that would have been generated without the use of the --ephemeral option like below where we only have one extra disk and it is not using the enumerated naming.  \n  <devices>\n    <disk type=\"block\" device=\"disk\">\n      <driver name=\"qemu\" type=\"raw\" cache=\"none\"/>\n      <source dev=\"/dev/vgephemeral/instance-000007ed_disk\"/>\n      <target bus=\"virtio\" dev=\"vda\"/>\n    </disk>\n    <disk type=\"block\" device=\"disk\">\n      <driver name=\"qemu\" type=\"raw\" cache=\"none\"/>\n      <source dev=\"/dev/vgephemeral/instance-000007ed_disk.local\"/>\n      <target bus=\"virtio\" dev=\"vdb\"/>\n    </disk>\n\n\nThis causes instances booting to fail at this stage.  The nova block_device_mapping table has records for all 3 devices.", 
    "tags": [
        "havana-backport-potential", 
        "libvirt"
    ], 
    "importance": "High", 
    "heat": 34, 
    "link": "https://bugs.launchpad.net/nova/+bug/1305423", 
    "owner": "https://api.launchpad.net/1.0/~thang-pham", 
    "id": 1305423, 
    "index": 1472, 
    "openned": "2014-04-10 05:47:18.245604+00:00", 
    "created": "2014-04-10 05:47:18.245604+00:00", 
    "title": "nova libvirt re-write broken with mulitiple ephemeral disks", 
    "comments": [
        {
            "content": "Seem to be experiencing a bug with libvirt.xml device formatting when --ephemeral flag is used after initial booth and then use of nova stop/start or nova reboot --hard.  We are using following libvirt options in nova.conf for storage:\nlibvirt_images_type=lvm\nlibvirt_images_volume_group=vglocal\n\nWhen normally using nova boot with a flavor that has ephemeral defined it create two LVM volumes appropriatly ex.\ninstance-0000077e_disk\ninstance-0000077e_disk.local\n\nThe instance libvirt.xml contains disk devices entry as follows:\n<devices>\n    <disk type=\"block\" device=\"disk\">\n      <driver name=\"qemu\" type=\"raw\" cache=\"none\"/>\n      <source dev=\"/dev/vgephemeral/instance-0000077e_disk\"/>\n      <target bus=\"virtio\" dev=\"vda\"/>\n    </disk>\n    <disk type=\"block\" device=\"disk\">\n      <driver name=\"qemu\" type=\"raw\" cache=\"none\"/>\n      <source dev=\"/dev/vgephemeral/instance-0000077e_disk.local\"/>\n      <target bus=\"virtio\" dev=\"vdb\"/>\n    </disk>\n\n\nIf we use \"nova boot --flavor 757c75fa-0b6d-4d4f-a128-27813009bff4 --image caa978e0-acae-4205-a4a4-2cf159c166fd --nic net-id=44f2fb0b-0a7a-475c-8fff-54cd4b37958b --ephemeral size=1 --ephemeral size=1 localdisk-1\" the LVM disks for ephemeral goes through enumeration logic whether there is one or more --ephemeral options\n instance-000007ed_disk                                   \n instance-000007ed_disk.eph0  \n instance-000007ed_disk.eph1\n\nThe instance libvirt.xml after instance spawn has disk device entries like below and the instances happily boots.\n <devices>\n    <disk type=\"block\" device=\"disk\">\n      <driver name=\"qemu\" type=\"raw\" cache=\"none\"/>\n      <source dev=\"/dev/vgephemeral/instance-000007ed_disk\"/>\n      <target bus=\"virtio\" dev=\"vda\"/>\n    </disk>\n    <disk type=\"block\" device=\"disk\">\n      <driver name=\"qemu\" type=\"raw\" cache=\"none\"/>\n      <source dev=\"/dev/vgephemeral/instance-000007ed_disk.eph0\"/>\n      <target bus=\"virtio\" dev=\"vdb\"/>\n    </disk>\n    <disk type=\"block\" device=\"disk\">\n      <driver name=\"qemu\" type=\"raw\" cache=\"none\"/>\n      <source dev=\"/dev/vgephemeral/instance-000007ed_disk.eph1\"/>\n      <target bus=\"virtio\" dev=\"vdc\"/>\n    </disk>\n\nIf nova stop/start or nova reboot --hard is executed the instance is destroyed and libvirt.xml gets recreated.  At this stage whatever values we passed with --ephemeral are not respected and libvirt.xml revirts to configuration that would have been generated without the use of the --ephemeral option like below where we only have one extra disk and it is not using the enumerated naming.  \n  <devices>\n    <disk type=\"block\" device=\"disk\">\n      <driver name=\"qemu\" type=\"raw\" cache=\"none\"/>\n      <source dev=\"/dev/vgephemeral/instance-000007ed_disk\"/>\n      <target bus=\"virtio\" dev=\"vda\"/>\n    </disk>\n    <disk type=\"block\" device=\"disk\">\n      <driver name=\"qemu\" type=\"raw\" cache=\"none\"/>\n      <source dev=\"/dev/vgephemeral/instance-000007ed_disk.local\"/>\n      <target bus=\"virtio\" dev=\"vdb\"/>\n    </disk>\n\n\nThis causes instances booting to fail at this stage.  The nova block_device_mapping table has records for all 3 devices.", 
            "date_created": "2014-04-10 05:47:18.245604+00:00", 
            "author": "https://api.launchpad.net/1.0/~kschroed"
        }, 
        {
            "content": "In digging into this some more, it looks like the issue may be that block_device_info is set to none in compute/api.py:\n\ncompute/api.py:        self.compute_rpcapi.reboot_instance(context, instance=instance,\ncompute/api.py-                                            block_device_info=None,\ncompute/api.py-                                            reboot_type=reboot_type)\n\nIt's then dutifully passed along to the message queue:\n\ncompute/rpcapi.py:    def reboot_instance(self, ctxt, instance, block_device_info,\ncompute/rpcapi.py-                        reboot_type):\ncompute/rpcapi.py-        if not self.client.can_send_version('2.32'):\n--\ncompute/rpcapi.py:        cctxt.cast(ctxt, 'reboot_instance',\ncompute/rpcapi.py-                   instance=instance,\ncompute/rpcapi.py-                   block_device_info=block_device_info,\n\nI don't see any code in the reboot methods which calls get_instance_bdms, which would imply the block_device_info is never populated when reboot is called.\n\nI believe it works when the instance is first booted because block_device_info is populated from the API call, but when reboot gets to has_default_ephemeral in libvirt/blockinfo.py, this conditional fails:\n\nif (instance['ephemeral_gb'] <= 0) or ephemerals:\n\nBecause ephemerals is empty and ephemeral_gb is > 0.\n\nI'm guessing we need to do a _get_bdm_image_metadata somewhere in the reboot method to make sure we populate \"ephemerals\", but I don't know enough about this code to know if I'm being completely crazy or not.", 
            "date_created": "2014-04-10 22:10:18.006105+00:00", 
            "author": "https://api.launchpad.net/1.0/~kbringard"
        }, 
        {
            "content": "So I spent some more time digging into this, and it looks like, in compute/manager.py, reboot_instance is calling:\n\n2126         \"\"\"Reboot an instance on this host.\"\"\"\n2127         context = context.elevated()\n2128         LOG.audit(_(\"Rebooting instance\"), context=context, instance=instance)\n2129 \n2130         block_device_info = self._get_instance_volume_block_device_info(\n2131                                 context, instance)\n2132 \n\nHowever, self._get_instance_volume_block_device_info is returning an empty array.\n\nI dug a bit further into this, and discovered that in _get_volume_bdms we only return volumes with a volume_id\n\n def _get_volume_bdms(self, bdms, legacy=True):\n        \"\"\"Return only bdms that have a volume_id.\"\"\"\n        if legacy:\n            return [bdm for bdm in bdms if bdm['volume_id']]\n        else:\n            return [bdm for bdm in bdms\n                    if bdm['destination_type'] == 'volume']\n\nHowever, ephemeral volumes don't have a volume_id:\n\nmysql> select volume_id,device_name,volume_size from block_device_mapping where instance_uuid = 'b70670f5-0c10-4fca-9e5e-e3cbabeddbf2' \\G\n*************************** 1. row ***************************\n  volume_id: NULL\ndevice_name: /dev/vda\nvolume_size: NULL\n*************************** 2. row ***************************\n  volume_id: NULL\ndevice_name: /dev/vdb\nvolume_size: 1\n*************************** 3. row ***************************\n  volume_id: NULL\ndevice_name: /dev/vdc\nvolume_size: 1\n3 rows in set (0.00 sec)\n\nThis makes sense, because these aren't cinder volumes, but are instead ephemeral volumes, and don't have a volume_id.\n\nI'm not entirely certain what the fix would be here, but it seems like we'd need to add logic to the _get_volume_bdms method to account for destination_type: local and/or volume_id is NULL.", 
            "date_created": "2014-04-11 20:08:27.870873+00:00", 
            "author": "https://api.launchpad.net/1.0/~kbringard"
        }, 
        {
            "content": "So I think we probably need to add an entirely new method which returns local ephemeral \"volumes\". It looks like the existing code returns cinder volumes well, but isn't geared toward non-cinder volumes.\n\nWill have to go though and look at the data structures to see what is a good way to differentiate them and then what information we need to pass back to the reboot method to make sure they recreated in the same way they do during a nova boot.", 
            "date_created": "2014-04-11 21:46:04.053660+00:00", 
            "author": "https://api.launchpad.net/1.0/~kbringard"
        }, 
        {
            "content": "The solution is actually not too bad.  If you look at nova/compute/manager.py _prep_block_device(), the block_device_info dictionary that it returns contains swap, ephemerals, and block_device_mapping keys.  Since _get_instance_volume_block_device_info is used to retrieve the block_device_info on reboot, we just need to modify _get_instance_volume_block_device_info to return swap and ephemerals in addition to the block_device_mapping it already returns today.  Or we could create another method based on _get_instance_volume_block_device_info to return swap, ephemerals, and block_device_mapping.  I will get a patch submitted for this soon.  We will see if we can merge it into _get_instance_volume_block_device_info or create another method.", 
            "date_created": "2014-04-26 21:22:24.920217+00:00", 
            "author": "https://api.launchpad.net/1.0/~thang-pham"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/90583", 
            "date_created": "2014-04-27 04:49:42.315204+00:00", 
            "author": "https://api.launchpad.net/1.0/~openstack-gerrit"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/90583\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=f087a6f77ef1338bb8d10943d2a18712220c3c44\nSubmitter: Jenkins\nBranch:    master\n\ncommit f087a6f77ef1338bb8d10943d2a18712220c3c44\nAuthor: Thang Pham <email address hidden>\nDate:   Sun Apr 27 00:28:35 2014 -0400\n\n    Update block_device_info to contain swap and ephemeral disks\n    \n    An ephemeral or swap disk is attached to an instance on boot\n    as follows: nova boot --flavor FLAVOR --image IMAGE_ID\n    --swap 512 --ephemeral size=2 INSTANCE.  When a hard reboot is\n    performed on the instance, nova fails to recreate the\n    appropriate libvirt XML definition, containing the ephemeral\n    disk.  This is because the correct block_device_info dict that\n    is passed to the compute manager's reboot_instance method does\n    not contain swap or ephemeral disk key values that are necessary\n    to recreate those disks.  In addition to nova boot, the correct\n    block_device_info dict is also needed by nova rebuild, reboot,\n    resize, and migrate to recreate those disks.  This patch updates\n    _get_instance_volume_block_device_info (renamed\n    _get_instance_block_device_info) to return the swap and ephemeral\n    disk key values, in addition to the block_device_mapping it\n    already returns today.\n    \n    Change-Id: Iec329d1c12a48ea90ba9d57decd0996fde6544f0\n    Closes-Bug: #1305423\n", 
            "date_created": "2014-05-06 01:31:53.925787+00:00", 
            "author": "https://api.launchpad.net/1.0/~openstack-gerrit"
        }, 
        {
            "content": "Fix proposed to branch: stable/icehouse\nReview: https://review.openstack.org/100362", 
            "date_created": "2014-06-16 21:36:16.083416+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/100362\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=b5913892869ba98fecd4f8d597eb55defee905e7\nSubmitter: Jenkins\nBranch:    stable/icehouse\n\ncommit b5913892869ba98fecd4f8d597eb55defee905e7\nAuthor: Thang Pham <email address hidden>\nDate:   Sun Apr 27 00:28:35 2014 -0400\n\n    Update block_device_info to contain swap and ephemeral disks\n    \n    An ephemeral or swap disk is attached to an instance on boot\n    as follows: nova boot --flavor FLAVOR --image IMAGE_ID\n    --swap 512 --ephemeral size=2 INSTANCE.  When a hard reboot is\n    performed on the instance, nova fails to recreate the\n    appropriate libvirt XML definition, containing the ephemeral\n    disk.  This is because the correct block_device_info dict that\n    is passed to the compute manager's reboot_instance method does\n    not contain swap or ephemeral disk key values that are necessary\n    to recreate those disks.  In addition to nova boot, the correct\n    block_device_info dict is also needed by nova rebuild, reboot,\n    resize, and migrate to recreate those disks.  This patch updates\n    _get_instance_volume_block_device_info (renamed\n    _get_instance_block_device_info) to return the swap and ephemeral\n    disk key values, in addition to the block_device_mapping it\n    already returns today.\n    \n    Change-Id: Iec329d1c12a48ea90ba9d57decd0996fde6544f0\n    Closes-Bug: #1305423\n    (cherry picked from commit f087a6f77ef1338bb8d10943d2a18712220c3c44)\n", 
            "date_created": "2014-09-24 00:35:19.484451+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ], 
    "closed": "2014-06-11 13:42:13.005712+00:00"
}
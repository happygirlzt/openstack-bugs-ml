{
    "status": "Fix Released", 
    "last_updated": "2016-09-02 01:16:32.461530+00:00", 
    "description": "Master branch 2016.5.17\n\nWhen I enabe ComputeCapacityFilter:\nIf I define a irrelevant specs in flavor like key='x' value='y'\nComputeCapacityFilter will return flase,I can't create instances.\n\nIf I define a irrelevant specs like key='mykey:x' value='y'\nComputeCapacityFilter will return True\n\nThis means if I don't add a head string and a colon before my real key, ComputeCapacityFilter doesn't permit me to use it.\n\nIf this kind of specs is not allowed,I believe this should be refused in horizon or api,not in filter.\n\nBut when i read test_compute_capabilities_filters.py, I find it is permitted,but only for ComputeCapacityFilter's specs.\n\ncode:\n    def test_compute_filter_pass_extra_specs_same_as_scope(self):\n        # Make sure this still works even if the key is the same as the scope\n        self._do_test_compute_filter_extra_specs(\n            ecaps={'capabilities': 1},\n            especs={'capabilities': '1'},\n            passes=True)", 
    "tags": [], 
    "importance": "Undecided", 
    "heat": 10, 
    "link": "https://bugs.launchpad.net/nova/+bug/1582589", 
    "owner": "https://api.launchpad.net/1.0/~1004988384-n", 
    "id": 1582589, 
    "index": 7484, 
    "openned": "2016-05-17 08:01:40.193542+00:00", 
    "created": "2016-05-17 08:01:40.193542+00:00", 
    "title": "ComputeCapacityFilter always reject irrelevant,self-defined specs", 
    "comments": [
        {
            "content": "Master branch 2016.5.17\n\nWhen I enabe ComputeCapacityFilter:\nIf I define a irrelevant specs in flavor like key='x' value='y'\nComputeCapacityFilter will return flase,I can't create instances.\n\nIf I define a irrelevant specs like key='mykey:x' value='y'\nComputeCapacityFilter will return True\n\nThis means if I don't add a head string and a colon before my real key, ComputeCapacityFilter doesn't permit me to use it.\n\nIf this kind of specs is not allowed,I believe this should be refused in horizon or api,not in filter.\n\nBut when i read test_compute_capabilities_filters.py, I find it is permitted,but only for ComputeCapacityFilter's specs.\n\ncode:\n    def test_compute_filter_pass_extra_specs_same_as_scope(self):\n        # Make sure this still works even if the key is the same as the scope\n        self._do_test_compute_filter_extra_specs(\n            ecaps={'capabilities': 1},\n            especs={'capabilities': '1'},\n            passes=True)", 
            "date_created": "2016-05-17 08:01:40.193542+00:00", 
            "author": "https://api.launchpad.net/1.0/~1004988384-n"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/317306", 
            "date_created": "2016-05-17 08:16:41.230832+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/317306\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=83b59ea6035df173fb206167a4911f512fe22e64\nSubmitter: Jenkins\nBranch:    master\n\ncommit 83b59ea6035df173fb206167a4911f512fe22e64\nAuthor: OctopusZhang <zhang.yufei@99cloud.net>\nDate:   Tue May 17 08:05:19 2016 +0000\n\n    Allow irrelevant,self-defined specs in ComputeCapacityFilter\n    \n    For backward compatibility, ComputeCapacityFilter treats extra spec\n    keys which contain no colons like 'x' the same as 'capabilities:x',\n    because hoststate doesn't contain attribute like x, this filter always\n    return False. So it causes conflict with\n    AggregateInstanceExtraSpecsFilter, and limits user to define extra spec\n    keys without colons.\n    \n    This patch solves the conflict and keep it backward compatible.\n    \n    This patch also joins two lines into one in method host_passes.\n    \n    Change-Id: Ia9e7c882bcee131e106e67dc46ed9ce1224e4c67\n    Closes-Bug: #1582589\n", 
            "date_created": "2016-08-10 20:32:51.107682+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "This issue was fixed in the openstack/nova 14.0.0.0b3 development milestone.", 
            "date_created": "2016-09-02 01:16:31.777656+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ], 
    "closed": "2016-08-10 20:32:48.037455+00:00"
}
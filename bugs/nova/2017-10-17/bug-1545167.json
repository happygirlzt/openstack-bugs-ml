{
    "status": "Confirmed", 
    "last_updated": "2016-08-25 09:18:23.671841+00:00", 
    "description": "I discovered this bug while refactoring functional tests. This happens in the current Nova master.\n\nThe _compare_results function is defined in nova/tests/functional/api_samples_test_base.py\n\nTo reproduce, pass two lists to _compare_results that are the same length but have one item not equal.\n\nlist1 = [{u'foo': u'bar', u'bar': u'baz'}]\n\nlist2 = [{u'foo': u'baz', u'bar': u'baz'}]\n\n_compare_results returns the following:\n\nnova.tests.functional.api_samples_test_base.NoMatch: Extra list items in template:\n{u'foo': u'bar', u'bar': u'baz'}\nExtra list items in Test:\n{u'foo': u'baz', u'bar': u'baz'}\n\nWhile this is \"technically\" accurate, it's really hard to debug if you can imagine a lengthy, nested json file dumped into that response.\n\n_compare_results is already checking each item in the list, it should just be returning a list of keys that don't match, not the whole thing!", 
    "tags": [
        "testing"
    ], 
    "importance": "Medium", 
    "heat": 10, 
    "link": "https://bugs.launchpad.net/nova/+bug/1545167", 
    "owner": "None", 
    "id": 1545167, 
    "index": 4447, 
    "openned": "2016-02-12 21:21:20.481190+00:00", 
    "created": "2016-02-12 21:21:20.481190+00:00", 
    "title": "_compare_results incorrectly reports extra list items when items in lists don't match", 
    "comments": [
        {
            "content": "I discovered this bug while refactoring functional tests. This happens in the current Nova master.\n\nThe _compare_results function is defined in nova/tests/functional/api_samples_test_base.py\n\nTo reproduce, pass two lists to _compare_results that are the same length but have one item not equal.\n\nlist1 = [{u'foo': u'bar', u'bar': u'baz'}]\n\nlist2 = [{u'foo': u'baz', u'bar': u'baz'}]\n\n_compare_results returns the following:\n\nnova.tests.functional.api_samples_test_base.NoMatch: Extra list items in template:\n{u'foo': u'bar', u'bar': u'baz'}\nExtra list items in Test:\n{u'foo': u'baz', u'bar': u'baz'}\n\nWhile this is \"technically\" accurate, it's really hard to debug if you can imagine a lengthy, nested json file dumped into that response.\n\n_compare_results is already checking each item in the list, it should just be returning a list of keys that don't match, not the whole thing!", 
            "date_created": "2016-02-12 21:21:20.481190+00:00", 
            "author": "https://api.launchpad.net/1.0/~auggy"
        }, 
        {
            "content": "Auggy,\nAre you working on the fix? Please change status to Inprogress if you are, otherwise change Assigned to ->nobody.", 
            "date_created": "2016-04-18 15:47:25.153817+00:00", 
            "author": "https://api.launchpad.net/1.0/~sarafraj-singh"
        }, 
        {
            "content": "A bug report with an assignee should be 'In Progress' status.\nSo set 'In Progress'.", 
            "date_created": "2016-06-07 08:35:28.460251+00:00", 
            "author": "https://api.launchpad.net/1.0/~natsume-takashi"
        }, 
        {
            "content": "This is on my TODO list but I haven't made working on it a priority so moving to unassigned in case anyone else wants to give it a shot.", 
            "date_created": "2016-08-19 00:34:25.410960+00:00", 
            "author": "https://api.launchpad.net/1.0/~auggy"
        }, 
        {
            "content": "The code is not written to handle cases that have nested data structures and in case the nested list won't match word for word, it would fully return the elements as they have not found any match. IMO the compare results need to call itself in case it encounters a dict or a list and retry matching.", 
            "date_created": "2016-08-22 12:17:51.923468+00:00", 
            "author": "https://api.launchpad.net/1.0/~parora"
        }, 
        {
            "content": "Auggy, IMO the nested list(or dicts) comparison is possible only when we have one extra list in the result as well as expected keys, but in case we have more than 1 in both, it is computationally not good to check the closest dictionary in the expected dictionaries and result dictionaries. \n\nAssuming we get 3 not matching lists in result \nand 2 not matching lists in expected result\n\nwe would have to match 2 lists for each of the 3 lists in the result dict, find the closest companion and print.\n\nHowever it would be good if we have 1 not matching dict in result as well as expected result and then find the differing keys.I would try to work on this case.", 
            "date_created": "2016-08-22 12:45:19.762742+00:00", 
            "author": "https://api.launchpad.net/1.0/~parora"
        }
    ]
}
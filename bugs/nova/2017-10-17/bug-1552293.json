{
    "status": "Fix Released", 
    "last_updated": "2016-03-16 18:00:32.669966+00:00", 
    "description": "This bug only applies to openstack users running xenapi in combination with glance plugin to fetch images from swift.  There is logic in utils.py to kill the tar process when python hits an exception from subprocess during the tar extraction process in the xenapi plugin glance.  This logic does work when tar exits cleanly with an EOF on a truncated file, however if you append bad data to that truncated file (malformed http response), tar will die and re spawn outside of the child/parent process tree of the xen fork executioner daemon and continue to read from that stdin pipe.  The most minimal code change to be made is to poll for the process during extraction function which after making this change tar will no longer hang like this and even though tar is now its own process, when glance plugin reclaims the defunct tar it closes the pipe which kills the new tar process under ppid 1 (init) as that tar process is trying to read from that pipe.\n\nWhen looking at the code it appears we don't poll for the process and expect tar to exit in a way in which python will get an exception, however this is not always the case.  Below is what it looks like when this issue occurs:\n\nroot      8750 10.6  0.7   9752  5836 ?        Ss   23:44   0:06  \\_ python /etc/xapi.d/plugins/glance <methodCall><methodName>download_vhd2</methodName><params><param><value>OpaqueRef:a9b81f62-0281-2301-1eec-754fd2f1a057</value></\nroot      8820  5.4  0.0      0     0 ?        Z    23:45   0:03      \\_ [tar] <defunct>\nroot      8829  1.7  0.0   2552   464 ?        S    23:45   0:01 tar -zx --directory=/var/run/sr-mount/637c4bf0-3cf6-b283-66f0-7087dec0439e/tmpIbRPA1\nroot      8830 18.9  0.0      0     0 ?        Z    23:45   0:11  \\_ [gzip] <defunct>\n\n[root@# ls -la fd/*\nl-wx------ 1 root root 64 Mar  1 23:45 fd/0 -> /dev/null\nl-wx------ 1 root root 64 Mar  1 23:45 fd/1 -> /tmp/execute_command_get_outc14016.log\nl-wx------ 1 root root 64 Mar  1 23:45 fd/2 -> /tmp/execute_command_get_errf62557.log\nlrwx------ 1 root root 64 Mar  1 23:45 fd/3 -> socket:[718064936]\nlrwx------ 1 root root 64 Mar  1 23:45 fd/4 -> socket:[718064938]\nl-wx------ 1 root root 64 Mar  1 23:45 fd/6 -> pipe:[718065596]\nlr-x------ 1 root root 64 Mar  1 23:45 fd/7 -> pipe:[718065597]\n[root@]# ls -la ../8829/fd/*\nlr-x------ 1 root root 64 Mar  1 23:46 ../8829/fd/0 -> pipe:[718065596]\nl-wx------ 1 root root 64 Mar  1 23:46 ../8829/fd/1 -> pipe:[718065612]\nl-wx------ 1 root root 64 Mar  1 23:46 ../8829/fd/2 -> pipe:[718065597]", 
    "tags": [
        "xenserver"
    ], 
    "importance": "Medium", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1552293", 
    "owner": "https://api.launchpad.net/1.0/~pownalltim", 
    "id": 1552293, 
    "index": 4470, 
    "openned": "2016-03-02 16:00:21.860819+00:00", 
    "created": "2016-03-02 16:00:21.860819+00:00", 
    "title": "glance plugin not exiting when tar exits from bad data being passed.", 
    "comments": [
        {
            "content": "This bug only applies to openstack users running xenapi in combination with glance plugin to fetch images from swift.  There is logic in utils.py to kill the tar process when python hits an exception from subprocess during the tar extraction process in the xenapi plugin glance.  This logic does work when tar exits cleanly with an EOF on a truncated file, however if you append bad data to that truncated file (malformed http response), tar will die and re spawn outside of the child/parent process tree of the xen fork executioner daemon and continue to read from that stdin pipe.  The most minimal code change to be made is to poll for the process during extraction function which after making this change tar will no longer hang like this and even though tar is now its own process, when glance plugin reclaims the defunct tar it closes the pipe which kills the new tar process under ppid 1 (init) as that tar process is trying to read from that pipe.\n\nWhen looking at the code it appears we don't poll for the process and expect tar to exit in a way in which python will get an exception, however this is not always the case.  Below is what it looks like when this issue occurs:\n\nroot      8750 10.6  0.7   9752  5836 ?        Ss   23:44   0:06  \\_ python /etc/xapi.d/plugins/glance <methodCall><methodName>download_vhd2</methodName><params><param><value>OpaqueRef:a9b81f62-0281-2301-1eec-754fd2f1a057</value></\nroot      8820  5.4  0.0      0     0 ?        Z    23:45   0:03      \\_ [tar] <defunct>\nroot      8829  1.7  0.0   2552   464 ?        S    23:45   0:01 tar -zx --directory=/var/run/sr-mount/637c4bf0-3cf6-b283-66f0-7087dec0439e/tmpIbRPA1\nroot      8830 18.9  0.0      0     0 ?        Z    23:45   0:11  \\_ [gzip] <defunct>\n\n[root@# ls -la fd/*\nl-wx------ 1 root root 64 Mar  1 23:45 fd/0 -> /dev/null\nl-wx------ 1 root root 64 Mar  1 23:45 fd/1 -> /tmp/execute_command_get_outc14016.log\nl-wx------ 1 root root 64 Mar  1 23:45 fd/2 -> /tmp/execute_command_get_errf62557.log\nlrwx------ 1 root root 64 Mar  1 23:45 fd/3 -> socket:[718064936]\nlrwx------ 1 root root 64 Mar  1 23:45 fd/4 -> socket:[718064938]\nl-wx------ 1 root root 64 Mar  1 23:45 fd/6 -> pipe:[718065596]\nlr-x------ 1 root root 64 Mar  1 23:45 fd/7 -> pipe:[718065597]\n[root@]# ls -la ../8829/fd/*\nlr-x------ 1 root root 64 Mar  1 23:46 ../8829/fd/0 -> pipe:[718065596]\nl-wx------ 1 root root 64 Mar  1 23:46 ../8829/fd/1 -> pipe:[718065612]\nl-wx------ 1 root root 64 Mar  1 23:46 ../8829/fd/2 -> pipe:[718065597]", 
            "date_created": "2016-03-02 16:00:21.860819+00:00", 
            "author": "https://api.launchpad.net/1.0/~pownalltim"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/287426", 
            "date_created": "2016-03-02 20:44:26.327739+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/287426\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=32d576427179965def0a1757dc86a492e1c3756d\nSubmitter: Jenkins\nBranch:    master\n\ncommit 32d576427179965def0a1757dc86a492e1c3756d\nAuthor: Tim Pownall <email address hidden>\nDate:   Wed Mar 2 14:38:24 2016 -0600\n\n    xenapi: fix when tar exits early during download\n    \n    When downloading a streamed chunk from swift through glance gives tar\n    invalid input, tar will exit, but leave the plugin still trying to write\n    data to the dead process.\n    \n    To stop this we can spot when the tar process exits early, and be sure\n    to stop trying to write more data to the dead process.\n    \n    Change-Id: Ic2bc89fa6d08db505b044a9498c1bfa5b884a056\n    Closes-Bug: 1552293\n", 
            "date_created": "2016-03-10 14:10:57.613077+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "It looks like we fixed the defunct tar, but a new issue seems to be that now gzip can hang and we need to poll for the tar gzip child as well.  This one I'm not able to reliably replicate with a corrupted image and appears to be a more special case.  To my knowledge tar itself should be handling the gzip poll so I'm not sure how to address this.\n\n=============================================================================================\n\nroot     20900  0.0  0.1   3084  1268 ?        S    Mar13   0:00 /opt/xensource/libexec/fe -daemon -pidfile /var/run/fe.pid\nroot     20901  0.0  0.6   9732  5176 ?        Ss   Mar13   0:00  \\_ python /etc/xapi.d/plugins/glance <methodCall><methodName>download_vhd2</methodName><params><param><value>OpaqueRef:157d9fb4-5fe2-32e3-34a9-af0df670f1ec</value></\nroot     20902  0.0  0.0   2536   616 ?        S    Mar13   0:00      \\_ tar -zx --directory=/var/run/sr-mount/c8177365-10b8-1fb5-d0c0-06a62fd12ba5/tmpTYXaYe\nroot     20903  0.0  0.0   2536   400 ?        S    Mar13   0:00          \\_ tar -zx --directory=/var/run/sr-mount/c8177365-10b8-1fb5-d0c0-06a62fd12ba5/tmpTYXaYe\nroot     20904  0.0  0.0      0     0 ?        Z    Mar13   0:00              \\_ [gzip] <defunct>\n\n=============================================================================================\n\nroot      4044  0.0  0.1   3084  1312 ?        S    15:34   0:00 /opt/xensource/libexec/fe -daemon -pidfile /var/run/fe.pid\nroot      4045  0.0  0.7   9728  5796 ?        Ss   15:34   0:00  \\_ python /etc/xapi.d/plugins/glance <methodCall><methodName>download_vhd2</methodName><params><param><value>OpaqueRef:50c7189f-dce9-5c1d-71a7-5b462566d443</value></\nroot      4054  0.0  0.0   2536   764 ?        S    15:34   0:00      \\_ tar -zx --directory=/var/run/sr-mount/c8177365-10b8-1fb5-d0c0-06a62fd12ba5/tmphzl9sI\nroot      4055  0.0  0.0   2536   460 ?        S    15:34   0:00          \\_ tar -zx --directory=/var/run/sr-mount/c8177365-10b8-1fb5-d0c0-06a62fd12ba5/tmphzl9sI\nroot      4056  0.0  0.0      0     0 ?        Z    15:34   0:00              \\_ [gzip] <defunct>\n\n=============================================================================================\n\nBoth of these were found together on the same xenserver hypervisor.  You can see there's a process from 2 days ago still hanging around causing a build or delete against that build to hang forever in nova. ", 
            "date_created": "2016-03-15 21:13:21.192793+00:00", 
            "author": "https://api.launchpad.net/1.0/~pownalltim"
        }, 
        {
            "content": "Indeed, Tar should be handling that gzip polling.  Any indication how this might have happened?\n\nPerhaps a simple fix here would be to add a large timeout in the download, and kill the tar if it takes more than, say, 6h?", 
            "date_created": "2016-03-16 15:47:55.051898+00:00", 
            "author": "https://api.launchpad.net/1.0/~bob-ball"
        }, 
        {
            "content": "This issue was fixed in the openstack/nova 13.0.0.0rc1 release candidate.", 
            "date_created": "2016-03-16 18:00:32.235886+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }
    ], 
    "closed": "2016-03-10 14:10:53.743438+00:00"
}
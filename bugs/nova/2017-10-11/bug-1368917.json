{
    "status": "Invalid", 
    "last_updated": "2015-12-19 14:24:40.211745+00:00", 
    "description": "As it stands, if a client issuing an RPC call() sends a message to the rabbitmq server, then the rabbitmq server does a switchover/failover the client will wait for the full RPC timeout period (60 seconds) even though new rabbitmq server has come up long before then and some connections have been reestablished.\n\nOn a controlled switchover especially the RPC core should notice that the server has gone away and should notify any entities waiting for an RPC call() response so that they can error out early rather than waiting for the full RPC timeout period.\n\nThis was detected on Havana, but it seems to apply to all other versions as well.", 
    "tags": [
        "oslo"
    ], 
    "importance": "Undecided", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1368917", 
    "owner": "None", 
    "id": 1368917, 
    "index": 5157, 
    "created": "2014-09-12 19:16:13.185043+00:00", 
    "title": "rpc core should abort a call() early if the connection is terminated before the timeout period expires", 
    "comments": [
        {
            "content": "As it stands, if a client issuing an RPC call() sends a message to the rabbitmq server, then the rabbitmq server does a failover the client will wait for the full RPC timeout period (60 seconds) even though new rabbitmq server has come up long before then and some connections have been reestablished.\n\nThe RPC core should notice that the server has gone away and should notify any entities waiting for an RPC call() response so that they can error out early rather than waiting for the full RPC timeout period.\n\nThis was detected on Havana, but it seems to apply to all other versions as well.", 
            "date_created": "2014-09-12 19:16:13.185043+00:00", 
            "author": "https://api.launchpad.net/1.0/~cbf123"
        }, 
        {
            "content": "I think this really is an olso.messaging bug, these things are mostly left up to that lib at this point", 
            "date_created": "2014-09-12 22:02:46.212692+00:00", 
            "author": "https://api.launchpad.net/1.0/~sdague"
        }, 
        {
            "content": "Does the client not reconnect, or does the reconnection not fix the issue somehow?", 
            "date_created": "2014-09-15 16:23:00.264787+00:00", 
            "author": "https://api.launchpad.net/1.0/~doug-hellmann"
        }, 
        {
            "content": "The client waits for the full RPC timeout period (60 secs by default) and then reconnects.  However, in an HA environment the newly-active rabbitmq server will be up and available long before then.\n\nAlso, on a controlled switchover the rabbitmq server will have done a formal shutdown of the connection which would notify the client that the connection is being shut down.  Something on the client should notice that the server has gone away long before the RPC timeout is over, and alert anyone waiting for an RPC response that they're never going to get one.", 
            "date_created": "2014-09-15 16:46:28.452144+00:00", 
            "author": "https://api.launchpad.net/1.0/~cbf123"
        }, 
        {
            "content": "Client can reconnect to another rabbitmq-server if one of  rabbitmq-server that the client is connecting is down(if you configure multiple rabbitmq-servers by enabling rabbit_hosts or haproxy like proxy), and rabbitmq-servers in a cluster hold the synchronized infos, msgs etc \nDid I missed something? @Sean Dague", 
            "date_created": "2015-12-19 14:24:39.626074+00:00", 
            "author": "https://api.launchpad.net/1.0/~haoqingchuan-28"
        }
    ]
}
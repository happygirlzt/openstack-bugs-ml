{
    "status": "Fix Released", 
    "last_updated": "2014-04-17 09:13:50.028388+00:00", 
    "description": "The command:\n\n\u00a0\u00a0 nova boot --flavor $FLAV --key_name $KEY --image $IMG --meta foo=bar meta1\n\nshould inject a file into `/meta.js` with content `{\"foo\":\"bar\"}`. Currently in devstack this doesn't work.\n\nIt looks as if the data is arriving to n-cpu as:\n\n\u00a0\u00a0\u00a0\u00a0metadata={u'foo': u'bar'}\n\nBut n-cpu is expecting:\n\n\u00a0\u00a0\u00a0\u00a0metadata = [{\"key\": \"foo\", \"value\": \"bar\"}]", 
    "tags": [
        "api", 
        "compute", 
        "xenserver"
    ], 
    "importance": "High", 
    "heat": 18, 
    "link": "https://bugs.launchpad.net/nova/+bug/1284733", 
    "owner": "https://api.launchpad.net/1.0/~matthew-gilliard-u", 
    "id": 1284733, 
    "index": 1407, 
    "created": "2014-02-25 17:05:31.485793+00:00", 
    "title": "metadata injected at nova boot does not arrive in /meta.js", 
    "comments": [
        {
            "content": "The command:\n\n  `nova boot --flavor $FLAV --key_name $KEY --image $IMG --meta foo=bar meta1`\n \nshould inject a file into `/meta.js` with content `{\"foo\":\"bar\"}`. Currently in devstack this doesn't work.\n\nFrom nova compute logs:\n\n2014-02-24 13:09:57 57751 DEBUG nova.virt.disk.api [req-609e1e4a-0773-4fc9-8bf6-f151f4a4e26f 10616464705681 10318294446568] Inject metadata fs=<nova.virt.disk.vfs.localfs.VFSLocalFS object at 0x53e0dd0> metadata={u'foo': u'bar'} _inject_metadata_into_fs /usr/lib/python2.7/dist-packages/nova/virt/disk/api.py:457\n2014-02-24 13:09:57 57751 WARNING nova.virt.disk.api [req-609e1e4a-0773-4fc9-8bf6-f151f4a4e26f 10616464705681 10318294446568] Ignoring error injecting metadata into image (string indices must be integers)\n\nIt looks as if the data is arriving to n-cpu as:\n\nmetadata={u'foo': u'bar'}\n\nBut n-cpu is expecting:\n\nmetadata = [{\"key\": \"foo\", \"value\": \"bar\"}]", 
            "date_created": "2014-02-25 17:05:31.485793+00:00", 
            "author": "https://api.launchpad.net/1.0/~matthew-gilliard-u"
        }, 
        {
            "content": "Devstack version used: 0df99e2d4ba70eb9669df6e18fb97ed37313c582", 
            "date_created": "2014-02-25 17:16:53.470348+00:00", 
            "author": "https://api.launchpad.net/1.0/~matthew-gilliard-u"
        }, 
        {
            "content": "Are you using config drive?\nIn that case the data seems to be available by mounting /dev/sr0 on the instance. [ if using iso9660]\n(actually lot of data !)", 
            "date_created": "2014-02-26 00:13:40.903240+00:00", 
            "author": "https://api.launchpad.net/1.0/~leandro-i-costantino"
        }, 
        {
            "content": "My bad - it looks like the default config changed to disallow metadata injection in this in this commit:\n\nhttps://github.com/openstack/nova/commit/9ce99a44c\n\n(5th Feb)", 
            "date_created": "2014-02-26 09:29:13.361439+00:00", 
            "author": "https://api.launchpad.net/1.0/~matthew-gilliard-u"
        }, 
        {
            "content": "Can reproduce this from devstack: nova (4e4369151ef8a4423c7e9381a337474e0bd5611c)\n\n2014-02-26 16:31:22.113 DEBUG nova.virt.disk.api [req-a8240f12-b8b2-4b3d-9e9f-6021a7155bc4 demo demo] Inject metadata fs=<nova.virt.disk.vfs.localfs.VFSLocalFS object at 0x50dfb50> metadata={u'parthi': u'yes'} _inject_metadata_into_fs /opt/stack/nova/nova/virt/disk/api.py:473\n2014-02-26 16:31:22.113 WARNING nova.virt.disk.api [req-a8240f12-b8b2-4b3d-9e9f-6021a7155bc4 demo demo] Ignoring error injecting metadata into image (string indices must be integers)\n", 
            "date_created": "2014-02-26 15:40:19.375742+00:00", 
            "author": "https://api.launchpad.net/1.0/~parthipan"
        }, 
        {
            "content": "I checked out an older version and it worked. (037e9622fa8610cef9490d27adfa07c404d62f5a)\n\nI'll do a git bisect later to find the offending commit.", 
            "date_created": "2014-02-26 15:48:34.734082+00:00", 
            "author": "https://api.launchpad.net/1.0/~parthipan"
        }, 
        {
            "content": "Seems like an API regression", 
            "date_created": "2014-02-26 16:53:42.118970+00:00", 
            "author": "https://api.launchpad.net/1.0/~johngarbutt"
        }, 
        {
            "content": "# first bad commit: [fbd214e267e493352040e74fa8f8d84b5ceadadb] Convert nova.compute.manager's _spawn to objects\n", 
            "date_created": "2014-02-26 18:14:10.250339+00:00", 
            "author": "https://api.launchpad.net/1.0/~parthipan"
        }, 
        {
            "content": "I think it's the object_compat decorator", 
            "date_created": "2014-02-26 18:15:36.262664+00:00", 
            "author": "https://api.launchpad.net/1.0/~parthipan"
        }, 
        {
            "content": "+    @object_compat\n     def _spawn(self, context, instance, image_meta, network_info,\n                block_device_info, injected_files, admin_password,\n                set_access_ip=False):\n         \"\"\"Spawn an instance with error logging and update its power state.\"\"\"\n", 
            "date_created": "2014-02-26 18:54:37.820032+00:00", 
            "author": "https://api.launchpad.net/1.0/~parthipan"
        }, 
        {
            "content": "Parthi's analysis is correct - the @object_compat decorator transforms a dict with:\n\nu'metadata': [{u'instance_uuid': u'686b0697-61a2-4f84-8c91-0c2d200e8339', u'deleted': 0, u'created_at': u'2014-02-27T13:19:28.000000', u'updated_at': None, u'value': u'bar', u'key': u'foo', u'deleted_at': None, u'id': 14}]\n\ninto an object with metadata property:\n\n{u'foo': u'bar'}\n\n  I assume that in other cases this transformation is desired (waiting for Nikola Dipanikov to comment as he was the original author of that part of the decorator) - so I think the best fix might be a flag to @object_compat which tells it to leave the metadata alone.", 
            "date_created": "2014-02-27 13:25:25.160083+00:00", 
            "author": "https://api.launchpad.net/1.0/~matthew-gilliard-u"
        }, 
        {
            "content": "\n\nParthi's analysis is correct - the @object_compat decorator transforms a dict with:\n\nu'metadata': [{u'instance_uuid': u'686b0697-61a2-4f84-8c91-0c2d200e8339', u'deleted': 0, u'created_at': u'2014-02-27T13:19:28.000000', u'updated_at': None, u'value': u'bar', u'key': u'foo', u'deleted_at': None, u'id': 14}]\n\ninto an object with metadata property:\n\n{u'foo': u'bar'}\n\n  I assume that in other cases this transformation is desired (waiting for Nikola Dipanov to comment as I think he was the original author of that part of the decorator) - so I think the best fix might be a flag to @object_compat which tells it to leave the metadata alone.\n", 
            "date_created": "2014-02-27 13:28:22.259218+00:00", 
            "author": "https://api.launchpad.net/1.0/~matthew-gilliard-u"
        }, 
        {
            "content": "... and to pass that flag in from the _spawn method only.", 
            "date_created": "2014-02-27 13:34:39.289771+00:00", 
            "author": "https://api.launchpad.net/1.0/~matthew-gilliard-u"
        }, 
        {
            "content": "So the first issue is that object_compat is really meant to be used on RPC exposed methods - it can technically be used there.\n\nThe way I see it - once you move the code around spawn to use the instance objects - you HAVE to change all the driver's spawn methods to deal with the new data format, even if that means moving for a list of dicts, to a dict.\n\n\n>I assume that in other cases this transformation is desired (waiting for Nikola Dipanov to comment as I think he was the original author of that part of the decorator) - so I think the best fix might be a flag to @object_compat which tells it to leave the metadata alone.\n\nSo in my mind  the above is not goof- we need to fix this i the libvirt (and other drviers) that use the medatadata in any way. Metadata should be a dict. I can't seem to find the code that used to changes it to be a list - but it's wrong.", 
            "date_created": "2014-02-27 15:04:14.312910+00:00", 
            "author": "https://api.launchpad.net/1.0/~ndipanov"
        }, 
        {
            "content": "I still don't understand _why_ the shape of the metadata property changes when using objects instead of a dict.\n\nDo you think that a patch fixing this would need to change the spawn method in every driver?  Or separate patches for each one?  And I think a tempest test would be helpful - each part is unit-tested but as a whole it doesn't work - do you agree?", 
            "date_created": "2014-02-27 21:32:13.161105+00:00", 
            "author": "https://api.launchpad.net/1.0/~matthew-gilliard-u"
        }, 
        {
            "content": "IMHO the object is doing the right thing. I was unable to track down what code makes the list yesterday, and will try to dig more today.\n\nAs for the number of patches - I'd say it depends on the size, but afaict xen is the only other driver that tries to inject metadata into the root disk, and it will handle both formats (which is precisely what libvirt should try to do as well - see nova.virt.xenapi.vmops.VMOps._inject_instance_metadata).", 
            "date_created": "2014-02-28 11:57:58.962347+00:00", 
            "author": "https://api.launchpad.net/1.0/~ndipanov"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/77166", 
            "date_created": "2014-02-28 13:12:35.171161+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "To me it looks like the conversion that happens in disk:api:_inject_metadata_into_fs should have been removed when object_compat in compute manager was unwrapping the metadata. Xen would also get the metadata after the object_compat converts it, so IMHO it might not break Xen.", 
            "date_created": "2014-02-28 16:46:34.831643+00:00", 
            "author": "https://api.launchpad.net/1.0/~parthipan"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/77166\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=aaf5762be5d37cac022dc321b6400b9743a25303\nSubmitter: Jenkins\nBranch:    master\n\ncommit aaf5762be5d37cac022dc321b6400b9743a25303\nAuthor: Matthew Gilliard <email address hidden>\nDate:   Fri Feb 28 12:08:20 2014 +0000\n\n    Libvirt: Repair metadata injection into guests\n    \n    The change to use Instance objects when spawning instances\n    changed the format of the 'metadata' property.  But this wasn't\n    taken into account in the code which actually injects metadata\n    into /meta.js in the guest's fs.\n    \n    This patch ensures that the meta.js file injection expects the\n    new format.\n    \n    Closes-bug: #1284733\n    \n    Change-Id: I37049ac01b65d30d588578e351fcddac457f95a7\n", 
            "date_created": "2014-03-19 00:57:57.903769+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ]
}
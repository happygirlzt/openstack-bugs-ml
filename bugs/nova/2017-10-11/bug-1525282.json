{
    "status": "Fix Released", 
    "last_updated": "2015-12-14 19:44:31.113096+00:00", 
    "description": "The wrap_exception decorator, which pulls the wrapped method arguments and sends a notification if there is an exception raised from the method, is not pulling the full list of arguments.  This is because of a combination of relying on safe_utils.getcallargs which doesn't pull arguments when the called method uses *args or **kwargs and not using get_wrapped_function to get the call args for the decorated method.  What is currently happening is getcallargs is passed a decorated method and pulls the argument list for the decorator, and most decorators are defined with *args and **kwargs.  Instead get_wrapped_function should be called first and the result should be passed to getcallargs.", 
    "tags": [], 
    "importance": "Low", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1525282", 
    "owner": "https://api.launchpad.net/1.0/~alaski", 
    "id": 1525282, 
    "index": 638, 
    "created": "2015-12-11 15:10:57.964104+00:00", 
    "title": "wrap_exception decorator does not grab arguments properly for decorated methods", 
    "comments": [
        {
            "content": "The wrap_exception decorator, which pulls the wrapped method arguments and sends a notification if there is an exception raised from the method, is not pulling the full list of arguments.  This is because of a combination of relying on safe_utils.getcallargs which doesn't pull arguments when the called method uses *args or **kwargs and not using get_wrapped_function to get the call args for the decorated method.  What is currently happening is getcallargs is passed a decorated method and pulls the argument list for the decorator, and most decorators are defined with *args and **kwargs.  Instead get_wrapped_function should be called first and the result should be passed to getcallargs.", 
            "date_created": "2015-12-11 15:10:57.964104+00:00", 
            "author": "https://api.launchpad.net/1.0/~alaski"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/256118\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=1b757c328d43d8154282794fddb8822ea265b1cf\nSubmitter: Jenkins\nBranch:    master\n\ncommit 1b757c328d43d8154282794fddb8822ea265b1cf\nAuthor: Andrew Laski <email address hidden>\nDate:   Thu Dec 10 17:34:09 2015 -0500\n\n    Fix wrap_exception to get all arguments for payload\n    \n    The wrap_exception decorator that attempts to send a notification when\n    exceptions occur was not sending all the arguments it was intending to.\n    It relies on getcallargs to get the arguments and argument names for the\n    called method but if the method has another decorator on it getcallargs\n    pulls information for the decorator rather than the decorated method.\n    This pulls the decorated method with get_wrapped_function and then calls\n    getcallargs.\n    \n    get_wrapped_function was moved to safeutils because utils.py can't be\n    imported by exception.py without a circular import.\n    \n    A few tests were updated to include the id on the instance object used.\n    This was done because serialization of the object includes the\n    instance.name field which assumes that id is set to populate the\n    CONF.instance_name_template.  When id is not set it triggers a lazy load\n    which fails in the test environment.\n    \n    Change-Id: I87d8691a2aae6f3555177364f3c40a490a6f7591\n    Closes-bug: 1525282\n", 
            "date_created": "2015-12-14 19:44:30.400705+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ]
}
{
    "status": "Opinion", 
    "last_updated": "2017-09-20 08:39:04.813652+00:00", 
    "description": "Background on OVMF builds\n-------------------------\n\n[This following is verbatim explanation from Laszlo Ersek (thank you),\nOVMF maintainer.]\n\n    One feature that can be built into OVMF is the \"Secure Boot\n    Feature\".  This is different from the operational mode called\n    \"Secure Boot\" (SB).  If the firmware contains the feature, then the\n    guest can enable or disable the operational mode. If the firmware\n    does not contain the feature, then the guest cannot enable the\n    operational mode.\n    \n    Another feature that can be built into OVMF is called \"SMM\" (Secure\n    Management Mode).  This means a driver stack that consists of a set\n    of privileged drivers that run in SMM, and another, interfacing set\n    of unprivileged drivers that only format requests for the privileged\n    half, and parse responses from it.  Once the SMM feature is built\n    into OVMF, then SMM emulation by the QEMU platform is\n    *non-optional*, it is required.\n    \n    The Secure Boot Feature and the SMM feature stack are orthogonal.\n    You can build OVMF in all four configurations. However, if you want\n    to allow trustworthy code in your guests to enable the Secure Boot\n    operational mode (for protecting itself), and *also* want to prevent\n    malicious code in your guests from *circumventing* the actual\n    security of the Secure Boot operational mode, then you have to build\n    *both* features into OVMF.\n\n* * *\n\nIMPORTANT: Different distributions ship different kinds of builds.  E.g.\nFedora ships both variants of OVMF firmware binaries: one without either\nwithout either SB or SMM, and the other with both SB or SMM.  Other\ndistributions ship different builds as well, and under different\npathnames.  Even if they ship an SB+SMM OVMF build, the pathname for the\nfirmware binary may be different.\n\n\nCurrent state of affairs in Nova\n--------------------------------\n\nCurrently in Nova, we check the DEFAULT_UEFI_LOADER_PATH:\n\n    [...]\n    DEFAULT_UEFI_LOADER_PATH = {\n        \"x86_64\": \"/usr/share/OVMF/OVMF_CODE.fd\",\n        \"aarch64\": \"/usr/share/AAVMF/AAVMF_CODE.fd\"\n    }\n    [...]\n\nHowever, that is not sufficient to enable Secure Boot (SB) + Secure\nManagement Mode (SMM).  See the following section for what needs to be\ndone.\n\n\nItems for upstream Nova to support OVMF SB + SMM \n------------------------------------------------\n\n[Also thanks to Laszlo for the explanation]\n\nTaking x86_64 architecture as example, to enable guests to boot with\nOVMF binary that provides the Secure Boot + Secure Management Mode\nfeature set, Nova should generate the XML with the following two items.\nTaking CentOS as example:\n\n(1) Enable SMM in the guest XML:\n\n      <features>\n        [...]\n        <smm state='on'/>\n      </features>\n\n(2) And the OVMF 'loader' related snippet looks as following (for a\n    CentOS host), with Q35 machine type:\n\n      <os>\n        <type arch='x86_64' machine='pc-q35-rhel7.4.0'>hvm</type>\n        <loader readonly='yes' secure='yes' type='pflash'>/usr/share/OVMF/OVMF_CODE.secboot.fd</loader>\n        [...]\n    </os>\n\n    NB: The paths for the UEFI binary will be different for different\n    distributions.  At least the ones that I know of: Fedora, RHEL,\n    SUSE, etc\n\nExplanation:\n\n  - The machine type should be Q35 only, and preferably 2.9 or later.\n    (Some earlier Q35 machine types work as well, but you'll get better\n    \"quality of service\" if you go with \"pc-q35-2.9\" or later.)\n\n  - The \"os/loader/@secure\" attribute must be set to \"yes\". This is what\n    instructs QEMU to prevent non-SMM guest code from tampering with the\n    varstore pflash chip.\n\n  - The \"features/smm\" element must exist, and the \"features/smm/@state\"\n    attribute must be set to \"on\". This makes sure QEMU will emulate\n    SMM.\n\n* * *\n\nNOTE: For AArch64 architecture, the OVMF binary paths will be different:\n\n  <os>\n    <type arch='aarch64' machine='virt-2.9'>hvm</type>\n    <loader readonly='yes' type='pflash'>...</loader>\n    [<nvram template='...'/>]\n  </os>\n  <features>\n    <acpi/>\n  </features>\n\nSo it needs consideration, too.", 
    "tags": [
        "libvirt", 
        "needs-spec"
    ], 
    "importance": "Wishlist", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1707007", 
    "owner": "None", 
    "id": 1707007, 
    "index": 1882, 
    "created": "2017-07-27 16:13:46.353523+00:00", 
    "title": "Add support to make Nova instances boot with OVMF Secure Boot + SMM (System Management Mode)", 
    "comments": [
        {
            "content": "Background on OVMF builds\n-------------------------\n\n[This following is verbatim explanation from Laszlo Ersek (thank you),\nOVMF maintainer.]\n\n    One feature that can be built into OVMF is the \"Secure Boot\n    Feature\".  This is different from the operational mode called\n    \"Secure Boot\" (SB).  If the firmware contains the feature, then the\n    guest can enable or disable the operational mode. If the firmware\n    does not contain the feature, then the guest cannot enable the\n    operational mode.\n    \n    Another feature that can be built into OVMF is called \"SMM\" (Secure\n    Management Mode).  This means a driver stack that consists of a set\n    of privileged drivers that run in SMM, and another, interfacing set\n    of unprivileged drivers that only format requests for the privileged\n    half, and parse responses from it.  Once the SMM feature is built\n    into OVMF, then SMM emulation by the QEMU platform is\n    *non-optional*, it is required.\n    \n    The Secure Boot Feature and the SMM feature stack are orthogonal.\n    You can build OVMF in all four configurations. However, if you want\n    to allow trustworthy code in your guests to enable the Secure Boot\n    operational mode (for protecting itself), and *also* want to prevent\n    malicious code in your guests from *circumventing* the actual\n    security of the Secure Boot operational mode, then you have to build\n    *both* features into OVMF.\n\n* * *\n\nIMPORTANT: Different distributions ship different kinds of builds.  E.g.\nFedora ships both variants of OVMF firmware binaries: one without either\nwithout either SB or SMM, and the other with both SB or SMM.  Other\ndistributions ship different builds as well, and under different\npathnames.  Even if they ship an SB+SMM OVMF build, the pathname for the\nfirmware binary may be different.\n\n\nCurrent state of affairs in Nova\n--------------------------------\n\nCurrently in Nova, we check the DEFAULT_UEFI_LOADER_PATH:\n\n    [...]\n    DEFAULT_UEFI_LOADER_PATH = {\n        \"x86_64\": \"/usr/share/OVMF/OVMF_CODE.fd\",\n        \"aarch64\": \"/usr/share/AAVMF/AAVMF_CODE.fd\"\n    }\n    [...]\n\nHowever, that is not sufficient to enable Secure Boot (SB) + Secure\nManagement Mode (SMM).  See the following section for what needs to be\ndone.\n\n\nItems for upstream Nova to support OVMF SB + SMM \n------------------------------------------------\n\n[Also thanks to Laszlo for the explanation]\n\nTaking x86_64 architecture as example, to enable guests to boot with\nOVMF binary that provides the Secure Boot + Secure Management Mode\nfeature set, Nova should generate the XML with the following two items.\nTaking CentOS as example:\n\n(1) Enable SMM in the guest XML:\n\n      <features>\n        [...]\n        <smm state='on'/>\n      </features>\n\n(2) And the OVMF 'loader' related snippet looks as following (for a\n    CentOS host), with Q35 machine type:\n\n      <os>\n        <type arch='x86_64' machine='pc-q35-rhel7.4.0'>hvm</type>\n        <loader readonly='yes' secure='yes' type='pflash'>/usr/share/OVMF/OVMF_CODE.secboot.fd</loader>\n        [...]\n    </os>\n\n    NB: The paths for the UEFI binary will be different for different\n    distributions.  At least the ones that I know of: Fedora, RHEL,\n    SUSE, etc\n\nExplanation:\n\n  - The machine type should be Q35 only, and preferably 2.9 or later.\n    (Some earlier Q35 machine types work as well, but you'll get better\n    \"quality of service\" if you go with \"pc-q35-2.9\" or later.)\n\n  - The \"os/loader/@secure\" attribute must be set to \"yes\". This is what\n    instructs QEMU to prevent non-SMM guest code from tampering with the\n    varstore pflash chip.\n\n  - The \"features/smm\" element must exist, and the \"features/smm/@state\"\n    attribute must be set to \"on\". This makes sure QEMU will emulate\n    SMM.\n\n* * *\n\nNOTE: For AArch64 architecture, the OVMF binary paths will be different:\n\n  <os>\n    <type arch='aarch64' machine='virt-2.9'>hvm</type>\n    <loader readonly='yes' type='pflash'>...</loader>\n    [<nvram template='...'/>]\n  </os>\n  <features>\n    <acpi/>\n  </features>\n\nSo it needs consideration, too.", 
            "date_created": "2017-07-27 16:13:46.353523+00:00", 
            "author": "https://api.launchpad.net/1.0/~kashyapc"
        }, 
        {
            "content": "This really should come in as a spec, it's a feature add. ", 
            "date_created": "2017-07-27 16:33:20.190127+00:00", 
            "author": "https://api.launchpad.net/1.0/~sdague"
        }
    ]
}
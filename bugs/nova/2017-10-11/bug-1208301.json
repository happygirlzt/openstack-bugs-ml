{
    "status": "Expired", 
    "last_updated": "2017-10-02 14:46:56.541107+00:00", 
    "description": "This defect is originally be found in the following scenario:\n\n1. Deploy one vm  A  with 100g disk and 1 cpu.\n2. Resize it with 2 cpu and 200g disk\n3. During resizing,  the host of vm is down (power off )\n4. restart the host\n\nAfter investigation, I found that in the method of  migrate_disk_and_power_off of the migrationops, which is called by the Hyper-V driver, the VM gets removed as its last step.\n\nhttps://github.com/openstack/nova/blob/master/nova/virt/hyperv/driver.py\nhttps://github.com/openstack/nova/blob/master/nova/virt/hyperv/migrationops.py\n\nCompared with the same scenario in KVM, the previous case works, which means the VM being resized won't be removed and after the host is up again, the resize can resume.\n\nSince I am not familiar with the orginal design and don't know why Hyper-V handle resizing like this. So open this defect for tracking and discussion.\n\nOne question I can propose here is: is there a standard behavior among the hypervisors for resizing? if yes, what is it?", 
    "tags": [
        "hyper-v"
    ], 
    "importance": "Undecided", 
    "heat": 22, 
    "link": "https://bugs.launchpad.net/nova/+bug/1208301", 
    "owner": "None", 
    "id": 1208301, 
    "index": 3916, 
    "created": "2013-08-05 03:12:14.832439+00:00", 
    "title": "The VM will be destroyed on source host during resizing for Hyper-V", 
    "comments": [
        {
            "content": "This defect is originally be found in the following scenario:\n\n1. Deploy one vm  A  with 100g disk and 1 cpu.\n2. Resize it with 2 cpu and 200g disk\n3. During resizing,  the host of vm is down (power off )\n4. restart the host\n\nAfter investigation, I found that in the method of  migrate_disk_and_power_off of the migrationops, which is called by the Hyper-V driver, the VM gets removed as its last step.\n\nhttps://github.com/openstack/nova/blob/master/nova/virt/hyperv/driver.py\nhttps://github.com/openstack/nova/blob/master/nova/virt/hyperv/migrationops.py\n\nCompared with the same scenario in KVM, the previous case works, which means the VM being resized won't be removed and after the host is up again, the resize can resume.\n\nSince I am not familiar with the orginal design and don't know why Hyper-V handle resizing like this. So open this defect for tracking and discussion.\n\nOne question I can propose here is: is there a standard behavior among the hypervisors for resizing? if yes, what is it?", 
            "date_created": "2013-08-05 03:12:14.832439+00:00", 
            "author": "https://api.launchpad.net/1.0/~gekun"
        }, 
        {
            "content": "Can you post a pastebin with some logs showing the exception traces?\n\n\"migrate_disk_and_power_off\" copies the disk files to the target location and moves the original files to a temporary location in order to resume the migration in case of errors.\n\nsee: https://github.com/openstack/nova/blob/master/nova/virt/hyperv/migrationops.py#L47\n\nIf the target host is not accessible, the disk copy step will throw an exception, the VM will NOT be destroyed no data will be lost but Nova will set the instance in an error state.\n\nGenerally speaking, error handling in the Nova compute driver operations model (any driver) is a simple binary thing: either the operation works, or the instance is set in an error state.\n\nThere's a discussion going on about adding the idea of \"warnings\" in nova, i.e. raising an exception w/o having to set the instance in a non recoverable error state and still signaling the issue to the user.  \n\n", 
            "date_created": "2013-08-05 12:46:12.146594+00:00", 
            "author": "https://api.launchpad.net/1.0/~alexpilotti"
        }, 
        {
            "content": "To answer your question, the resize / cold migration feature is hypervisor dependent.", 
            "date_created": "2013-08-05 12:46:18.539034+00:00", 
            "author": "https://api.launchpad.net/1.0/~alexpilotti"
        }, 
        {
            "content": "hi Alessandro, thanks for you response!\r\n\r\nStill have 2 questions here:\r\n\r\n1) I noticed you said that resize / cold migration feature was hypervisor dependent, does it mean the current behavour that destory VM during resize is necessary for Hyper-V? is it possible that the VM is maintained till resize_finish and destroyed when resize_confirm?\r\n\r\nFor the original issue:\r\n1. Deploy one vm A with 100g disk and 1 cpu.\r\n2. Resize it with 2 cpu and 200g disk\r\n3. During resizing, the host of vm is down (power off )\r\n4. restart the host\r\n\r\nis this a valid defect as your opinion?\r\nIf yes, can we have a possible solution?\r\n\r\n", 
            "date_created": "2013-08-06 07:34:27.285047+00:00", 
            "author": "https://api.launchpad.net/1.0/~gekun"
        }, 
        {
            "content": "Alessandro, you the comment#1\r\n\r\nI can post the compute log for you.\r\n\r\nFrom the log, we can find the migrate disk has been successfully operated and no exception raised.\r\n\r\nThe instance name [instance-00000062], uuid [6ccaf5e1-12e8-4da7-b319-99a609acec3d]\r\n\r\nThe log is between line 46561 and 46572.", 
            "date_created": "2013-08-06 08:02:48.570061+00:00", 
            "author": "https://api.launchpad.net/1.0/~gekun"
        }, 
        {
            "content": "The compute log for the original defect.", 
            "date_created": "2013-08-06 09:57:01.439595+00:00", 
            "author": "https://api.launchpad.net/1.0/~gekun"
        }, 
        {
            "content": "Hi Alessandro\r\n\r\nCould you pleae answer my previous questions?\r\n\r\n1) I noticed you said that resize / cold migration feature was hypervisor dependent, does it mean the current behavour that destory VM during resize is necessary for Hyper-V? is it possible that the VM is maintained till resize_finish and destroyed when resize_confirm?\r\n\r\n2) is the original defect a valid one? is there any possible workaround for this test?\r\n\r\nMany thanks!", 
            "date_created": "2013-08-07 15:38:50.478239+00:00", 
            "author": "https://api.launchpad.net/1.0/~gekun"
        }, 
        {
            "content": "We are having a hard time trying to reproduce this issue.\n\nWhat looks like a possible cause is this one:\n\n1) target host is on, bova-compute service is down\n2) first step of migration works as the SMB copy can happen (the host is up)\n3) the root.vhd, is not deleted but moved to a temporary location waiting for confirm resize and the VM is deleted\n\nA scenario in which the target host is down would lead to an exception during the SMB copy, which in turn would avoid step 3.\n\nIn case of failures, the VM should be recovered during revert migration. IMO this looks like another of those migration issues due to the lack of \"soft errors\", so there's not much that we can do on the driver side except some workaround.\n\nWe'll have to investigate more into this, I'll write an update ASAP.\n", 
            "date_created": "2013-08-14 13:58:24.785278+00:00", 
            "author": "https://api.launchpad.net/1.0/~alexpilotti"
        }, 
        {
            "content": "\nThis is an automated cleanup. This bug report has been closed because it\nis older than 18 months and there is no open code change to fix this.\nAfter this time it is unlikely that the circumstances which lead to\nthe observed issue can be reproduced.\n\nIf you can reproduce the bug, please:\n* reopen the bug report (set to status \"New\")\n* AND add the detailed steps to reproduce the issue (if applicable)\n* AND leave a comment \"CONFIRMED FOR: <RELEASE_NAME>\"\n  Only still supported release names are valid (LIBERTY, MITAKA, OCATA, NEWTON).\n  Valid example: CONFIRMED FOR: LIBERTY\n", 
            "date_created": "2016-07-05 09:42:53.648643+00:00", 
            "author": "https://api.launchpad.net/1.0/~mzoeller"
        }
    ]
}
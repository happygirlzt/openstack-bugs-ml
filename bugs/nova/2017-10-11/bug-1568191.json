{
    "status": "Invalid", 
    "last_updated": "2017-08-12 03:43:49.357712+00:00", 
    "description": "If I understand correctly, the concept of flavor extra specs has been replaced by metadata.\n\nOn nova/virt/hardware.py, it's checking for some specific flavor extra specs in _get_cpu_topology_constraints(). \n\nhttps://github.com/openstack/nova/blob/f396826314b9f37eb57151f0dd8a8e3b7d8a8a5c/nova/virt/hardware.py\n\nThese specific flavor extra specs are included in the pre-defined metadata json so the user can load them with command \"glance-manage db_load_metadefs\". However, the names are not exactly the same.\n\nhttps://github.com/openstack/glance/blob/1c242032fbb26fed3a82691abb030583b4f8940b/etc/metadefs/compute-vcputopology.json", 
    "tags": [
        "compute", 
        "numa"
    ], 
    "importance": "Medium", 
    "heat": 20, 
    "link": "https://bugs.launchpad.net/nova/+bug/1568191", 
    "owner": "https://api.launchpad.net/1.0/~melwitt", 
    "id": 1568191, 
    "index": 4507, 
    "created": "2016-04-08 23:13:42.969143+00:00", 
    "title": "Pre-defined VirtCPUTopology metadata should have the same name as flavor extra specs in nova", 
    "comments": [
        {
            "content": "If I understand correctly, the concept of flavor extra specs has been replaced by metadata.\n\nOn nova/virt/hardware.py, it's checking for some specific flavor extra specs in _get_cpu_topology_constraints(). \n\nhttps://github.com/openstack/nova/blob/f396826314b9f37eb57151f0dd8a8e3b7d8a8a5c/nova/virt/hardware.py\n\nThese specific flavor extra specs are included in the pre-defined metadata json so the user can load them with command \"glance-manage db_load_metadefs\". However, the names are not exactly the same.\n\nhttps://github.com/openstack/glance/blob/1c242032fbb26fed3a82691abb030583b4f8940b/etc/metadefs/compute-vcputopology.json", 
            "date_created": "2016-04-08 23:13:42.969143+00:00", 
            "author": "https://api.launchpad.net/1.0/~yingzuo"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/303658", 
            "date_created": "2016-04-08 23:22:49.812216+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Seems that Nova is looking for wrong keys from image metadef when putting this information together.", 
            "date_created": "2016-05-10 08:27:14.146632+00:00", 
            "author": "https://api.launchpad.net/1.0/~jokke"
        }, 
        {
            "content": " > If I understand correctly, the concept of flavor extra specs has been replaced by metadata.\n\nNo, flavor extra specs are complimented by metadata. For things like CPU policies, image metadata will take precedence over flavor extra specs, but both are valid.", 
            "date_created": "2016-07-07 15:34:10.913574+00:00", 
            "author": "https://api.launchpad.net/1.0/~stephenfinucane"
        }, 
        {
            "content": "Stephen Finucane,\nThanks for the clarification. I got that impression since Horizon doesn't have a way to set extra specs anymore so I guess that's just a Horizon change. Do you think the pre-defined metadata names defined in Glance should be consistent with the extra spec names defined on nova/virt/hardware.py? ", 
            "date_created": "2016-07-07 16:04:54.997443+00:00", 
            "author": "https://api.launchpad.net/1.0/~yingzuo"
        }, 
        {
            "content": "FYI Nova has an API for setting flavor extra specs [1].\r\n\r\nBased on the link provided from glance [2] on the key names, it does appear that nova is looking for the wrong image metadata key names for: hw_cpu_maxsockets, hw_cpu_maxcores, hw_cpu_maxthreads\r\n\r\n[1] http://developer.openstack.org/api-ref-compute-v2.1.html#flavor-extra-specs-v2.1\r\n[2] https://github.com/openstack/glance/blob/1c242032fbb26fed3a82691abb030583b4f8940b/etc/metadefs/compute-vcputopology.json", 
            "date_created": "2016-09-07 17:07:31.586894+00:00", 
            "author": "https://api.launchpad.net/1.0/~melwitt"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/367627", 
            "date_created": "2016-09-08 20:51:53.180140+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "I put my nova patch on hold because from what nikhil explained in IRC, glance provides the metadata defs sourced from other projects, such as nova, and doesn't rely on the keys itself. So it sounds like this is more appropriate to fix on the glance side.", 
            "date_created": "2016-09-09 01:02:16.273973+00:00", 
            "author": "https://api.launchpad.net/1.0/~melwitt"
        }, 
        {
            "content": "Yes, let's fix this in glance please. The fully underscore separated one is what's used in the nova code [1] and in the original spec [2]. It also has more Google hits :) [3][4] This is a bug in glance and the fix should probably get backported.\n\n[1] https://github.com/gooddata/openstack-nova/blob/6ccf12c/nova/virt/hardware.py#L298-L304\n[2] https://specs.openstack.org/openstack/nova-specs/specs/juno/implemented/virt-driver-vcpu-topology.html\n[3] https://www.google.ie/search?q=\"hw_cpu_maxthreads\"\n[4] https://www.google.ie/search?q=\"hw_cpu_max_threads\"", 
            "date_created": "2016-09-09 09:10:44.861951+00:00", 
            "author": "https://api.launchpad.net/1.0/~stephenfinucane"
        }, 
        {
            "content": "My patch in Glance is still on. https://review.openstack.org/#/c/303658/.\nFlavio Percoco and Erno Kuvaja, can you please take another look?\n", 
            "date_created": "2016-09-09 16:16:54.183228+00:00", 
            "author": "https://api.launchpad.net/1.0/~yingzuo"
        }, 
        {
            "content": "Yep, we need to fix this in Glance. It has an upgrade impact and we will have to consider operators' choices. But considering the keys (as per the change) have been in the nova code since nov 2014, it should be rather safe to fix and backport.\n\nhttps://github.com/openstack/nova/blob/96ab8ab058a2b39d9c9c0f5f5af7fa5b6e470b94/nova/virt/hardware.py#L293-L299 (see date on the commit).", 
            "date_created": "2016-09-15 04:09:43.120852+00:00", 
            "author": "https://api.launchpad.net/1.0/~nikhil-komawar"
        }, 
        {
            "content": "Marking as Invalid for Nova as Nikhil has commented on fixing it in Glance.", 
            "date_created": "2016-09-15 22:40:33.091701+00:00", 
            "author": "https://api.launchpad.net/1.0/~melwitt"
        }, 
        {
            "content": "Change abandoned by melanie witt (<email address hidden>) on branch: master\nReview: https://review.openstack.org/367627\nReason: As discussed on the launchpad bug, this is more appropriate to fix in Glance.", 
            "date_created": "2016-09-15 22:41:54.644271+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "I have a few questions around this issue.\n\nThe Compute os-extra_specs API allows you to put arbitrary key/value pairs on a flavor. How do operators discover what keys actually work with Nova, so they know to use hw_cpu_max_sockets instead of hw_cpu_maxsockets?\n\nFor interoperability, it makes sense to use the Glance metadefs catalog to define the VirtCPUTopology metadata keys and value datatypes.  But operators who are doing that now are apparently putting non-effective metadata keys on their images.  Would the non-effectiveness be obvious to operators, so that they'd correct the keys manually, or could this go unnoticed?\n\nI'm asking because if you have a large number of images and server snapshot images around, do we expect an operator to migrate the keys on all these images?  A better solution might be to change the nova code to accept either keyname.  On the other hand, if the ineffectiveness is so obvious that the ops would have corrected their systems already, then maybe we don't have to worry about backward compatability so much.  But as Flavio and Erno already commented on the patch, I'm worried about the effect this change will have on current operators.\n\nIt's an empirical question, we can go to the ML to ask.  I'd like to know about the current situation with respect to discoverability, though.\n", 
            "date_created": "2016-09-16 18:54:31.875392+00:00", 
            "author": "https://api.launchpad.net/1.0/~brian-rosmaita"
        }, 
        {
            "content": "My 2 cents\n\n> The Compute os-extra_specs API allows you to put arbitrary key/value\n> pairs on a flavor. How do operators discover what keys actually work\n> with Nova, so they know to use hw_cpu_max_sockets instead of\n> hw_cpu_maxsockets?\n\nI guess the documentation would be the best resource here. However,\nunlike image metadata, there is no way to validate flavor extra keys.\nThe only way to max sure the things work is to use exactly what's in\nthe docs and perhaps validate that things work as expected.\n\n> For interoperability, it makes sense to use the Glance metadefs\n> catalog to define the VirtCPUTopology metadata keys and value\n> datatypes. But operators who are doing that now are apparently\n> putting non-effective metadata keys on their images. Would the\n> non-effectiveness be obvious to operators, so that they'd\n> correct the keys manually, or could this go unnoticed?\n\nIt depends on how important they consider the various properties.\nThese particular properties are upper limits on how a many\ncores/cpus/sockets a user can define, and if these limits are important\nthen I'd hope the operator would have tested them.\n\n> I'm asking because if you have a large number of images and server\n> snapshot images around, do we expect an operator to migrate the keys\n> on all these images? A better solution might be to change the nova\n> code to accept either keyname.\n\nI think we should expect them to change it, yes. At the moment, the\nflavor key provided doesn't do anything: I think it better to keep\ndoing nothing than possibly break installs.\n\n> On the other hand, if the ineffectiveness is so obvious that the ops\n> would have corrected their systems already, then maybe we don't have\n> to worry about backward compatability so much. But as Flavio and\n> Erno already commented on the patch, I'm worried about the effect\n> this change will have on current operators.\n\nYeah, if operators really care about this then it should have been\nvalidated. If not, see above.", 
            "date_created": "2016-09-19 16:16:13.038710+00:00", 
            "author": "https://api.launchpad.net/1.0/~stephenfinucane"
        }, 
        {
            "content": "Many people may not realize that basically there is no effect of the added metadata.\n\nI believe that the correct fix is to do it in Glance. Glance has the ability to migrate metadefs in the catalog, but not a migrate image metadata command. This probably could be added into the glance manage commands for metadefs now and it could also apply the migration to all resource types affected (flavors, volumes (image properties), images, snapshots).\n\nA few reasons this catalog even came into existence:\n * Docs were out of date and inaccurate\n * The prefixes applied vary based on the resource type - e.g. image / volume use _ and flavor uses :\n * No ability for operators to manage visibility of available metadata (public / admin only)\n * Operators needed an ability to define their own metadata and easily correlate between nova scheduler filters (like host aggregates / flavors / images), across regions, and clouds.\n\nIt would be better if Nova could publish them to Glance or Glance was able to discover them / validate them from the source service if defined. (for example: [0] [1]) \n\nSamples from the original proposal:\n\n[0] https://wiki.openstack.org/wiki/Graffiti/Architecture#Use_Case_Example.CB.90_Compute_Capabilities\n\n[1] https://wiki.openstack.org/wiki/Graffiti/Architecture#Additional_Details", 
            "date_created": "2016-09-20 23:46:42.726527+00:00", 
            "author": "https://api.launchpad.net/1.0/~travis-tripp"
        }, 
        {
            "content": "> The Compute os-extra_specs API allows you to put arbitrary key/value\n> pairs on a flavor. How do operators discover what keys actually work\n> with Nova, so they know to use hw_cpu_max_sockets instead of hw_cpu_maxsockets?\n\nHistorically there was nothing formal defined - things were just mentioned in docs in an adhoc manner. I don't think we're much better today. \n\n> For interoperability, it makes sense to use the Glance metadefs catalog\n> to define the VirtCPUTopology metadata keys and value datatypes. But\n> operators who are doing that now are apparently putting non-effective \n> metadata keys on their images. Would the non-effectiveness be obvious to \n> operators, so that they'd correct the keys manually, or could this go \n> unnoticed?\n\nI don't know where the Glance metadefs catalog comes from, but from Nova's\nPOV it is certainly not the canonical source. Nova has a  versioned object \nthat formally declares what is accepted by Nova, providing reasonably strong\nvalidation on the field data formats. Any other source of information is at\nbest a duplicate of this object model, or at worse plain wrong.\n\nhttps://github.com/openstack/nova/blob/master/nova/objects/image_meta.py\n\nWhat's missing is that we ought to be auto-generating some documentation from \nthe ImageMeta object model for each relase, so there's clear info on what's\n supported.\n\n\n> I'm asking because if you have a large number of images and server snapshot\n> images around, do we expect an operator to migrate the keys on all these\n> images? A better solution might be to change the nova code to accept either \n> keyname.\n\nNova already has back-compat hacks to deal with some old key names, but this is for the case where old versions of nova actually used those old key names. It sounds like here we're talking about things that we just mistakenly documented somewhere and were never actually honoured by nova. For that I don't see any compelling reason to add back compat, as they have would have never worked.\n\n", 
            "date_created": "2016-10-06 15:13:28.125717+00:00", 
            "author": "https://api.launchpad.net/1.0/~berrange"
        }, 
        {
            "content": "Change abandoned by Ying Zuo (<email address hidden>) on branch: master\nReview: https://review.openstack.org/303658\nReason: doesn't look like we want to move forward with it", 
            "date_created": "2017-08-12 03:43:47.916687+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ]
}
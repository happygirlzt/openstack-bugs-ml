{
    "status": "Invalid", 
    "last_updated": "2014-09-15 12:05:06.191269+00:00", 
    "description": "Outline:\nIf nova.compute.manager.ComputeManager._spawn() raises Exception (e.g. ProcessExecutionError) in os-volumes_boot,\ncontext cannot be gotten from args of run_instance() via nova.exception.get_context_from_function_and_args().\n\nBecause context(2nd arg) of run_instance() is not nova.context.RequestContext but nova.openstack.common.rpc.amqp.RpcConext class.\n\nNotice:\nI set following FLAGS.flags (for no re-scheduling).\n<pre>\nscheduler_max_attempts=1\n</pre>\n\nDetail:\nWhen Exception (e.g. ProcessExecutionError) is raised in run_instance(), the exception is handled by nova.exception.wrap_exception().\n\nSee nova.exception.get_context_from_function_and_args().\nContext is intended to be gotten as nova.context.RequestContext class, so in my case nova.openstack.common.rpc.amqp.RpcConext object is returned as None.\n\n<pre><code class=\"python\">\ndef get_context_from_function_and_args(function, args, kwargs):\n    \"\"\"Find an arg of type RequestContext and return it.\n\n       This is useful in a couple of decorators where we don't\n       know much about the function we're wrapping.\n    \"\"\"\n\n    # import here to avoid circularity:\n    from nova import context\n\n    for arg in itertools.chain(kwargs.values(), args):\n        if isinstance(arg, context.RequestContext):\n            return arg\n\n    return None\n</code></pre>\n\n\nI'd like to use request_id of context via notifier.notify() in the error case.\nPlease fix this bug, or let me know how to realize it.", 
    "tags": [], 
    "importance": "Undecided", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1088823", 
    "owner": "None", 
    "id": 1088823, 
    "index": 3257, 
    "created": "2012-12-11 09:24:02.231399+00:00", 
    "title": "context cannot be gotten from args of run_instance() If _spawn() raises ProcessExecutionError", 
    "comments": [
        {
            "content": "Outline:\nIf nova.compute.manager.ComputeManager._spawn() raises Exception (e.g. ProcessExecutionError) in os-volumes_boot,\ncontext cannot be gotten from args of run_instance() via nova.exception.get_context_from_function_and_args().\n\nBecause context(2nd arg) of run_instance() is not nova.context.RequestContext but nova.openstack.common.rpc.amqp.RpcConext class.\n\nNotice:\nI set following FLAGS.flags (for no re-scheduling).\n<pre>\nscheduler_max_attempts=1\n</pre>\n\nDetail:\nWhen Exception (e.g. ProcessExecutionError) is raised in run_instance(), the exception is handled by nova.exception.wrap_exception().\n\nSee nova.exception.get_context_from_function_and_args().\nContext is intended to be gotten as nova.context.RequestContext class, so in my case nova.openstack.common.rpc.amqp.RpcConext object is returned as None.\n\n<pre><code class=\"python\">\ndef get_context_from_function_and_args(function, args, kwargs):\n    \"\"\"Find an arg of type RequestContext and return it.\n\n       This is useful in a couple of decorators where we don't\n       know much about the function we're wrapping.\n    \"\"\"\n\n    # import here to avoid circularity:\n    from nova import context\n\n    for arg in itertools.chain(kwargs.values(), args):\n        if isinstance(arg, context.RequestContext):\n            return arg\n\n    return None\n</code></pre>\n\n\nI'd like to use request_id of context via notifier.notify() in the error case.\nPlease fix this bug, or let me know how to realize it.", 
            "date_created": "2012-12-11 09:24:02.231399+00:00", 
            "author": "https://api.launchpad.net/1.0/~a-yokose"
        }, 
        {
            "content": "I checked this in stable:folsom", 
            "date_created": "2012-12-11 09:25:11.992057+00:00", 
            "author": "https://api.launchpad.net/1.0/~a-yokose"
        }, 
        {
            "content": "Is this still valid? It was filed against an old version of Nova", 
            "date_created": "2014-07-12 19:32:08.567580+00:00", 
            "author": "https://api.launchpad.net/1.0/~jogo"
        }
    ]
}
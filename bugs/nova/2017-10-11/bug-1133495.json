{
    "status": "Fix Released", 
    "last_updated": "2013-05-31 13:48:42.178834+00:00", 
    "description": "This bug report is here to be able to link the patch (to be commited) to the bug reported in the mailinglist by Sam Morrison\n\nI quote:\n\n---------\n\nI have been playing with the AggregateInstanceExtraSpecs filter and can't get it to work.\n\nIn our staging environment it works fine with 4 compute nodes, I have 2 aggregates to split them into 2.\n\nWhen I try to do the same in our production environment which has 80 compute nodes (splitting them again into 2 aggregates) it doesn't work.\n\nnova-scheduler starts to go very slow,  I scheduled an instance and gave up after 5 minutes, it seemed to be taking ages and the host was at 100% cpu. Also got about 500 messages in rabbit that were unacknowledged.\n\nWe are running stable/folsom. Does anyone else have this issue or know if there have been any fixes in Grizzly relating to this? I couldn't see any bugs about it.\n\nThanks,\nSam\n\n---------\n\nA brief discussion followed, indicating this appears to be a bug indeed, not a missing index. We're experiencing and seeing the same behavior, and I think I've found the root cause. \n\nFrom what I can see, there's a many-To-many relation defined in nova/db/sqlalchemy/models.py between Aggregate class and both AggregateHost and AggregateMetadata classes. This should be a one to many relation if I'm not mistaken, so I've created a patch to reflect this.", 
    "tags": [
        "folsom-backport-potential"
    ], 
    "importance": "High", 
    "heat": 14, 
    "link": "https://bugs.launchpad.net/nova/+bug/1133495", 
    "owner": "https://api.launchpad.net/1.0/~jogo", 
    "id": 1133495, 
    "index": 988, 
    "created": "2013-02-26 17:54:07.244104+00:00", 
    "title": "AggregateInstanceExtraSpecs very slow", 
    "comments": [
        {
            "content": "This bug report is here to be able to link the patch (to be commited) to the bug reported in the mailinglist by Sam Morrison\n\nI quote:\n\n---------\n\nI have been playing with the AggregateInstanceExtraSpecs filter and can't get it to work.\n\nIn our staging environment it works fine with 4 compute nodes, I have 2 aggregates to split them into 2.\n\nWhen I try to do the same in our production environment which has 80 compute nodes (splitting them again into 2 aggregates) it doesn't work.\n\nnova-scheduler starts to go very slow,  I scheduled an instance and gave up after 5 minutes, it seemed to be taking ages and the host was at 100% cpu. Also got about 500 messages in rabbit that were unacknowledged.\n\nWe are running stable/folsom. Does anyone else have this issue or know if there have been any fixes in Grizzly relating to this? I couldn't see any bugs about it.\n\nThanks,\nSam\n\n---------\n\nA brief discussion followed, indicating this appears to be a bug indeed, not a missing index. We're experiencing and seeing the same behavior, and I think I've found the root cause. \n\nFrom what I can see, there's a many-To-many relation defined in nova/db/sqlalchemy/models.py between Aggregate class and both AggregateHost and AggregateMetadata classes. This should be a one to many relation if I'm not mistaken, so I've created a patch to reflect this.", 
            "date_created": "2013-02-26 17:54:07.244104+00:00", 
            "author": "https://api.launchpad.net/1.0/~corcornelisse"
        }, 
        {
            "content": "Excellent, please post the patch here or on gerrit.", 
            "date_created": "2013-02-26 19:31:02.636553+00:00", 
            "author": "https://api.launchpad.net/1.0/~vishvananda"
        }, 
        {
            "content": "Here's a patch that helps the specific query being used:\n\nhttp://paste.openstack.org/show/32534/\n", 
            "date_created": "2013-02-26 19:33:02.776855+00:00", 
            "author": "https://api.launchpad.net/1.0/~cbehrens"
        }, 
        {
            "content": "I've tested this patch in our test env. (4 hosts with one aggregate assigned to each host)\n\nThe original query is:\n\nSELECT aggregates.created_at AS aggregates_created_at, aggregates.updated_at AS aggregates_updated_at, aggregates.deleted_at AS aggregates_deleted_at, aggregates.deleted AS aggregates_deleted, aggregates.id AS aggregates_id, aggregates.name AS aggregates_name, aggregates.availability_zone AS aggregates_availability_zone, aggregate_hosts_1.created_at AS aggregate_hosts_1_created_at, aggregate_hosts_1.updated_at AS aggregate_hosts_1_updated_at, aggregate_hosts_1.deleted_at AS aggregate_hosts_1_deleted_at, aggregate_hosts_1.deleted AS aggregate_hosts_1_deleted, aggregate_hosts_1.id AS aggregate_hosts_1_id, aggregate_hosts_1.host AS aggregate_hosts_1_host, aggregate_hosts_1.aggregate_id AS aggregate_hosts_1_aggregate_id  FROM aggregates INNER JOIN aggregate_hosts AS aggregate_hosts_2 ON aggregates.id = aggregate_hosts_2.aggregate_id AND aggregate_hosts_2.deleted = 0 AND aggregates.deleted = 0 INNER JOIN aggregate_hosts ON aggregate_hosts.aggregate_id = aggregates.id AND aggregate_hosts.deleted = 0 AND aggregates.deleted = 0 INNER JOIN aggregate_metadata AS aggregate_metadata_1 ON aggregates.id = aggregate_metadata_1.aggregate_id AND aggregate_metadata_1.deleted = 0 AND aggregates.deleted = 0 INNER JOIN aggregate_metadata ON aggregate_metadata.aggregate_id = aggregates.id AND aggregate_metadata.deleted = 0 AND aggregates.deleted = 0 LEFT OUTER JOIN aggregate_hosts AS aggregate_hosts_3 ON aggregates.id = aggregate_hosts_3.aggregate_id AND aggregate_hosts_3.deleted = 0 AND aggregates.deleted = 0 LEFT OUTER JOIN aggregate_hosts AS aggregate_hosts_1 ON aggregate_hosts_1.aggregate_id = aggregates.id AND aggregate_hosts_1.deleted = 0 AND aggregates.deleted = 0 WHERE aggregates.deleted = 0 AND aggregate_hosts.host = 'cc2';\n\nThis returns 64 rows.\n\nWith the patch applied I get this SQL which returns 4 rows:\n\nSELECT aggregates.created_at AS aggregates_created_at, aggregates.updated_at AS aggregates_updated_at, aggregates.deleted_at AS aggregates_deleted_at, aggregates.deleted AS aggregates_deleted, aggregates.id AS aggregates_id, aggregates.name AS aggregates_name, aggregates.availability_zone AS aggregates_availability_zone, aggregate_hosts_1.created_at AS aggregate_hosts_1_created_at, aggregate_hosts_1.updated_at AS aggregate_hosts_1_updated_at, aggregate_hosts_1.deleted_at AS aggregate_hosts_1_deleted_at, aggregate_hosts_1.deleted AS aggregate_hosts_1_deleted, aggregate_hosts_1.id AS aggregate_hosts_1_id, aggregate_hosts_1.host AS aggregate_hosts_1_host, aggregate_hosts_1.aggregate_id AS aggregate_hosts_1_aggregate_id, aggregate_metadata_1.created_at AS aggregate_metadata_1_created_at, aggregate_metadata_1.updated_at AS aggregate_metadata_1_updated_at, aggregate_metadata_1.deleted_at AS aggregate_metadata_1_deleted_at, aggregate_metadata_1.deleted AS aggregate_metadata_1_deleted, aggregate_metadata_1.id AS aggregate_metadata_1_id, aggregate_metadata_1.`key` AS aggregate_metadata_1_key, aggregate_metadata_1.value AS aggregate_metadata_1_value, aggregate_metadata_1.aggregate_id AS aggregate_metadata_1_aggregate_id  FROM aggregate_hosts, aggregates LEFT OUTER JOIN aggregate_hosts AS aggregate_hosts_1 ON aggregates.id = aggregate_hosts_1.aggregate_id AND aggregate_hosts_1.deleted = 0 AND aggregates.deleted = 0 LEFT OUTER JOIN aggregate_metadata AS aggregate_metadata_1 ON aggregates.id = aggregate_metadata_1.aggregate_id AND aggregate_metadata_1.deleted = 0 AND aggregates.deleted = 0  WHERE aggregates.deleted = 0 AND aggregate_hosts.host = 'cc2';\n\nn| aggregates_created_at | aggregates_updated_at | aggregates_deleted_at | aggregates_deleted | aggregates_id | aggregates_name | aggregates_availability_zone | aggregate_hosts_1_created_at | aggregate_hosts_1_updated_at | aggregate_hosts_1_deleted_at | aggregate_hosts_1_deleted | aggregate_hosts_1_id | aggregate_hosts_1_host | aggregate_hosts_1_aggregate_id | aggregate_metadata_1_created_at | aggregate_metadata_1_updated_at | aggregate_metadata_1_deleted_at | aggregate_metadata_1_deleted | aggregate_metadata_1_id | aggregate_metadata_1_key | aggregate_metadata_1_value | aggregate_metadata_1_aggregate_id |\nn| 2013-02-25 16:24:22   | NULL                  | NULL                  |                  0 |             2 | netapp          | melbourne-testenv            | 2013-02-25 16:24:34          | NULL                         | NULL                         |                         0 |                    2 | cc1                    |                              2 | 2013-02-25 16:25:25             | NULL                            | NULL                            |                            0 |                       2 | storage                  | netapp                     |                                 2 |\n| 2013-02-25 16:24:22   | NULL                  | NULL                  |                  0 |             2 | netapp          | melbourne-testenv            | 2013-02-25 16:24:40          | NULL                         | NULL                         |                         0 |                    3 | cc2                    |                              2 | 2013-02-25 16:25:25             | NULL                            | NULL                            |                            0 |                       2 | storage                  | netapp                     |                                 2 |\n| 2013-02-25 16:24:22   | NULL                  | NULL                  |                  0 |             2 | netapp          | melbourne-testenv            | 2013-02-25 16:24:42          | NULL                         | NULL                         |                         0 |                    4 | cc3                    |                              2 | 2013-02-25 16:25:25             | NULL                            | NULL                            |                            0 |                       2 | storage                  | netapp                     |                                 2 |\n| 2013-02-25 16:24:22   | NULL                  | NULL                  |                  0 |             2 | netapp          | melbourne-testenv            | 2013-02-25 16:24:44          | NULL                         | NULL                         |                         0 |                    5 | cc4                    |                              2 | 2013-02-25 16:25:25             | NULL                            | NULL                            |                            0 |                       2 | storage                  | netapp                     |                                 2 |\nn4 rows in set (0.00 sec)\n\nIt should be returning 1 row.\n\n", 
            "date_created": "2013-02-26 23:07:42.240643+00:00", 
            "author": "https://api.launchpad.net/1.0/~sorrison"
        }, 
        {
            "content": "This patch is currently breaking the following tests too so may have some bad side affects \n\n======================================================================\nFAIL: test_aggregate_filter_fails_extra_specs_deleted_host (nova.tests.scheduler.test_host_filters.HostFiltersTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/tmp/buildd/nova-2012.2.2+20130129/nova/tests/scheduler/test_host_filters.py\", line 798, in test_aggregate_filter_fails_extra_specs_deleted_host\n    self.assertFalse(filt_cls.host_passes(host, filter_properties))\nAssertionError: True is not false\n    'True is not false' = self._formatMessage('True is not false', \"%s is not false\" % safe_repr(True))\n>>  raise self.failureException('True is not false')\n    \n\n======================================================================\nFAIL: Ensure we can get aggregates by host.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/tmp/buildd/nova-2012.2.2+20130129/nova/tests/test_db_api.py\", line 688, in test_aggregate_metdata_get_by_host\n    self.assertFalse('badkey' in r1)\nAssertionError: True is not false\n    'True is not false' = self._formatMessage('True is not false', \"%s is not false\" % safe_repr(True))\n>>  raise self.failureException('True is not false')\n    \n\n======================================================================\nFAIL: Ensure we can get aggregates by host.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/tmp/buildd/nova-2012.2.2+20130129/nova/tests/test_db_api.py\", line 704, in test_aggregate_metdata_get_by_host_with_key\n    self.assertFalse('fake_key1' in r1)\nAssertionError: True is not false\n    'True is not false' = self._formatMessage('True is not false', \"%s is not false\" % safe_repr(True))\n>>  raise self.failureException('True is not false')\n    \n\n----------------------------------------------------------------------\n", 
            "date_created": "2013-02-27 02:41:39.127223+00:00", 
            "author": "https://api.launchpad.net/1.0/~sorrison"
        }, 
        {
            "content": "Sam what happens in your environment if you try:\n\ndiff --git a/nova/db/sqlalchemy/models.py b/nova/db/sqlalchemy/models.py\nindex 95456bf..49cf23e 100644\n--- a/nova/db/sqlalchemy/models.py\n+++ b/nova/db/sqlalchemy/models.py\n@@ -842,28 +842,18 @@ class Aggregate(BASE, NovaBase):\n     name = Column(String(255))\n     _hosts = relationship(AggregateHost,\n                           lazy=\"joined\",\n-                          secondary=\"aggregate_hosts\",\n                           primaryjoin='and_('\n                                  'Aggregate.id == AggregateHost.aggregate_id,'\n                                  'AggregateHost.deleted == 0,'\n                                  'Aggregate.deleted == 0)',\n-                         secondaryjoin='and_('\n-                                'AggregateHost.aggregate_id == Aggregate.id, '\n-                                'AggregateHost.deleted == 0,'\n-                                'Aggregate.deleted == 0)',\n                          backref='aggregates')\n \n     _metadata = relationship(AggregateMetadata,\n-                         secondary=\"aggregate_metadata\",\n                          primaryjoin='and_('\n                              'Aggregate.id == AggregateMetadata.aggregate_id,'\n                              'AggregateMetadata.deleted == 0,'\n                              'Aggregate.deleted == 0)',\n-                         secondaryjoin='and_('\n-                             'AggregateMetadata.aggregate_id == Aggregate.id, '\n-                             'AggregateMetadata.deleted == 0,'\n-                             'Aggregate.deleted == 0)',\n-                         backref='aggregates')\n+                        backref='aggregates')\n \n     def _extra_keys(self):\n         return ['hosts', 'metadetails', 'availability_zone']", 
            "date_created": "2013-02-27 20:06:38.357251+00:00", 
            "author": "https://api.launchpad.net/1.0/~jogo"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/23115", 
            "date_created": "2013-02-27 21:01:56.654433+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Hi Joe,\n\nFunny, this is exactly the same patch I went for in the end too. It reduces the sql queries down a lot but it still isn't 100% correct.\n\nThe number of rows will be the number of hosts that are in the same aggregate as the host you choose. Not ideal but still better than the 300K+ rows being returned originally.\n\nWould be nice to get it to return the correct result. It can produce the correct sql when you remove the primaryjoins too but it breaks a lot of tests and  I don't know enough about sqlalchemy to figure out what's going on.", 
            "date_created": "2013-02-27 22:15:54.934315+00:00", 
            "author": "https://api.launchpad.net/1.0/~sorrison"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/23164", 
            "date_created": "2013-02-28 11:15:43.287640+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Whoops, just noticed a fix was already committed here:\n\nhttps://review.openstack.org/23115/\n\nPlease abandon:\n\nhttps://review.openstack.org/23164\n\nSorry...\n\nOn Thu, Feb 28, 2013 at 12:15 PM, OpenStack Hudson <\n<email address hidden>> wrote:\n\n> Fix proposed to branch: master\n> Review: https://review.openstack.org/23164\n>\n> ** Changed in: nova\n>      Assignee: Joe Gordon (jogo) => Cor Cornelisse (corcornelisse)\n>\n> --\n> You received this bug notification because you are subscribed to the bug\n> report.\n> https://bugs.launchpad.net/bugs/1133495\n>\n> Title:\n>   AggregateInstanceExtraSpecs very slow\n>\n> Status in OpenStack Compute (Nova):\n>   In Progress\n>\n> Bug description:\n>   This bug report is here to be able to link the patch (to be commited)\n>   to the bug reported in the mailinglist by Sam Morrison\n>\n>   I quote:\n>\n>   ---------\n>\n>   I have been playing with the AggregateInstanceExtraSpecs filter and\n>   can't get it to work.\n>\n>   In our staging environment it works fine with 4 compute nodes, I have\n>   2 aggregates to split them into 2.\n>\n>   When I try to do the same in our production environment which has 80\n>   compute nodes (splitting them again into 2 aggregates) it doesn't\n>   work.\n>\n>   nova-scheduler starts to go very slow,  I scheduled an instance and\n>   gave up after 5 minutes, it seemed to be taking ages and the host was\n>   at 100% cpu. Also got about 500 messages in rabbit that were\n>   unacknowledged.\n>\n>   We are running stable/folsom. Does anyone else have this issue or know\n>   if there have been any fixes in Grizzly relating to this? I couldn't\n>   see any bugs about it.\n>\n>   Thanks,\n>   Sam\n>\n>   ---------\n>\n>   A brief discussion followed, indicating this appears to be a bug\n>   indeed, not a missing index. We're experiencing and seeing the same\n>   behavior, and I think I've found the root cause.\n>\n>   From what I can see, there's a many-To-many relation defined in\n>   nova/db/sqlalchemy/models.py between Aggregate class and both\n>   AggregateHost and AggregateMetadata classes. This should be a one to\n>   many relation if I'm not mistaken, so I've created a patch to reflect\n>   this.\n>\n> To manage notifications about this bug go to:\n> https://bugs.launchpad.net/nova/+bug/1133495/+subscriptions\n>\n\n\n\n-- \nA lie told often enough becomes the truth.\n\nLenin (1870 - 1924)\n", 
            "date_created": "2013-02-28 12:14:21+00:00", 
            "author": "https://api.launchpad.net/1.0/~corcornelisse"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/23115\nCommitted: http://github.com/openstack/nova/commit/ce23d6c1d679355bafede816bca39ea1eb24073c\nSubmitter: Jenkins\nBranch:    master\n\ncommit ce23d6c1d679355bafede816bca39ea1eb24073c\nAuthor: Joe Gordon <email address hidden>\nDate:   Wed Feb 27 20:59:08 2013 +0000\n\n    Shrink size of aggregate_metadata_get_by_host sql query\n    \n    * Remove unnecessary secondary joins in Aggregate model.\n    * Remove unnecessary backrefs (only needed to create bidirectional relationship)\n    \n    aggregate_metadata_get_by_host goes from 6 JOINS down to two JOINS.\n    \n    Fix bug 1133495\n    \n    Change-Id: I72966fa205973ec638816b07bfdcd54f1102feb5\n", 
            "date_created": "2013-02-28 18:54:25.266824+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Fix proposed to branch: stable/folsom\nReview: https://review.openstack.org/23207", 
            "date_created": "2013-02-28 20:53:59.228908+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "stable/folsom review was abandoned ", 
            "date_created": "2013-04-05 17:16:40.320906+00:00", 
            "author": "https://api.launchpad.net/1.0/~apevec"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/23207\nCommitted: http://github.com/openstack/nova/commit/e11d90af9c30d9af875974520cef207a839a0e21\nSubmitter: Jenkins\nBranch:    stable/folsom\n\ncommit e11d90af9c30d9af875974520cef207a839a0e21\nAuthor: Joe Gordon <email address hidden>\nDate:   Wed Apr 3 20:25:53 2013 +0000\n\n    Shrink size of aggregate_metadata_get_by_host sql query\n    \n    * Remove unnecessary secondary joins in Aggregate model.\n    * Remove unnecessary backrefs (only needed to create bidirectional relationship)\n    \n    aggregate_metadata_get_by_host goes from 6 JOINS down to two JOINS.\n    \n    Fix bug 1133495\n    \n    Change-Id: I72966fa205973ec638816b07bfdcd54f1102feb5\n    (cherry picked from commit ce23d6c1d679355bafede816bca39ea1eb24073c)\n", 
            "date_created": "2013-05-31 13:48:41.259614+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ]
}
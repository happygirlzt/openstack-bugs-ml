{
    "status": "Fix Released", 
    "last_updated": "2012-01-30 16:28:39.988052+00:00", 
    "description": "The uuid check should be \n[0-9A-Fa-f]{8}\\-[0-9A-Fa-f]{4}\\-[0-9A-Fa-f]{4}\\-[0-9A-Fa-f]{4}\\-[0-9A-Fa-f]{12}", 
    "tags": [], 
    "importance": "Wishlist", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/872457", 
    "owner": "None", 
    "id": 872457, 
    "index": 1128, 
    "created": "2011-10-11 19:25:07.994265+00:00", 
    "title": "utils.is_uuid_like is not enough", 
    "comments": [
        {
            "content": "The uuid check should be \n[0-9A-Fa-f]{8}\\-[0-9A-Fa-f]{4}\\-[0-9A-Fa-f]{4}\\-[0-9A-Fa-f]{4}\\-[0-9A-Fa-f]{12}", 
            "date_created": "2011-10-11 19:25:07.994265+00:00", 
            "author": "https://api.launchpad.net/1.0/~nati-ueno"
        }, 
        {
            "content": "I agree that the check you propose above is more precise. However, I wonder if we need that much precision? I think is_uuid_like just needs to tell the difference between strings that could be valid integer ids, and strings that could not. The fact that we use canonical uuids in our system is perhaps just an implementation detail. But I could be missing something big--I've only been tangling with it in the OSAPI and compute service.", 
            "date_created": "2011-10-19 19:22:38.925752+00:00", 
            "author": "https://api.launchpad.net/1.0/~markwash"
        }, 
        {
            "content": "I agree this is a corer case.\nBut Nova can be connected with another system or implementation X  which will check uuid precisely in future.\nIMO , If we say it is uuid, we should more precise check.\n", 
            "date_created": "2011-10-20 18:32:06.049948+00:00", 
            "author": "https://api.launchpad.net/1.0/~nati-ueno"
        }, 
        {
            "content": "We now wrap the string in a uuid.UUID() call and catch any exceptions that raise.", 
            "date_created": "2012-01-29 20:44:51.597225+00:00", 
            "author": "https://api.launchpad.net/1.0/~bcwaldon"
        }
    ]
}
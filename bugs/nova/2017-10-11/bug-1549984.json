{
    "status": "Fix Released", 
    "last_updated": "2016-03-24 15:25:41.759285+00:00", 
    "description": "The nova.compute.claims.Claim object is used to test whether a set of requested resources can be satisfied by the compute node. In the constructor of the Claim object, the Claim._claim_test() object is called:\n\n\n    def __init__(self, context, instance, tracker, resources, overhead=None,\n                 limits=None):\n        super(Claim, self).__init__()\n        <snip>\n        # Check claim at constructor to avoid mess code\n        # Raise exception ComputeResourcesUnavailable if claim failed\n        self._claim_test(resources, limits)\n\nIf we take a look at _claim_test(), we see pretty clearly that resources are NOT supposed to be actually claimed -- instead, the method should only *check* to see if the request can be fulfilled:\n\n\n    def _claim_test(self, resources, limits=None):\n        \"\"\"Test if this claim can be satisfied given available resources and\n        optional oversubscription limits\n\n        This should be called before the compute node actually consumes the\n        resources required to execute the claim.\n\n        :param resources: available local compute node resources\n        :returns: Return true if resources are available to claim.\n        \"\"\"\n       <snip>\n        reasons = [self._test_memory(resources, memory_mb_limit),\n                   self._test_disk(resources, disk_gb_limit),\n                   self._test_vcpus(resources, vcpus_limit),\n                   self._test_numa_topology(resources, numa_topology_limit),\n                   self._test_pci()]\n        reasons = reasons + self._test_ext_resources(limits)\n        reasons = [r for r in reasons if r is not None]\n        if len(reasons) > 0:\n            raise exception.ComputeResourcesUnavailable(reason=\n                    \"; \".join(reasons))\n\nUnfortunately, the PCI devices are *actually* claimed in the _test_pci() method:\n\n    def _test_pci(self):\n        pci_requests = objects.InstancePCIRequests.get_by_instance_uuid(\n            self.context, self.instance.uuid)\n\n        if pci_requests.requests:\n            devs = self.tracker.pci_tracker.claim_instance(self.context,\n                                                           self.instance)\n            if not devs:\n                return _('Claim pci failed.')\n\nWhat this means is that if an instance is attempted to be launched on a compute node and that instance has PCI requests that can be satisfied by the compute host, but say, there isn't enough available RAM on the node, the Claim will raise ComputeResourcesUnavailable which will trigger a Retry operation to the scheduler, but the PCI devices will have already been marked as claimed by that instance in the PCI device tracker:\n\n            devs = self.tracker.pci_tracker.claim_instance(self.context,\n                                                           self.instance)\n\nThe above code actually marks one or more PCI devices on the compute host as claimed for the instance. This introduces inconsistent state into the system. Making things worse is the fact that the nova.pci.manager.PciDevTracker object uses the nova.pci.stats.PciDevStats object for tracking consumed quantities of \"pools\" of the PCI device types and both the stats aggregation AND the PciDevTracker.pci_devs PciDeviceList object have their state changed improperly.", 
    "tags": [
        "pci", 
        "resource-tracker"
    ], 
    "importance": "High", 
    "heat": 8, 
    "link": "https://bugs.launchpad.net/nova/+bug/1549984", 
    "owner": "https://api.launchpad.net/1.0/~jaypipes", 
    "id": 1549984, 
    "index": 1887, 
    "created": "2016-02-25 20:44:35.187819+00:00", 
    "title": "PCI devices claimed on compute node during _claim_test()", 
    "comments": [
        {
            "content": "The nova.compute.claims.Claim object is used to test whether a set of requested resources can be satisfied by the compute node. In the constructor of the Claim object, the Claim._claim_test() object is called:\n\n\n    def __init__(self, context, instance, tracker, resources, overhead=None,\n                 limits=None):\n        super(Claim, self).__init__()\n        <snip>\n        # Check claim at constructor to avoid mess code\n        # Raise exception ComputeResourcesUnavailable if claim failed\n        self._claim_test(resources, limits)\n\nIf we take a look at _claim_test(), we see pretty clearly that resources are NOT supposed to be actually claimed -- instead, the method should only *check* to see if the request can be fulfilled:\n\n\n    def _claim_test(self, resources, limits=None):\n        \"\"\"Test if this claim can be satisfied given available resources and\n        optional oversubscription limits\n\n        This should be called before the compute node actually consumes the\n        resources required to execute the claim.\n\n        :param resources: available local compute node resources\n        :returns: Return true if resources are available to claim.\n        \"\"\"\n       <snip>\n        reasons = [self._test_memory(resources, memory_mb_limit),\n                   self._test_disk(resources, disk_gb_limit),\n                   self._test_vcpus(resources, vcpus_limit),\n                   self._test_numa_topology(resources, numa_topology_limit),\n                   self._test_pci()]\n        reasons = reasons + self._test_ext_resources(limits)\n        reasons = [r for r in reasons if r is not None]\n        if len(reasons) > 0:\n            raise exception.ComputeResourcesUnavailable(reason=\n                    \"; \".join(reasons))\n\nUnfortunately, the PCI devices are *actually* claimed in the _test_pci() method:\n\n    def _test_pci(self):\n        pci_requests = objects.InstancePCIRequests.get_by_instance_uuid(\n            self.context, self.instance.uuid)\n\n        if pci_requests.requests:\n            devs = self.tracker.pci_tracker.claim_instance(self.context,\n                                                           self.instance)\n            if not devs:\n                return _('Claim pci failed.')\n\nWhat this means is that if an instance is attempted to be launched on a compute node and that instance has PCI requests that can be satisfied by the compute host, but say, there isn't enough available RAM on the node, the Claim will raise ComputeResourcesUnavailable which will trigger a Retry operation to the scheduler, but the PCI devices will have already been marked as claimed by that instance in the PCI device tracker:\n\n            devs = self.tracker.pci_tracker.claim_instance(self.context,\n                                                           self.instance)\n\nThe above code actually marks one or more PCI devices on the compute host as claimed for the instance. This introduces inconsistent state into the system. Making things worse is the fact that the nova.pci.manager.PciDevTracker object uses the nova.pci.stats.PciDevStats object for tracking consumed quantities of \"pools\" of the PCI device types and both the stats aggregation AND the PciDevTracker.pci_devs PciDeviceList object have their state changed improperly.", 
            "date_created": "2016-02-25 20:44:35.187819+00:00", 
            "author": "https://api.launchpad.net/1.0/~jaypipes"
        }, 
        {
            "content": "This really is a data/state-corruption bug, since it erroneously consumes PCI devices on the host even when the Claim does not succeed.", 
            "date_created": "2016-02-26 14:34:47.314941+00:00", 
            "author": "https://api.launchpad.net/1.0/~jaypipes"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/285865", 
            "date_created": "2016-02-29 02:09:33.166034+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/291847", 
            "date_created": "2016-03-11 18:25:18.145750+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/291847\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=66e79e1bbca66a6f0f7be14006a87426c4dda402\nSubmitter: Jenkins\nBranch:    master\n\ncommit 66e79e1bbca66a6f0f7be14006a87426c4dda402\nAuthor: Jay Pipes <email address hidden>\nDate:   Fri Mar 11 13:16:40 2016 -0500\n\n    pci - Claim devices outside of Claim constructor\n    \n    During the nova.compute.Claim.__init__() call, there are a bunch of\n    _test_XXX() methods that are called. These methods should test to see\n    whether the requested resources of various types can be satisfied by the\n    inventory on the ComputeNode. However, that inventory *should not* be\n    claimed for a particular request during the Claim object's constructor.\n    \n    The Claim._test_pci() method was *actually* claiming the PCI device for\n    the requested instance. Unfortunately, this meant that if an instance\n    launch request's demand for a resource like RAM was not able to be\n    satisfied by the compute node but the launch request's demand for PCI\n    devices *was* able to be satisfied by the compute node, those PCI\n    devices were actually claimed for the instance even though the claim\n    itself would end up being aborted. This resulted in a data\n    corruption/inconsistency where a PCI device would be claimed for an\n    instance that actually was not running on the node.\n    \n    This patch moves the claim of PCI devices out of the _test_pci() method\n    and into the ResourceTracker.instance_claim() method. In the process of\n    fixing this bug, it was discovered that the unit tests for the Claim\n    object with regards to PCI devices were just plain broken. They were\n    testing for nothing at all because of the way the Claim constructor\n    works. These unit tests were reworked completely, along with the\n    MoveClaim unit tests which similarly were not testing the PCI code paths\n    at all. An additional unit test was added on the resource tracker to\n    verify that nova.pci.manager.PciDevTracker.claim_instance() is called\n    when PCI requests are included and satisfied by the Claim.\n    \n    Change-Id: Icf75439a552de84ec31c1a47faeee3caf8a5b0a7\n    Closes-bug: #1549984\n", 
            "date_created": "2016-03-15 18:09:41.575517+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Change abandoned by Jay Pipes (<email address hidden>) on branch: master\nReview: https://review.openstack.org/285865\nReason: Fixed in https://review.openstack.org/291847", 
            "date_created": "2016-03-24 15:25:40.968687+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ]
}
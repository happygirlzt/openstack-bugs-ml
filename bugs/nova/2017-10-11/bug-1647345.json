{
    "status": "Confirmed", 
    "last_updated": "2017-06-23 16:57:24.654810+00:00", 
    "description": "see this warning in unit test\n\n    /home/jichen/git/nova/.tox/py27/local/lib/python2.7/site-packages/oslo_versionedobjects/fields.py:352: FutureWarning: 46d5efdf 540b 4657 850b 28c5024a8ce5 is an invalid UUID. Using UUIDFields with invalid UUIDs is no longer supported, and will be removed in a future release. Please update your code to input valid UUIDs or accept ValueErrors for invalid UUIDs. See http://docs.openstack.org/developer/oslo.versionedobjects/api/fields.html#oslo_versionedobjects.fields.UUIDField for further details\n      \"for further details\" % value, FutureWarning)\n\n\nthe problem is bigger than a warning when the code change, as we have some code here in nova/cmd/manage.py , this will make the instance uuid not acceptable in the real code\n\n1365             # Don't judge me. There's already an InstanceMapping with this UUID\n1366             # so the marker needs to be non destructively modified.\n1367             next_marker = next_marker.replace('-', ' ')\n1368             objects.InstanceMapping(ctxt, instance_uuid=next_marker,\n1369                     project_id=marker_project_id).create()\n1370             return 1", 
    "tags": [], 
    "importance": "Undecided", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1647345", 
    "owner": "None", 
    "id": 1647345, 
    "index": 6567, 
    "created": "2016-12-05 12:37:55.709530+00:00", 
    "title": "UUID field setting in InstanceMapping", 
    "comments": [
        {
            "content": "see this warning in unit test\n\n    /home/jichen/git/nova/.tox/py27/local/lib/python2.7/site-packages/oslo_versionedobjects/fields.py:352: FutureWarning: 46d5efdf 540b 4657 850b 28c5024a8ce5 is an invalid UUID. Using UUIDFields with invalid UUIDs is no longer supported, and will be removed in a future release. Please update your code to input valid UUIDs or accept ValueErrors for invalid UUIDs. See http://docs.openstack.org/developer/oslo.versionedobjects/api/fields.html#oslo_versionedobjects.fields.UUIDField for further details\n      \"for further details\" % value, FutureWarning)\n\n\nthe problem is bigger than a warning when the code change, as we have some code here in nova/cmd/manage.py , this will make the instance uuid not acceptable in the real code\n\n1365             # Don't judge me. There's already an InstanceMapping with this UUID\n1366             # so the marker needs to be non destructively modified.\n1367             next_marker = next_marker.replace('-', ' ')\n1368             objects.InstanceMapping(ctxt, instance_uuid=next_marker,\n1369                     project_id=marker_project_id).create()\n1370             return 1", 
            "date_created": "2016-12-05 12:37:55.709530+00:00", 
            "author": "https://api.launchpad.net/1.0/~jichenjc"
        }, 
        {
            "content": "We have these all over the unit tests in nova, there is some other bug for them I think that people were working in newton, so not sure we need a bug for this, it could just be fixed, but this is fine.", 
            "date_created": "2016-12-05 20:02:54.965895+00:00", 
            "author": "https://api.launchpad.net/1.0/~mriedem"
        }, 
        {
            "content": "Oh I see, this will break once the UUIDField starts validating real UUIDs:\n\nhttps://github.com/openstack/nova/blob/a67af1f110f160861f5cbbff987766c46d60198a/nova/cmd/manage.py#L1367", 
            "date_created": "2016-12-07 19:46:25.232786+00:00", 
            "author": "https://api.launchpad.net/1.0/~mriedem"
        }, 
        {
            "content": "Yup:\n\n>>> import uuid\n>>> marker = str(uuid.uuid4())\n>>> marker\n'bb4409d6-1cdf-46bd-a604-56fbd851590e'\n>>> no_dash_marker = marker.replace('-', ' ')\n>>> no_dash_marker\n'bb4409d6 1cdf 46bd a604 56fbd851590e'\n>>> uuid.UUID(no_dash_marker)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"C:\\Python27\\lib\\uuid.py\", line 136, in __init__\n    raise ValueError('badly formed hexadecimal UUID string')\nValueError: badly formed hexadecimal UUID string\n>>> uuid.UUID(marker)\nUUID('bb4409d6-1cdf-46bd-a604-56fbd851590e')\n>>>", 
            "date_created": "2016-12-07 19:47:32.773006+00:00", 
            "author": "https://api.launchpad.net/1.0/~mriedem"
        }, 
        {
            "content": "yes, this is exactly what I mean... I will see what kind of changes we can do here", 
            "date_created": "2016-12-08 07:44:03.774093+00:00", 
            "author": "https://api.launchpad.net/1.0/~jichenjc"
        }
    ]
}
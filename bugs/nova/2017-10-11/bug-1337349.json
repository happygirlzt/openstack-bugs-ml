{
    "status": "Fix Released", 
    "last_updated": "2014-10-16 08:53:03.764255+00:00", 
    "description": "Erwan Velu from eNovance reported a vulnerability in OpenStack Nova.\n\nThe hypervisor is passing host system uuid (-smbios version) to guests, and this happen to be a critical info leak.\nThe defect have been pinpointed to:\n https://github.com/openstack/nova/blob/master/nova/virt/libvirt/driver.py#L3054\n\nFrom a simple virtual machine, this may allow numerous info leak like:\n    Allow compute hardware enumeration from guests\n    Deduce service tag and get all hardware configuration\n    Ability to know if two instances are on the same compute\n\nDell hardware is particulary impacted as :\n    - the uuid encodes the service tag\n    - the service tag can be used on support site to determine:\n    - detailled hardware configuration\n    - date & country where the hw was shipped\n    - date & type of support contract\n    - amount of servers bought during this shipment\n\nIf there is no use case for this, we should scrambled that piece of information.", 
    "tags": [
        "security"
    ], 
    "importance": "Undecided", 
    "heat": 22, 
    "link": "https://bugs.launchpad.net/nova/+bug/1337349", 
    "owner": "https://api.launchpad.net/1.0/~berrange", 
    "id": 1337349, 
    "index": 4971, 
    "created": "2014-07-03 14:28:24.274765+00:00", 
    "title": "Nova qemu hypervisor host smbios serial number is leaked to guest", 
    "comments": [
        {
            "content": "Erwan Velu from eNovance reported a vulnerability in OpenStack Nova.\n\nThe hypervisor is passing host system uuid (-smbios version) to guests, and this happen to be a critical info leak.\nThe defect have been pinpointed to:\n https://github.com/openstack/nova/blob/master/nova/virt/libvirt/driver.py#L3054\n\nFrom a simple virtual machine, this may allow numerous info leak like:\n    Allow compute hardware enumeration from guests\n    Deduce service tag and get all hardware configuration\n    Ability to know if two instances are on the same compute\n\nDell hardware is particulary impacted as :\n    - the uuid encodes the service tag\n    - the service tag can be used on support site to determine:\n    - detailled hardware configuration\n    - date & country where the hw was shipped\n    - date & type of support contract\n    - amount of servers bought during this shipment\n\nIf there is no use case for this, we should scrambled that piece of information.", 
            "date_created": "2014-07-03 14:28:24.274765+00:00", 
            "author": "https://api.launchpad.net/1.0/~tristan-cacqueray"
        }, 
        {
            "content": "Here is a fix for master, thanks to Vladik", 
            "date_created": "2014-07-03 18:50:56.950725+00:00", 
            "author": "https://api.launchpad.net/1.0/~tristan-cacqueray"
        }, 
        {
            "content": "Any input or remarks on this bug ? Sounds like an important leak isn't it ?", 
            "date_created": "2014-07-07 08:05:48.434060+00:00", 
            "author": "https://api.launchpad.net/1.0/~erwan-t"
        }, 
        {
            "content": "Looks OSSA-worthy, although could be considered a Dell-specific issue. If the fix is backportable we'll do one.", 
            "date_created": "2014-07-07 14:33:57.473058+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "Could we get a bit of nova-coresec review on that proposed patch ?", 
            "date_created": "2014-07-15 14:27:14.110811+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "The fix looks sane to me and would address the particular issue raised here.  And it should be backportable though some methods may have changed since Icehouse.  I would like to get a second opinion though.", 
            "date_created": "2014-07-15 22:04:18.204112+00:00", 
            "author": "https://api.launchpad.net/1.0/~alaski"
        }, 
        {
            "content": "Exposing the host UUID to guests is an intentional step whose goal is to allow OS/software inventory programs and/or license validation programs to track the deployment of instances on hosts. Replacing this will a randomly generated UUID is certainly not a viable approach. If they wish to, admins can replace the host UUID with a different static uuid by setting the 'host_uuid' parameter in /etc/libvirt/libvirtd.conf\n\nThat Dell allows you to obtain so much sensitive information from an identifier is never considered or intended to be a secret is a flaw in itself.", 
            "date_created": "2014-07-16 07:48:51.811353+00:00", 
            "author": "https://api.launchpad.net/1.0/~berrange"
        }, 
        {
            "content": "So you consider we shall keep the same uuid exposed to the VMs of a single hypervisor but maybe faking the UUID at the host level only for the Dell Servers ?\n\nI did proove that Dell is putting some interesting data in their UUID that can be seen from a single VM but there is a great chance some other vendors does it too.\n\nDecoding some Lenovo UUID shows they always use the same clock and keep the payload change across servers. But I don't know yet what's inside.\n\nSo can we consider generating a once-for-all random UUID for the host that is exposed to the VMs ? I mean it should be done the same for all servers brands and in an automatic fashion to avoid any possible leak of data. We cannot expect people knowing they are exposing data by running simple VMs.", 
            "date_created": "2014-07-16 08:29:49.085775+00:00", 
            "author": "https://api.launchpad.net/1.0/~erwan-t"
        }, 
        {
            "content": "@Daniel Berrange Having a same host uuid for every guest does not look like a good idea to me...\n\nThough, this is more likely a Dell issue and OpenStack already offers an override mechanism so we may step down on this one after all. I'm adding ossg-coresec group for additional inputs if this still makes sense...\n", 
            "date_created": "2014-07-22 11:22:15.349276+00:00", 
            "author": "https://api.launchpad.net/1.0/~tristan-cacqueray"
        }, 
        {
            "content": "@Truistan: the host uuid is *not* used to populate the guest UUID. Every guest still has their own unique UUID populated in the SMBIOS system UUID field. The host UUID is provided separately for the purposes I desribe above.", 
            "date_created": "2014-07-22 12:07:34.327783+00:00", 
            "author": "https://api.launchpad.net/1.0/~berrange"
        }, 
        {
            "content": "Very interesting, it seems everyone is agreed that this is a significant issue but there's a little discussion regarding the patch, about which I have some thoughts too! \n\nRather than generating completely random UUIDs, is there any value in taking the system generated UUID, hashing it and providing that upwards as required? This way the same hosts will always provide the same information but any sensitive information should be masked in a way that makes in computationally unfeasible to reverse (subject to an appropriate hashing algorithm being chosen)?", 
            "date_created": "2014-07-22 13:00:26.646567+00:00", 
            "author": "https://api.launchpad.net/1.0/~robert-clark"
        }, 
        {
            "content": "@Robert Thanks you for joining in!\n\nHashing the UUID would be a good middle-ground solution but there may be concern about migration for OS/Software inventory programs...", 
            "date_created": "2014-07-22 13:22:11.160859+00:00", 
            "author": "https://api.launchpad.net/1.0/~tristan-cacqueray"
        }, 
        {
            "content": "I don't think hashing is too great. The point of using a standard UUID from the host is that it gives integration with 3rd party software which is already tracking hardware inventory based on UUID. If we hash the host UUID by default then any software needs to now be openstack-aware. \n\nAs mentioned earlier, libvirt already provides a mechanism for setting a different host UUID that would at least mean all applications using libvirt would be consistent within themselves. Common provisioning tools like PackStart, Triple-O should/could set this when they deploy libvirt and see that it is running on Dell hardware.", 
            "date_created": "2014-07-22 13:47:30.431263+00:00", 
            "author": "https://api.launchpad.net/1.0/~berrange"
        }, 
        {
            "content": "We need the UUID to be consistent for all guests running on a particular host for the reasons that Daniel mentions, which the proposed patch would break.  I also have concerns about using some format other than an actual UUID, which would be a problem if we just used a hash of the real UUID.  \n\nThis could be addressed as an OSSN recommending that one generate their own UUID and configure it in /etc/libvirt/libvirtd.conf.  I do agree that deployment tools should be responsible for setting these UUIDs instead of putting the burden on the deployer themselves.", 
            "date_created": "2014-07-22 14:00:58.275296+00:00", 
            "author": "https://api.launchpad.net/1.0/~nkinder"
        }, 
        {
            "content": "@nkinder We now know that this could be a serious leak not to hide the UUID to the VM.\n\nCould we agree that we shall generate automatically a new host_uuid if a Dell host is detected  (and only once of course to keep a single uuid exposed to VMs) ? \nLetting this task to some external tools means that many will let that unconfigured generating the current leak situation.\n\nEven if 3rd party configuration can do that, it sounds safer for me to make this automatic, insuring a better protection to our users.\n\nBTW, don't you consider that being in position to estimate if several VMs are running on the same host could be an interesting information to some attacks ? For any public cloud provider, that could be an issue isn't it ? We can count the number of hypervisors etc..\n\nMy 2 cents,\n", 
            "date_created": "2014-07-22 18:51:55.680424+00:00", 
            "author": "https://api.launchpad.net/1.0/~erwan-t"
        }, 
        {
            "content": "I think that if you go down this route you'll end up with little bits of bespoke code for every vendor, I doubt that it's only Dell that suffers from such issues. \n\nIf we are generating a new UUID, how is that better than hashing the _real_ one? I suppose it would make it fit the correct format etc...?", 
            "date_created": "2014-07-23 08:22:22.841252+00:00", 
            "author": "https://api.launchpad.net/1.0/~robert-clark"
        }, 
        {
            "content": "On Linux hosts using systemd, there is a new standard OS level UUID defined in /etc/machine-id.  Since basically every major Linux distro has switched or is about to switch to systemd, I think it is valid to consider use of the machine-id as an alternative source of UUIDs.  Much as I hate to suggest adding nova config options, I think we should add a 'host_uuid_source' parameter to nova.conf taking values:\n\n - 'hardware' - use the UUID of the host hardware, eg from SMBIOS on x86 or equivalent. ie what we do today\n - 'os' - use the operating system UUID, eg /etc/machine-id on Linux systems.\n - Not specified - try to use 'os', fallback to 'hardware'\n\nThat would ensure we're safe on all future Linux distros. For people who have deployed on traditional Linux hosts pre-dating systemd, they can still generate a new UUID for libvirtd.conf.", 
            "date_created": "2014-07-23 09:01:27.414946+00:00", 
            "author": "https://api.launchpad.net/1.0/~berrange"
        }, 
        {
            "content": "@robert-clark\nI absolutely agree that we shouldn't do something Dell specific for the reasons you point out.  The behavior should be the same regardless of hardware vendor.\n\n@erwan-t\nThe information leak is definitely a concern.  The ability to tell that multiple hypervisors are running on the same host is an interesting case too, which may be something that a deployer does not want to expose.\n\nI think the ideal solution would be to expose as little real information as possible by default, while still allowing for the real hardware UUID to be exposed to instances if desired.  Chaging the default behavior for existing releases is difficult though, as there is a possibility that someone is relying on the current behavior (passing the UUID through).\n\nIf we don't want to rely on the libvirt configuration for setting a UUID, we will likely need to have some new configuration in nova itself as suggested by Daniel.  It may make sense to have a 'random' source setting that generates a new UUID when nova is started in addition to the 'hardware' and 'os' sources that were recommended.  Adding new configuration isn't really acceptable for existing stable releases though.\n\nAs a short term solution for stable releases, I see the following options:\n\n- Consider this as a vulnerability and modify nova's behavior to generate a random UUID (or hash the system UUID).  This may break behavior that people are relying on, and they would have no way around it without a new configuration option.  The configuration option could be added as an exception to the stable update policy if we think it important enough.\n\n- Consider this as a potentially dangerous information exposure and recommend a workaround of using the libvirt config in an OSSN, while fixing this with new configuration options for future releases.  The downside is that people may miss/overlook the OSSN and be vulnerable to unwanted information exposure.\n\nWhat are others opinions between these two approaches?", 
            "date_created": "2014-07-24 03:01:01.575974+00:00", 
            "author": "https://api.launchpad.net/1.0/~nkinder"
        }, 
        {
            "content": "I do like the @berrange option to solve this issue. That offer the flexibility required by some while providing a \"default\" protection for the others.\n\nI would have added another option to host_uuid_source. The \"random\" one which cover the behaviour that was proposed initially in this thread. Some operators will not like letting customers being able to count the number of HV and locate the VM on them. Adding this option would generate a random UUID for each started VM.\n\nThis way we cover all the cases reported in this thread.\n\nTo summarize the possible values of host_uuid_source:\n - 'hardware' - use the UUID of the host hardware, eg from SMBIOS on x86 or equivalent. ie what we do today\n - 'os' - use the operating system UUID, eg /etc/machine-id on Linux systems.\n- 'random' - generate a random UUID for every single VM\n - Not specified - try to use 'os', fallback to 'hardware'\n\nAbout the transition for existing platforms we surely have to come through the OSSN. The matter is that it will take long before platforms gets into systemd. If we do have the patch for getting the /etc/machine-id used in host_uuid_source, wouldn't it be acceptable to generate one if the file isn't available ? \n- On the systems that runs systemd, we do have the proper behavior\n- On legacy systems, we generate the expected file and gain the expected behavior from the  host_uuid_source paramater\n\nI'm not a great expert of this code but the patch sounds pretty light isn't it ?", 
            "date_created": "2014-07-24 07:45:57.615340+00:00", 
            "author": "https://api.launchpad.net/1.0/~erwan-t"
        }, 
        {
            "content": "Every VM already gets it own random UUID. There is no point in generating yet another random UUID to represent the host since it defeats the point of having this information there in the first place - a random host UUIUD is useless for its intended purpose.", 
            "date_created": "2014-07-24 08:26:25.195216+00:00", 
            "author": "https://api.launchpad.net/1.0/~berrange"
        }, 
        {
            "content": "I do agree for the UUID but as the serial of thoses VMs is made of the host uuid, that still allow simple users being able to count the hypervisors and discover the colocation of VMs. \n\nIf you want to DDOS the platform or attack an HV, that's a very interesting information.\n\nThat's where the fully random mode would solve this issue by providing a unique serial number per VM.", 
            "date_created": "2014-07-24 08:38:43.029383+00:00", 
            "author": "https://api.launchpad.net/1.0/~erwan-t"
        }, 
        {
            "content": "This patch introduces a new configuration parameter to control the data exposed in the 'serial' field of guest SMBIOS. The impact of applying this patch\n\n - Distros providing /etc/machine-id -> fixed with no additional work needed by admin beyond restarting nova\n - Other distros - admin must either set 'host_uuid' in /etc/libvirt/libvirtd.conf  & restart libvirtd or run 'uuidgen > /etc/machine-id' and restart Nova\n\nThose clouds wishing to be paranoid against the so called 'hypervisor counting' problem can set the config parameter to 'none' to disable data entirely. I  don't believe \"hypervisor counting\" is sufficiently serious to disable this by default.\n\nIt explicitly does *not* introduce any 'random' UUID value since this has no value over the existing random UUID reported in another SMBIOS field. Again the 'none' value should simply be used to disable reporting instead.\n\nThose wishing to maintain back compat with existing deployed behaviour can force the setting to be 'hardware'", 
            "date_created": "2014-07-28 14:34:33.570820+00:00", 
            "author": "https://api.launchpad.net/1.0/~berrange"
        }, 
        {
            "content": "Note that the \"new config option\" approach (which I think is the right choice to fix this issue) is not really backportable to stable/*, so it's not appropriate for an OSSA patch.\n\nBut then I think any fix for this would introduce a behavior change that is not welcome in stable/* -- so we should probably just fix this in master, make the patch available for backport for those who wish to carry it in their deployments, and (maybe) issue an OSSN about it to raise awareness around the issue.\n\nThoughts?", 
            "date_created": "2014-07-31 10:05:55.268173+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "We could certainly consider it for an OSSN", 
            "date_created": "2014-07-31 10:58:44.711788+00:00", 
            "author": "https://api.launchpad.net/1.0/~robert-clark"
        }, 
        {
            "content": "@ttx, I agree with your comment #22, sounds like the better way to take care of this.", 
            "date_created": "2014-07-31 13:16:35.572919+00:00", 
            "author": "https://api.launchpad.net/1.0/~tristan-cacqueray"
        }, 
        {
            "content": "OK, I propose we open this publicly so that iteration on the juno patch can go public on Gerrit. Unless someone complains, will open on Thursday.", 
            "date_created": "2014-08-04 14:50:17.207215+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/113311", 
            "date_created": "2014-08-11 16:31:32.291306+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/113311\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=4431eec1c94c4a353b45e5d873854b3fb1eaa11b\nSubmitter: Jenkins\nBranch:    master\n\ncommit 4431eec1c94c4a353b45e5d873854b3fb1eaa11b\nAuthor: Daniel P. Berrange <email address hidden>\nDate:   Mon Jul 28 15:15:44 2014 +0100\n\n    libvirt: make sysinfo serial number configurable\n    \n    The 'serial' field in guest SMBIOS tables gets populated\n    based on the libvirt reported UUID of the host hardware.\n    The rationale is to allow correlation of guests running\n    on the same host.\n    \n    Unfortunately some hardware vendors use a subset of the\n    host UUID as a key for retrieving hardware support\n    contract information without requiring any authentication.\n    So exposing the host UUID to the guest is an information\n    leak for those vendors. It is possible to override the\n    use of SMBIOS data by libvirt in /etc/libvirt/libvirtd.conf\n    by setting the 'host_uuid' parameter.\n    \n    As a way to reduce the configuration burden though, it is\n    preferrable to use the /etc/machine-id UUID, instead of\n    the host hardware UUID. The former is a recent standard\n    for Linux distros introduced by systemd to provide a UUID\n    that is unique per operating system install. This means\n    that even containers will see a separate /etc/machine-id\n    value. This /etc/machine-id can be expected to be widely\n    available in current and future distros. If missing, it\n    is still possible to fallback to the libvirt reported\n    host UUID.\n    \n    The host UUID exposed could theoretically be leveraged\n    by a cloud user to get an approximate count of the number\n    of unique hosts available to them in the cloud by launching\n    many short lived VMs. Administrators concerned about this\n    may wish to disable reporting of any sysinfo serial field\n    at all.\n    \n    Introduce a 'sysinfo_serial' config parameter to the libvirt\n    driver to control behaviour, accepting values:\n    \n     - 'auto' - try /etc/machine-id, fallback to\n       libvirt reported host UUID (new default)\n     - 'hardware' - always use libvirt host UUID (old default)\n     - 'os' - always use /etc/machine-id, error if missing\n     - 'none' - do not report any value to the guest\n    \n    DocImpact: new libvirt.sysinfo_serial config parameter\n    SecurityImpact\n    Closes-bug: #1337349\n    Change-Id: I7ba7dbd65e913a66efe35a1d6490a85bec8413da\n", 
            "date_created": "2014-08-23 01:45:19.974259+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "This issue has been published as OSSN-0028:\r\n\r\n  https://wiki.openstack.org/wiki/OSSN/OSSN-0028", 
            "date_created": "2014-10-03 20:29:43.838878+00:00", 
            "author": "https://api.launchpad.net/1.0/~nkinder"
        }
    ]
}
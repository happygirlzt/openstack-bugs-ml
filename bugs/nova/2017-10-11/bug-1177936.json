{
    "status": "Invalid", 
    "last_updated": "2013-10-18 09:13:25.188996+00:00", 
    "description": "Description\n\nA Reddwarf string format vulnerability exists in the class OpenstackException, the base exception class. To implement the class, as the comments in the class note, \"inherit from it and define a 'message' property. That message will get printf'd with the keyword arguments provided to the constructor\". However, in the event that the message property contains user-supplied data, a user can inject % formatting string options to be printf'd.\n\nAffected Services\n\nOther projects in or related to OpenStack were found using either the same base exception handler, or one very similar.\n\nNova  Class NovaException (optionally formats a string)\nQuantum  Classes QuantumException & OpenstackException\nReddwarf  Class OpenstackException\nMoniker  Class OpenstackException\nSavanna  Class OpenstackException\nMurano-Conductor - Class OpenstackException\n\nProof of Concept\n\nThe following will demonstrate the issue by using the RedDwarf web service API to create a database with an invalid database name. This causes a ValueError to occur which uses the database name as part of the error message. When this is caught a BadRequest exception is generated which is then and handled by a ReddwarfError in the web service. Since ReddwarfError is a subclass of OpenstackException it sets the global message variable that is then used to create the format string.\n\n{\n\"databases\": [\n{\n\"character_set\": \"utf8\",\n\"collate\": \"utf8_general_ci\",\n\"name\": \"%-100sa\"\n}\n]\n}\n\nIn this case the API will send back to the client a HTTP 400 bad request with the following response body:\n\n{\"badRequest\": {\"message\": \"'{}                                                                                                  a' is not a valid database name\", \"code\": 400}}\n\nThe message contains a \"{}\", 100 space characters and the character 'a'. The \"{}\" is due to kwargs being empty, -100 left-justifies the string by padding 100 space characters followed by the 'a' character. Since the padding takes an int value, a malicious user could include a very large int causing a denial of service. While running the unit tests for Reddwarf it was found that upon trying to create a database with the name \"test%999999999sdb\", python allocated more than 2000 megabytes to handle a single request.\n\nRecommendation\n\nA class should not blindly format a string using a formatting variable without being able to validate the input. Instead of formatting the string, the exception base handler should take a string message argument while subclasses take care of formatting any needed string to pass into the super class.", 
    "tags": [], 
    "importance": "Undecided", 
    "heat": 284, 
    "link": "https://bugs.launchpad.net/nova/+bug/1177936", 
    "owner": "None", 
    "id": 1177936, 
    "index": 3642, 
    "created": "2013-05-08 19:24:34.228633+00:00", 
    "title": "Format string vulnerability in base OpenstackException handler", 
    "comments": [
        {
            "content": "Description\n\nA Reddwarf string format vulnerability exists in the class OpenstackException, the base exception class. To implement the class, as the comments in the class note, \"inherit from it and define a 'message' property. That message will get printf'd with the keyword arguments provided to the constructor\". However, in the event that the message property contains user-supplied data, a user can inject % formatting string options to be printf'd.\n\nAffected Services\n\nOther projects in or related to OpenStack were found using either the same base exception handler, or one very similar.\n\nNova \u2013 Class NovaException (optionally formats a string)\nQuantum \u2013 Classes QuantumException & OpenstackException\nReddwarf \u2013 Class OpenstackException\nMoniker \u2013 Class OpenstackException\nSavanna \u2013 Class OpenstackException\nMurano-Conductor - Class OpenstackException\n\nProof of Concept\n\nThe following will demonstrate the issue by using the RedDwarf web service API to create a database with an invalid database name. This causes a ValueError to occur which uses the database name as part of the error message. When this is caught a BadRequest exception is generated which is then and handled by a ReddwarfError in the web service. Since ReddwarfError is a subclass of OpenstackException it sets the global message variable that is then used to create the format string.\n\n{\n    \"databases\": [\n        {\n            \"character_set\": \"utf8\",\n            \"collate\": \"utf8_general_ci\",\n            \"name\": \"%-100sa\"\n        }\n    ]\n}\n\nIn this case the API will send back to the client a HTTP 400 bad request with the following response body:\n\n{\"badRequest\": {\"message\": \"'{}                                                                                                  a' is not a valid database name\", \"code\": 400}}\n\nThe message contains a \"{}\", 100 space characters and the character 'a'. The \"{}\" is due to kwargs being empty, -100 left-justifies the string by padding 100 space characters followed by the 'a' character. Since the padding takes an int value, a malicious user could include a very large int causing a denial of service. While running the unit tests for Reddwarf it was found that upon trying to create a database with the name \"test%999999999sdb\", python allocated more than 2000 megabytes to handle a single request.\n\nRecommendation\n\nA class should not blindly format a string using a formatting variable without being able to validate the input. Instead of formatting the string, the exception base handler should take a string message argument while subclasses take care of formatting any needed string to pass into the super class.", 
            "date_created": "2013-05-08 19:24:34.228633+00:00", 
            "author": "https://api.launchpad.net/1.0/~jason-hullinger"
        }, 
        {
            "content": "It's not immediately obvious to me why this was marked as affecting OpenStack Core Infrastructure (continuous integration systems and developer community infrastructure), rather than reported as a bug against individual OpenStack components where this bug was found.\n\nGiven that this was reported as a private bug and affects multiple OpenStack components as well as non-OpenStack projects into which the code was copied/reused, we likely need to be careful about how we add individual projects as affected by the bug (notify affected unofficial/downstream projects on a similar timeframe to downstream packagers et al?).", 
            "date_created": "2013-05-08 20:12:23.303155+00:00", 
            "author": "https://api.launchpad.net/1.0/~fungi"
        }, 
        {
            "content": "Since a number of projects use this as a sort of core common utility package (openstack.common) it was marked as Core Infrastructure in order to facilitate communication downstream to other projects in addition to future ones. ", 
            "date_created": "2013-05-08 20:38:52.669510+00:00", 
            "author": "https://api.launchpad.net/1.0/~jason-hullinger"
        }, 
        {
            "content": "Okay, just be aware for future reports that \"Core Infrastructure\" is the systems administrators managing the community servers. This is unrelated to openstack.common or the development of source code for other integrated components of OpenStack software.", 
            "date_created": "2013-05-08 21:09:04.273684+00:00", 
            "author": "https://api.launchpad.net/1.0/~fungi"
        }, 
        {
            "content": "The only way to trigger this bug is for user data has to be the left operand of the format operator (%) and that's only possible if there is code that is incorrectly assigning/replacing self.message on an instance of of the exception.\n\nIs there a code sample to make this happen?  ", 
            "date_created": "2013-05-08 21:13:03.535044+00:00", 
            "author": "https://api.launchpad.net/1.0/~markmcclain"
        }, 
        {
            "content": "There is a proof of concept for RedDwarf in the original bug report. Additionally, developers should not have to consider if passing an error message to an exception will trigger a string format vulnerability, the class should not be vulnerable to it.", 
            "date_created": "2013-05-08 21:22:03.896417+00:00", 
            "author": "https://api.launchpad.net/1.0/~jason-hullinger"
        }, 
        {
            "content": "Jeremy Stanley - Okay, will do, thanks.", 
            "date_created": "2013-05-08 21:33:16.022013+00:00", 
            "author": "https://api.launchpad.net/1.0/~jason-hullinger"
        }, 
        {
            "content": "Dug some more into this issue and figured out why I could not replicate with Oslo or Quantum.   The Reddwarf Exception accepts an arbitrary message as the first argument.   If the developer uses user input to construct the message string, then that string will become the left operand to format.\n\nhttps://github.com/stackforge/reddwarf/blob/master/reddwarf/common/exception.py#L37\n\nI think this error is unique to Reddwarf.\n\n\nFor comparison I checkout on Nova and Quantum.\n\nNova:\nNova's base exception while similar does not use oslo's as a base. It is not vulnerable because it uses either the supplied message or formats the kwargs with a statically declared format string.\n\nQuantum:\nQuantum like oslo-incubator's version of__init__  does not allow arbitrary messages to be passed with the kwargs.  The messages must be defined when the class is defined.", 
            "date_created": "2013-05-08 21:37:22.524666+00:00", 
            "author": "https://api.launchpad.net/1.0/~markmcclain"
        }, 
        {
            "content": "Since the base exception handler formats a string based off of a variable set by a sub-class, if other projects are not effected now they easily could be if any new sub-class allows for a message input string to be set by user-input as is the case with RedDwarf. I think that at the least the class documentation should be changed to reflect this, particularly for any new projects or classes. Ideally though the base exception handler should just take a string message and sub-classes should be responsible for formatting the string.", 
            "date_created": "2013-05-08 23:09:20.865250+00:00", 
            "author": "https://api.launchpad.net/1.0/~jason-hullinger"
        }, 
        {
            "content": "While Moniker has inherited this code from oslo, it's unused:\n\n'OpenstackException', in Moniker, is used as a base by the 'MalformedRequestBody' and 'InvalidContentType' exceptions. Both of which are used in the WSGI framework. We use Flask instead, but have the code in our repository as we do make use of the WSGI service.", 
            "date_created": "2013-05-08 23:23:16.835899+00:00", 
            "author": "https://api.launchpad.net/1.0/~kiall"
        }, 
        {
            "content": "(But, We'll sync with oslo anyway once a patch comes out)", 
            "date_created": "2013-05-08 23:23:58.083537+00:00", 
            "author": "https://api.launchpad.net/1.0/~kiall"
        }, 
        {
            "content": "I agree this needs to be fixed everywhere it's used. But we'll issue an advisory only if the flaw ends up being exploitable in a supported integrated project.\n\nSo we need to go over all integrated projects and check if the flaw is exploitable there. If it's only exploitable in reddwarf there won't be an official OSSA about it, but you can still push your own security notification out :)", 
            "date_created": "2013-05-09 09:17:59.232025+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "This class is  is unused in Murano Project,  also this class is sub-classed only by classes in OpenStack Common exception.py.\nWe simply going to wait for fix in OpenStack Common, and note this issue while continue development. We hope that this going to be fixed soon.", 
            "date_created": "2013-05-13 17:54:45.585157+00:00", 
            "author": "https://api.launchpad.net/1.0/~smelikyan"
        }, 
        {
            "content": "First, it's worth noting that the dosctring for openstack.common.exception.OpenstackException already provides an indication that this is its intended behavior. \"To correctly use this class, inherit from it and define a 'message' property. That message will get printf'd with the keyword arguments provided to the constructor.\" Simply passing untrusted content in the message parameter is of course going to be a bad idea, and that seems to me to be why this is parameterized in the first place (to allow safely and securely inserting untrusted data into part of a templated message without having to worry about whether it might include malicious format macros). However, I agree that extending the docstring with additional cautionary wording is still warranted as a reminder of this.\n\nI might be misunderstanding, but what you recommend in the bug description (having the base class operate only on formatless plain strings) is basically already being done. OpenstackException is built from Exception which does no formatting. I don't see anything special OpenstackException adds aside from the format string parameterization itself, so any additional base class for it would just be a duplicate of Exception anyway right? Would this extra layer of inheritence/indirection have prevented ReddwarfException from being implemented with message as a method argument (effectively undoing these security precautions implemented in OpenstackException)?\n\nSearching through the master branches of all supported projects (those in openstack, openstack-dev and openstack-infra), I find only eight which currently use the OpenstackException class from openstack.common, other classes in openstack.common inheriting from it, or local copies of classes which are named similarly to any of those (signs of pre-common code copying from nova to other projects, presumably):\n\n    openstack/cinder\n    openstack/glance\n    openstack/heat\n    openstack/melange\n    openstack/nova\n    openstack/oslo-incubator\n    openstack/python-quantumclient\n    openstack/quantum\n\nFor cinder, glance, nova, oslo-incubator and quantum these also appear in the supported stable/grizzly and stable/folsom branches. I've gone over all subclassing I was able to find and don't see any examples of writing the message from a separate argument. All of them seem to consistently and explicitly set message to a string constant on the class declaration itself, outside of the initialization method.\n\nThat said, an extra set of eyes on these from someone with better familiarity with the codebase would be appreciated, so I've gone ahead and linked any of the above projects not previously notified. If you can confirm that your project does not use these classes in an insecure fashion, please set this bug to invalid for it. Thanks!", 
            "date_created": "2013-05-14 01:19:25.914151+00:00", 
            "author": "https://api.launchpad.net/1.0/~fungi"
        }, 
        {
            "content": "I've gone ahead and marked this bug invalid for other official OpenStack projects for several reasons:\n\n1) A cursory audit on my part of the various historical ${project}Exception implementations didn't turn up any vulnerable raise statements in situations where it was possible to pass a format string directly as an argument.\n\n2) The reference implementation of OpenstackException in oslo-incubator does not allow this at all, so a project would have to go out of its way to subclass it with a specicial initialization method to get around that protection.\n\n3) Since the bug cited is specific to the ReddwarfException subclass in particular, any similar vulnerability in an OpenStack project would merit a separate bug report and CVE.\n\n4) I don't want to get in the way of Reddwarf notifyng their downstreams and publishing a fix for their project.\n\nThat said, I'm happy to provide guidance to the Reddwarf developers on appropriate paths to disclosure, including contact addresses for CVE requests and any general introduction to OpenStack's vulnerability management processes. I do think this bug report highlights some worthwhile hardening takeaways for the aggregate OpenStack codebase, and I'll be following up with individual projects and the OSSG on related recommendations after this bug is public and Reddwarf has released their fix.", 
            "date_created": "2013-05-17 00:26:36.544464+00:00", 
            "author": "https://api.launchpad.net/1.0/~fungi"
        }, 
        {
            "content": "Since this does not affect any supported project, I'm removing the openstack-vuln-mgmt subscription. Please subscribe individually if you want to continue follow this.", 
            "date_created": "2013-05-17 07:49:50.618272+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "Reviewed: https://review.openstack.org/30242\r\nCommitted: https://github.com/stackforge/reddwarf/commit/4384a2ca7f6379edeab03e22dee29e8ebf62f299\r\nSubmitter: Jenkins\r\nBranch: master\r\n\r\ncommit 4384a2ca7f6379edeab03e22dee29e8ebf62f299\r\nAuthor: Nikhil Manchanda <email address hidden>\r\n\r\n    Fixed format string vulnerability in reddwarf call to OpenstackException handler\r\n\r\n    Exception messages from the mysql extension which may contain user input are\r\n    now properly escaped. This fixes chance of a format string vulnerability.\r\n\r\n    Fixed bug: 1177936\r\n\r\n    Change-Id: I7762f605f08a7e7b5f884ee4062aa16e4048f928", 
            "date_created": "2013-05-23 21:49:27.291885+00:00", 
            "author": "https://api.launchpad.net/1.0/~slicknik"
        }, 
        {
            "content": "Note that this still leaves a bit of a landmine in the ReddwarfException subclass, since it passes the first argument through into OpenstackException's message string. Compare with NovaException and CinderException which skip string formatting if you try to do that.\n\nThe current convention for official OpenStack projects moving to OpenstackException is to disallow arbitrary exception strings passed in raise statements and always override the message format string with another string constant specific to the subclass, which is the safest way to go about avoiding such risks in the future (for an example have a look at the way QuantumException is implemented).\n\nI'll open a separate Reddwarf bug with this hardening recommendation, and one for Glance as well (GlanceException does something similarly risky, formatting the message even if it came in from a raise).  I'll also open a bug on Oslo to get some additional cautionary wording in place in the docstring for OpenstackException highlighting this. Further, I'll start a thread on the openstack-security list to see if the OSSG has any interest in organizing a format string vulnerability audit, checking official projects for any similarly risky string formatting issues.", 
            "date_created": "2013-05-24 14:11:23.334262+00:00", 
            "author": "https://api.launchpad.net/1.0/~fungi"
        }, 
        {
            "content": "Jeremy, I think that's a good idea. Once you have the bug for reddwarf, you can assign it to me. It would be good to fix the base ReddwarfError class so that we're not susceptible to a similar format string vulnerability in the future. Thanks!\n", 
            "date_created": "2013-05-24 17:05:23.258374+00:00", 
            "author": "https://api.launchpad.net/1.0/~slicknik"
        }
    ]
}
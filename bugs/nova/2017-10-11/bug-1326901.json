{
    "status": "Fix Released", 
    "last_updated": "2016-02-19 20:18:31.135239+00:00", 
    "description": "We're hitting an intermittent issue where ServiceBinaryExists is raised for nova-conductor on deployment.\n\nFrom nova-conductor's upstart log ( /var/log/upstart/nova-conductor.log ):\n\n2014-05-15 12:02:25.206 34494 INFO nova.openstack.common.periodic_task [-] Skipping periodic task _periodic_update_dns because its interval is negative\n2014-05-15 12:02:25.241 34494 INFO nova.openstack.common.service [-] Starting 8 workers\n2014-05-15 12:02:25.242 34494 INFO nova.openstack.common.service [-] Started child 34501\n2014-05-15 12:02:25.244 34494 INFO nova.openstack.common.service [-] Started child 34502\n2014-05-15 12:02:25.246 34494 INFO nova.openstack.common.service [-] Started child 34503\n2014-05-15 12:02:25.246 34501 AUDIT nova.service [-] Starting conductor node (version 2014.1)\n2014-05-15 12:02:25.247 34502 AUDIT nova.service [-] Starting conductor node (version 2014.1)\n2014-05-15 12:02:25.247 34494 INFO nova.openstack.common.service [-] Started child 34504\n2014-05-15 12:02:25.249 34503 AUDIT nova.service [-] Starting conductor node (version 2014.1)\n2014-05-15 12:02:25.251 34504 AUDIT nova.service [-] Starting conductor node (version 2014.1)\n2014-05-15 12:02:25.254 34505 AUDIT nova.service [-] Starting conductor node (version 2014.1)\n2014-05-15 12:02:25.250 34494 INFO nova.openstack.common.service [-] Started child 34505\n2014-05-15 12:02:25.261 34494 INFO nova.openstack.common.service [-] Started child 34506\n2014-05-15 12:02:25.263 34494 INFO nova.openstack.common.service [-] Started child 34507\n2014-05-15 12:02:25.266 34494 INFO nova.openstack.common.service [-] Started child 34508\n2014-05-15 12:02:25.267 34507 AUDIT nova.service [-] Starting conductor node (version 2014.1)\n2014-05-15 12:02:25.268 34506 AUDIT nova.service [-] Starting conductor node (version 2014.1)\n2014-05-15 12:02:25.271 34508 AUDIT nova.service [-] Starting conductor node (version 2014.1)\n/usr/lib/python2.7/dist-packages/nova/openstack/common/db/sqlalchemy/session.py:379: DeprecationWarning: BaseException.message has been deprecated as of Python 2.6\n  match = pattern.match(integrity_error.message)\n/usr/lib/python2.7/dist-packages/nova/openstack/common/db/sqlalchemy/session.py:379: DeprecationWarning: BaseException.message has been deprecated as of Python 2.6\n  match = pattern.match(integrity_error.message)\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/dist-packages/eventlet/hubs/hub.py\", line 346, in fire_timers\n    timer()\n  File \"/usr/lib/python2.7/dist-packages/eventlet/hubs/timer.py\", line 56, in __call__\n    cb(*args, **kw)\n  File \"/usr/lib/python2.7/dist-packages/eventlet/greenthread.py\", line 194, in main\n2014-05-15 12:02:25.862 34502 ERROR oslo.messaging._drivers.impl_rabbit [-] AMQP server on localhost:5672 is unreachable: [Errno 111] ECONNREFUSED. Trying again in 1 seconds.\n    result = function(*args, **kwargs)\n  File \"/usr/lib/python2.7/dist-packages/nova/openstack/common/service.py\", line 480, in run_service\n    service.start()\n  File \"/usr/lib/python2.7/dist-packages/nova/service.py\", line 172, in start\n    self.service_ref = self._create_service_ref(ctxt)\n  File \"/usr/lib/python2.7/dist-packages/nova/service.py\", line 224, in _create_service_ref\n    service = self.conductor_api.service_create(context, svc_values)\n  File \"/usr/lib/python2.7/dist-packages/nova/conductor/api.py\", line 202, in service_create\n    return self._manager.service_create(context, values)\n  File \"/usr/lib/python2.7/dist-packages/nova/utils.py\", line 966, in wrapper\n    return func(*args, **kwargs)\n  File \"/usr/lib/python2.7/dist-packages/nova/conductor/manager.py\", line 461, in service_create\n    svc = self.db.service_create(context, values)\n  File \"/usr/lib/python2.7/dist-packages/nova/db/api.py\", line 139, in service_create\n    return IMPL.service_create(context, values)\n  File \"/usr/lib/python2.7/dist-packages/nova/db/sqlalchemy/api.py\", line 146, in wrapper\n    return f(*args, **kwargs)\n  File \"/usr/lib/python2.7/dist-packages/nova/db/sqlalchemy/api.py\", line 521, in service_create\n    binary=values.get('binary'))\nServiceBinaryExists: Service with host glover binary nova-conductor exists.\n2014-05-15 12:02:25.864 34503 ERROR nova.openstack.common.threadgroup [-] Service with host glover binary nova-conductor exists.\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup Traceback (most recent call last):\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/nova/openstack/common/threadgroup.py\", line 117, in wait\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     x.wait()\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/nova/openstack/common/threadgroup.py\", line 49, in wait\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     return self.thread.wait()\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/eventlet/greenthread.py\", line 168, in wait\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     return self._exit_event.wait()\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/eventlet/event.py\", line 116, in wait\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     return hubs.get_hub().switch()\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/eventlet/hubs/hub.py\", line 187, in switch\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     return self.greenlet.switch()\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/eventlet/greenthread.py\", line 194, in main\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     result = function(*args, **kwargs)\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/nova/openstack/common/service.py\", line 480, in run_service\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     service.start()\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/nova/service.py\", line 172, in start\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     self.service_ref = self._create_service_ref(ctxt)\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/nova/service.py\", line 224, in _create_service_ref\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     service = self.conductor_api.service_create(context, svc_values)\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/nova/conductor/api.py\", line 202, in service_create\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     return self._manager.service_create(context, values)\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/nova/utils.py\", line 966, in wrapper\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     return func(*args, **kwargs)\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/nova/conductor/manager.py\", line 461, in service_create\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     svc = self.db.service_create(context, values)\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/nova/db/api.py\", line 139, in service_create\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     return IMPL.service_create(context, values)\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/nova/db/sqlalchemy/api.py\", line 146, in wrapper\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     return f(*args, **kwargs)\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/nova/db/sqlalchemy/api.py\", line 521, in service_create\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     binary=values.get('binary'))\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup ServiceBinaryExists: Service with host glover binary nova-conductor exists.\n\nAfter looking into the traceback, I came across this piece of code which starts a service.  Of note is the 2nd except path.  This exception was introduced in January to handle races when creating a record.  It seems as if we are racing similarly in our situation and might need to handle ServiceBinaryExists the same way ServiceTopicExists is being handled.  I'll submit a patch for this.\n\nFrom nova/service.py:\n\n 158     def start(self):\n 159         verstr = version.version_string_with_package()\n 160         LOG.audit(_('Starting %(topic)s node (version %(version)s)'),\n 161                   {'topic': self.topic, 'version': verstr})\n 162         self.basic_config_check()\n 163         self.manager.init_host()\n 164         self.model_disconnected = False\n 165         ctxt = context.get_admin_context()\n 166         try:\n 167             self.service_ref = self.conductor_api.service_get_by_args(ctxt,\n 168                     self.host, self.binary)\n 169             self.service_id = self.service_ref['id']\n 170         except exception.NotFound:\n 171             try:\n 172                 self.service_ref = self._create_service_ref(ctxt)\n 173             except exception.ServiceTopicExists:\n 174                 # NOTE(danms): If we race to create a record with a sibling\n 175                 # worker, don't fail here.\n 176                 self.service_ref = self.conductor_api.service_get_by_args(ctxt,\n 177                     self.host, self.binary)\n\n$ git blame -L 158,178  nova/service.py\nb3f5aba0 (Andy Smith         2010-12-09 15:25:14 -0800 158)     def start(self):\n481d6ff1 (Daniel P. Berrange 2012-12-17 12:17:59 +0000 159)         verstr = version.version_string_with_package()\n481d6ff1 (Daniel P. Berrange 2012-12-17 12:17:59 +0000 160)         LOG.audit(_('Starting %(topic)s node (version %(versi\n481d6ff1 (Daniel P. Berrange 2012-12-17 12:17:59 +0000 161)                   {'topic': self.topic, 'version': verstr})\ne8386a27 (Rafi Khardalian    2013-01-23 01:55:09 +0000 162)         self.basic_config_check()\n065257fb (Vishvananda Ishaya 2010-09-23 12:43:41 -0700 163)         self.manager.init_host()\n9c98cfb4 (Vishvananda Ishaya 2010-08-30 00:55:19 -0700 164)         self.model_disconnected = False\n5e3da586 (Vishvananda Ishaya 2010-10-01 05:57:17 -0700 165)         ctxt = context.get_admin_context()\n57a103b3 (Vishvananda Ishaya 2010-09-02 14:13:22 -0700 166)         try:\ne9d34263 (Russell Bryant     2013-01-14 17:39:29 -0500 167)             self.service_ref = self.conductor_api.service_get\ne9d34263 (Russell Bryant     2013-01-14 17:39:29 -0500 168)                     self.host, self.binary)\ne34bc343 (Wenhao Xu          2013-01-21 19:07:34 +0800 169)             self.service_id = self.service_ref['id']\n57a103b3 (Vishvananda Ishaya 2010-09-02 14:13:22 -0700 170)         except exception.NotFound:\nf6c341b4 (Dan Smith          2014-01-27 14:03:57 -0800 171)             try:\nf6c341b4 (Dan Smith          2014-01-27 14:03:57 -0800 172)                 self.service_ref = self._create_service_ref(c\nf6c341b4 (Dan Smith          2014-01-27 14:03:57 -0800 173)             except exception.ServiceTopicExists:\nf6c341b4 (Dan Smith          2014-01-27 14:03:57 -0800 174)                 # NOTE(danms): If we race to create a record \nf6c341b4 (Dan Smith          2014-01-27 14:03:57 -0800 175)                 # worker, don't fail here.\nf6c341b4 (Dan Smith          2014-01-27 14:03:57 -0800 176)                 self.service_ref = self.conductor_api.service\nf6c341b4 (Dan Smith          2014-01-27 14:03:57 -0800 177)                     self.host, self.binary)", 
    "tags": [
        "conductor", 
        "icehouse-backport-potential", 
        "in-stable-icehouse"
    ], 
    "importance": "Undecided", 
    "heat": 16, 
    "link": "https://bugs.launchpad.net/nova/+bug/1326901", 
    "owner": "https://api.launchpad.net/1.0/~corey.bryant", 
    "id": 1326901, 
    "index": 4903, 
    "created": "2014-06-05 17:38:04.751538+00:00", 
    "title": "ServiceBinaryExists - binary for nova-conductor already exists", 
    "comments": [
        {
            "content": "We're hitting an intermittent issue where ServiceBinaryExists is raised for nova-conductor on deployment.\n\nFrom nova-conductor's upstart log ( /var/log/upstart/nova-conductor.log ):\n\n2014-05-15 12:02:25.206 34494 INFO nova.openstack.common.periodic_task [-] Skipping periodic task _periodic_update_dns because its interval is negative\n2014-05-15 12:02:25.241 34494 INFO nova.openstack.common.service [-] Starting 8 workers\n2014-05-15 12:02:25.242 34494 INFO nova.openstack.common.service [-] Started child 34501\n2014-05-15 12:02:25.244 34494 INFO nova.openstack.common.service [-] Started child 34502\n2014-05-15 12:02:25.246 34494 INFO nova.openstack.common.service [-] Started child 34503\n2014-05-15 12:02:25.246 34501 AUDIT nova.service [-] Starting conductor node (version 2014.1)\n2014-05-15 12:02:25.247 34502 AUDIT nova.service [-] Starting conductor node (version 2014.1)\n2014-05-15 12:02:25.247 34494 INFO nova.openstack.common.service [-] Started child 34504\n2014-05-15 12:02:25.249 34503 AUDIT nova.service [-] Starting conductor node (version 2014.1)\n2014-05-15 12:02:25.251 34504 AUDIT nova.service [-] Starting conductor node (version 2014.1)\n2014-05-15 12:02:25.254 34505 AUDIT nova.service [-] Starting conductor node (version 2014.1)\n2014-05-15 12:02:25.250 34494 INFO nova.openstack.common.service [-] Started child 34505\n2014-05-15 12:02:25.261 34494 INFO nova.openstack.common.service [-] Started child 34506\n2014-05-15 12:02:25.263 34494 INFO nova.openstack.common.service [-] Started child 34507\n2014-05-15 12:02:25.266 34494 INFO nova.openstack.common.service [-] Started child 34508\n2014-05-15 12:02:25.267 34507 AUDIT nova.service [-] Starting conductor node (version 2014.1)\n2014-05-15 12:02:25.268 34506 AUDIT nova.service [-] Starting conductor node (version 2014.1)\n2014-05-15 12:02:25.271 34508 AUDIT nova.service [-] Starting conductor node (version 2014.1)\n/usr/lib/python2.7/dist-packages/nova/openstack/common/db/sqlalchemy/session.py:379: DeprecationWarning: BaseException.message has been deprecated as of Python 2.6\n  match = pattern.match(integrity_error.message)\n/usr/lib/python2.7/dist-packages/nova/openstack/common/db/sqlalchemy/session.py:379: DeprecationWarning: BaseException.message has been deprecated as of Python 2.6\n  match = pattern.match(integrity_error.message)\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/dist-packages/eventlet/hubs/hub.py\", line 346, in fire_timers\n    timer()\n  File \"/usr/lib/python2.7/dist-packages/eventlet/hubs/timer.py\", line 56, in __call__\n    cb(*args, **kw)\n  File \"/usr/lib/python2.7/dist-packages/eventlet/greenthread.py\", line 194, in main\n2014-05-15 12:02:25.862 34502 ERROR oslo.messaging._drivers.impl_rabbit [-] AMQP server on localhost:5672 is unreachable: [Errno 111] ECONNREFUSED. Trying again in 1 seconds.\n    result = function(*args, **kwargs)\n  File \"/usr/lib/python2.7/dist-packages/nova/openstack/common/service.py\", line 480, in run_service\n    service.start()\n  File \"/usr/lib/python2.7/dist-packages/nova/service.py\", line 172, in start\n    self.service_ref = self._create_service_ref(ctxt)\n  File \"/usr/lib/python2.7/dist-packages/nova/service.py\", line 224, in _create_service_ref\n    service = self.conductor_api.service_create(context, svc_values)\n  File \"/usr/lib/python2.7/dist-packages/nova/conductor/api.py\", line 202, in service_create\n    return self._manager.service_create(context, values)\n  File \"/usr/lib/python2.7/dist-packages/nova/utils.py\", line 966, in wrapper\n    return func(*args, **kwargs)\n  File \"/usr/lib/python2.7/dist-packages/nova/conductor/manager.py\", line 461, in service_create\n    svc = self.db.service_create(context, values)\n  File \"/usr/lib/python2.7/dist-packages/nova/db/api.py\", line 139, in service_create\n    return IMPL.service_create(context, values)\n  File \"/usr/lib/python2.7/dist-packages/nova/db/sqlalchemy/api.py\", line 146, in wrapper\n    return f(*args, **kwargs)\n  File \"/usr/lib/python2.7/dist-packages/nova/db/sqlalchemy/api.py\", line 521, in service_create\n    binary=values.get('binary'))\nServiceBinaryExists: Service with host glover binary nova-conductor exists.\n2014-05-15 12:02:25.864 34503 ERROR nova.openstack.common.threadgroup [-] Service with host glover binary nova-conductor exists.\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup Traceback (most recent call last):\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/nova/openstack/common/threadgroup.py\", line 117, in wait\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     x.wait()\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/nova/openstack/common/threadgroup.py\", line 49, in wait\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     return self.thread.wait()\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/eventlet/greenthread.py\", line 168, in wait\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     return self._exit_event.wait()\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/eventlet/event.py\", line 116, in wait\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     return hubs.get_hub().switch()\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/eventlet/hubs/hub.py\", line 187, in switch\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     return self.greenlet.switch()\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/eventlet/greenthread.py\", line 194, in main\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     result = function(*args, **kwargs)\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/nova/openstack/common/service.py\", line 480, in run_service\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     service.start()\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/nova/service.py\", line 172, in start\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     self.service_ref = self._create_service_ref(ctxt)\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/nova/service.py\", line 224, in _create_service_ref\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     service = self.conductor_api.service_create(context, svc_values)\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/nova/conductor/api.py\", line 202, in service_create\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     return self._manager.service_create(context, values)\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/nova/utils.py\", line 966, in wrapper\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     return func(*args, **kwargs)\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/nova/conductor/manager.py\", line 461, in service_create\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     svc = self.db.service_create(context, values)\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/nova/db/api.py\", line 139, in service_create\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     return IMPL.service_create(context, values)\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/nova/db/sqlalchemy/api.py\", line 146, in wrapper\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     return f(*args, **kwargs)\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup   File \"/usr/lib/python2.7/dist-packages/nova/db/sqlalchemy/api.py\", line 521, in service_create\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup     binary=values.get('binary'))\n2014-05-15 12:02:25.864 34503 TRACE nova.openstack.common.threadgroup ServiceBinaryExists: Service with host glover binary nova-conductor exists.\n\nAfter looking into the traceback, I came across this piece of code which starts a service.  Of note is the 2nd except path.  This exception was introduced in January to handle races when creating a record.  It seems as if we are racing similarly in our situation and might need to handle ServiceBinaryExists the same way ServiceTopicExists is being handled.  I'll submit a patch for this.\n\nFrom nova/service.py:\n\n 158     def start(self):\n 159         verstr = version.version_string_with_package()\n 160         LOG.audit(_('Starting %(topic)s node (version %(version)s)'),\n 161                   {'topic': self.topic, 'version': verstr})\n 162         self.basic_config_check()\n 163         self.manager.init_host()\n 164         self.model_disconnected = False\n 165         ctxt = context.get_admin_context()\n 166         try:\n 167             self.service_ref = self.conductor_api.service_get_by_args(ctxt,\n 168                     self.host, self.binary)\n 169             self.service_id = self.service_ref['id']\n 170         except exception.NotFound:\n 171             try:\n 172                 self.service_ref = self._create_service_ref(ctxt)\n 173             except exception.ServiceTopicExists:\n 174                 # NOTE(danms): If we race to create a record with a sibling\n 175                 # worker, don't fail here.\n 176                 self.service_ref = self.conductor_api.service_get_by_args(ctxt,\n 177                     self.host, self.binary)\n\n$ git blame -L 158,178  nova/service.py\nb3f5aba0 (Andy Smith         2010-12-09 15:25:14 -0800 158)     def start(self):\n481d6ff1 (Daniel P. Berrange 2012-12-17 12:17:59 +0000 159)         verstr = version.version_string_with_package()\n481d6ff1 (Daniel P. Berrange 2012-12-17 12:17:59 +0000 160)         LOG.audit(_('Starting %(topic)s node (version %(versi\n481d6ff1 (Daniel P. Berrange 2012-12-17 12:17:59 +0000 161)                   {'topic': self.topic, 'version': verstr})\ne8386a27 (Rafi Khardalian    2013-01-23 01:55:09 +0000 162)         self.basic_config_check()\n065257fb (Vishvananda Ishaya 2010-09-23 12:43:41 -0700 163)         self.manager.init_host()\n9c98cfb4 (Vishvananda Ishaya 2010-08-30 00:55:19 -0700 164)         self.model_disconnected = False\n5e3da586 (Vishvananda Ishaya 2010-10-01 05:57:17 -0700 165)         ctxt = context.get_admin_context()\n57a103b3 (Vishvananda Ishaya 2010-09-02 14:13:22 -0700 166)         try:\ne9d34263 (Russell Bryant     2013-01-14 17:39:29 -0500 167)             self.service_ref = self.conductor_api.service_get\ne9d34263 (Russell Bryant     2013-01-14 17:39:29 -0500 168)                     self.host, self.binary)\ne34bc343 (Wenhao Xu          2013-01-21 19:07:34 +0800 169)             self.service_id = self.service_ref['id']\n57a103b3 (Vishvananda Ishaya 2010-09-02 14:13:22 -0700 170)         except exception.NotFound:\nf6c341b4 (Dan Smith          2014-01-27 14:03:57 -0800 171)             try:\nf6c341b4 (Dan Smith          2014-01-27 14:03:57 -0800 172)                 self.service_ref = self._create_service_ref(c\nf6c341b4 (Dan Smith          2014-01-27 14:03:57 -0800 173)             except exception.ServiceTopicExists:\nf6c341b4 (Dan Smith          2014-01-27 14:03:57 -0800 174)                 # NOTE(danms): If we race to create a record \nf6c341b4 (Dan Smith          2014-01-27 14:03:57 -0800 175)                 # worker, don't fail here.\nf6c341b4 (Dan Smith          2014-01-27 14:03:57 -0800 176)                 self.service_ref = self.conductor_api.service\nf6c341b4 (Dan Smith          2014-01-27 14:03:57 -0800 177)                     self.host, self.binary)", 
            "date_created": "2014-06-05 17:38:04.751538+00:00", 
            "author": "https://api.launchpad.net/1.0/~corey.bryant"
        }, 
        {
            "content": "What release is this on, or trunk/master for Juno on 6/5?", 
            "date_created": "2014-06-11 16:42:52.548251+00:00", 
            "author": "https://api.launchpad.net/1.0/~mriedem"
        }, 
        {
            "content": "Hi Matt,\n\nSorry I missed your comment.  I have a fix proposed but just need a reviewer.  Any chance you could review?\n\nhttps://review.openstack.org/#/c/98199/\n\nThanks,\nCorey", 
            "date_created": "2014-06-23 14:02:48.459730+00:00", 
            "author": "https://api.launchpad.net/1.0/~corey.bryant"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/98199\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=37247aba813fbc408901a2f1b1ad88e2acb796a1\nSubmitter: Jenkins\nBranch:    master\n\ncommit 37247aba813fbc408901a2f1b1ad88e2acb796a1\nAuthor: Corey Bryant <email address hidden>\nDate:   Mon Jun 16 12:17:14 2014 -0400\n\n    Handle service creation race by service workers\n    \n    This handle a race where a sibling has already created the service\n    record in the database.  This fix is similar to that of commit\n    f6c341b4.\n    \n    Change-Id: I7975fc632eee34390c5d7dc275b52363ad45475e\n    Closes-bug: 1326901\n", 
            "date_created": "2014-06-28 00:37:31.964147+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Fix proposed to branch: stable/icehouse\nReview: https://review.openstack.org/108401", 
            "date_created": "2014-07-21 15:14:58.489793+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/108401\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=72cc37dd952e342966f583be3a020d9424d266df\nSubmitter: Jenkins\nBranch:    stable/icehouse\n\ncommit 72cc37dd952e342966f583be3a020d9424d266df\nAuthor: Corey Bryant <email address hidden>\nDate:   Mon Jun 16 12:17:14 2014 -0400\n\n    Handle service creation race by service workers\n    \n    This handle a race where a sibling has already created the service\n    record in the database.  This fix is similar to that of commit\n    f6c341b4.\n    \n    Change-Id: I7975fc632eee34390c5d7dc275b52363ad45475e\n    Closes-bug: 1326901\n    (cherry picked from commit 37247aba813fbc408901a2f1b1ad88e2acb796a1)\n", 
            "date_created": "2014-08-01 16:47:05.519541+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ]
}
{
    "status": "In Progress", 
    "last_updated": "2017-09-18 08:57:22.644834+00:00", 
    "description": "[Summary]\nUnexpected API Error returned when set metadata for aggregate\n\n[Topo]\ndevstack all-in-one node\n\n[Description and expect result]\nno Unexpected API Error returned when set metadata for aggregate\n\n[Reproduceable or not]\nreproduceable\n\n[Recreate Steps]\n\nOn devstack:\n\n> nova aggregate-create agg1\n> nova aggregate-set-metadata agg1 abc=1\n> nova aggregate-set-metadata agg1 ABC=2\n\n1) create an aggregate, with metadata \"abc\":\nroot@45-59:~# nova aggregate-details agg1\n+----+------+-------------------+-------+----------+\n| Id | Name | Availability Zone | Hosts | Metadata |\n+----+------+-------------------+-------+----------+\n| 4  | agg1 | -                 |       | 'abc=1'  |\n+----+------+-------------------+-------+----------+\nroot@45-59:~#\n\n2)set metadata of the aggregate as \"ABC\", upper case of the\nexisting metadata \"abc\", an Unexpected API Error returned:\nroot@45-59:~# nova  aggregate-set-metadata agg1 ABC=2\nERROR (ClientException): Unexpected API Error. Please report\n\u00a0this at http://bugs.launchpad.net/nova/ and attach the Nova API\nlog if possible.<type 'exceptions.KeyError'> (HTTP 500) (Request-ID:\nreq-b45dddb2-24e6-4b8f-8901-2ed250ec787a)\nroot@45-59:~#\n\n[Configration]\nreproduceable bug, no need\n\n[logs]\nreproduceable bug, no need\n\n[Root cause anlyze or debug inf]\nreproduceable bug\n\n[Attachment]\nNone", 
    "tags": [
        "api", 
        "compute", 
        "db"
    ], 
    "importance": "Medium", 
    "heat": 10, 
    "link": "https://bugs.launchpad.net/nova/+bug/1538011", 
    "owner": "https://api.launchpad.net/1.0/~ratailor", 
    "id": 1538011, 
    "index": 4435, 
    "created": "2016-01-26 06:49:58.268288+00:00", 
    "title": "Metadata keys are not case sensitive", 
    "comments": [
        {
            "content": "[Summary]\nUnexpected API Error returned when set metadata for aggregate\n\n[Topo]\ndevstack all-in-one node\n\n[Description and expect result]\nno Unexpected API Error returned when set metadata for aggregate\n\n[Reproduceable or not]\nreproduceable \n\n[Recreate Steps]\n1) create an aggregate, with metadata \"abc\":\nroot@45-59:~# nova aggregate-details agg1\n+----+------+-------------------+-------+----------+\n| Id | Name | Availability Zone | Hosts | Metadata |\n+----+------+-------------------+-------+----------+\n| 4  | agg1 | -                 |       | 'abc=1'  |\n+----+------+-------------------+-------+----------+\nroot@45-59:~# \n\n2)set metadata of the aggregate as \"ABC\", upper case of the \nexisting metadata \"abc\", an Unexpected API Error returned:\nroot@45-59:~# nova  aggregate-set-metadata agg1 ABC=2\nERROR (ClientException): Unexpected API Error. Please report\n this at http://bugs.launchpad.net/nova/ and attach the Nova API \nlog if possible.<type 'exceptions.KeyError'> (HTTP 500) (Request-ID: \nreq-b45dddb2-24e6-4b8f-8901-2ed250ec787a)\nroot@45-59:~# \n\n\n[Configration]\nreproduceable bug, no need\n\n[logs]\nreproduceable bug, no need\n\n[Root cause anlyze or debug inf]\nreproduceable bug\n\n[Attachment]\nNone", 
            "date_created": "2016-01-26 06:49:58.268288+00:00", 
            "author": "https://api.launchpad.net/1.0/~hgangwx"
        }, 
        {
            "content": "I was able to reproduce this behavior following the steps above and also by modifying data in the functional tests. This only happens when you have two keys of the same name where one is lowercase and one is uppercase. I looked at the aggregate code and didn't see any obvious normalization or modification of keys, so I suspect this may be something in the db layer (possibly oslo?) that is normalizing the key values. That being said, this seems like a pretty extreme edge case so unless someone can share a situation where this is a huge deal, this will most likely be a low priority bug. At minimum, we might need a documentation patch to indicate that metadata keys must be case-insensitively uniquely named.", 
            "date_created": "2016-01-27 09:46:43.560183+00:00", 
            "author": "https://api.launchpad.net/1.0/~auggy"
        }, 
        {
            "content": "When setting a key that is uniquely named regardless of the case, the update works correctly. The error only happens when creating a metadata key in one case (eg all lower) and then adding a key of the same name in another case (eg all upper, or a mix of upper and lower)", 
            "date_created": "2016-01-27 09:48:50.207440+00:00", 
            "author": "https://api.launchpad.net/1.0/~auggy"
        }, 
        {
            "content": "We should also have test coverage for this scenario in the functional tests if we do decide to fix it.", 
            "date_created": "2016-01-27 09:49:36.346394+00:00", 
            "author": "https://api.launchpad.net/1.0/~auggy"
        }, 
        {
            "content": "very similar to this one is bug 1535224", 
            "date_created": "2016-01-27 10:58:40.197749+00:00", 
            "author": "https://api.launchpad.net/1.0/~mzoeller"
        }, 
        {
            "content": "2016-01-28 02:05:58.388 ERROR nova.api.openstack.extensions [req-c14d351d-5d60-4986-ab95-22600ecb5287 admin admin] Unexpected exception in API method\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions Traceback (most recent call last):\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions   File \"/opt/stack/nova/nova/api/openstack/extensions.py\", line 478, in wrapped\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions     return f(*args, **kwargs)\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions   File \"/opt/stack/nova/nova/api/validation/__init__.py\", line 73, in wrapper\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions     return func(*args, **kwargs)\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions   File \"/opt/stack/nova/nova/api/openstack/compute/aggregates.py\", line 192, in _set_metadata\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions     id, metadata)\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions   File \"/opt/stack/nova/nova/exception.py\", line 110, in wrapped\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions     payload)\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions   File \"/usr/local/lib/python2.7/dist-packages/oslo_utils/excutils.py\", line 204, in __exit__\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions     six.reraise(self.type_, self.value, self.tb)\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions   File \"/opt/stack/nova/nova/exception.py\", line 89, in wrapped\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions     return f(self, context, *args, **kw)\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions   File \"/opt/stack/nova/nova/compute/api.py\", line 3547, in update_aggregate_metadata\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions     aggregate.update_metadata(metadata)\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions   File \"/usr/local/lib/python2.7/dist-packages/oslo_versionedobjects/base.py\", line 221, in wrapper\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions     return fn(self, *args, **kwargs)\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions   File \"/opt/stack/nova/nova/objects/aggregate.py\", line 123, in update_metadata\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions     db.aggregate_metadata_add(self._context, self.id, to_add)\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions   File \"/opt/stack/nova/nova/db/api.py\", line 1784, in aggregate_metadata_add\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions     IMPL.aggregate_metadata_add(context, aggregate_id, metadata, set_delete)\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions   File \"/opt/stack/nova/nova/db/sqlalchemy/api.py\", line 233, in wrapper\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions     return f(context, aggregate_id, *args, **kwargs)\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions   File \"/opt/stack/nova/nova/db/sqlalchemy/api.py\", line 5677, in aggregate_metadata_add\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions     meta_ref.update({\"value\": metadata[key]})\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions KeyError: u'ABC'\n2016-01-28 02:05:58.388 TRACE nova.api.openstack.extensions \n", 
            "date_created": "2016-01-28 10:09:19.484120+00:00", 
            "author": "https://api.launchpad.net/1.0/~auggy"
        }, 
        {
            "content": "The root cause of this is https://github.com/openstack/nova/blob/a37590c21bca175f642792b6707d2eb4e6349e51/nova/db/sqlalchemy/api.py#L5674 \n\nThe issue is that _in is case insensitive for mysql, which means that in:\n\n                    query = query.filter(\n                        models.AggregateMetadata.key.in_(all_keys))\n                    for meta_ref in query.all():\n                        key = meta_ref.key\n                        meta_ref.update({\"value\": metadata[key]})\n                        already_existing_keys.add(key)\n\nThe all_keys is 'ABC' , but matches the existing 'abc'.\n\nWe probably just need an 'if key in metadata:' before the meta_ref.update ", 
            "date_created": "2016-01-28 10:26:18.380087+00:00", 
            "author": "https://api.launchpad.net/1.0/~sdague"
        }, 
        {
            "content": "Marked at high priority as this is a server 500 error, which we should never be doing.", 
            "date_created": "2016-01-28 10:27:20.477315+00:00", 
            "author": "https://api.launchpad.net/1.0/~sdague"
        }, 
        {
            "content": "In addition to fixing the issue in code, we need to add functional test coverage. The coverage should make sure the gate uses MySQL as the backend via the MySQLOpportunisticTestCase class. Adding this coverage will be an important template as it's likely similar issues with the \"IN\" being case-insensitive in MySQL are scattered across our codebase.", 
            "date_created": "2016-01-28 14:39:05.574825+00:00", 
            "author": "https://api.launchpad.net/1.0/~auggy"
        }, 
        {
            "content": "Related fix proposed to branch: master\nReview: https://review.openstack.org/283364", 
            "date_created": "2016-02-23 03:20:22.475433+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Related fix proposed to branch: master\nReview: https://review.openstack.org/283868", 
            "date_created": "2016-02-23 23:49:53.577914+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "The plot thickens....\n\nThere is a unique constraint on agg_id, key, deleted. For the intents and purposes of mysql:\n\n1-abc-0 == 1-ABC-0\n\nWhich means that you can't have both keys. ", 
            "date_created": "2016-02-24 11:47:04.291040+00:00", 
            "author": "https://api.launchpad.net/1.0/~sdague"
        }, 
        {
            "content": "There is currently discussion on the mailing list about how to handle case sensitive payloads in the api. Once we know our direction in that regard, we can figure out next steps for fixing this bug.", 
            "date_created": "2016-02-25 01:26:22.007282+00:00", 
            "author": "https://api.launchpad.net/1.0/~auggy"
        }, 
        {
            "content": "Updated description and marked bug#1535224 as a duplicate. The issue here is that MySQL is not case sensitive when managing any unique text fields.", 
            "date_created": "2016-02-29 19:08:10.940724+00:00", 
            "author": "https://api.launchpad.net/1.0/~auggy"
        }, 
        {
            "content": "Per discussion, current fix strategy is to casefold in sqlalchemy/api.py and force keys to all lower case.", 
            "date_created": "2016-02-29 21:52:04.637021+00:00", 
            "author": "https://api.launchpad.net/1.0/~auggy"
        }, 
        {
            "content": "I don't really like the idea of casefolding data set by the user and can be read by the user. Do we really want the precedent of changing data provided by the user because MySQL? I understand this is the only way given the unique constraint on the key. Is removing the unique constraint an option?\n\nIf there's no a unique constraint, then we would have to add checking at the sqlalchemy/api.py layer that finds the exact match among multiple results, for example, FOO foo FoO as mentioned in IRC to ensure we read/update/delete the right record. And we can raise on our own in the case of duplicates.\n\nI can understand the argument that this isn't a Big Deal for aggregate metadata being that the consumer of the data is Nova. But if we broaden the issue to say, user metadata, are we still going to want to change all the keys to lowercase? If someone has a program that will do something based on the value of a metadata key, their code may not find the same key they had set earlier. Example: user program sets MyMetadataKey=somevalue and then they try to access \"MyMetadataKey\" in a queried instance and get a KeyError because it's now \"mymetadatakey\".", 
            "date_created": "2016-03-15 22:09:14.327518+00:00", 
            "author": "https://api.launchpad.net/1.0/~melwitt"
        }, 
        {
            "content": "That's a really good point about the end user impact of this change for user facing metadata. I'm inclined to agree with melwitt on this, for user facing data, if a user has specified a key to be a certain case, it should stay that case.\n\nFor aggregate metadata and this bug specifically, it makes sense to research why the unique constraint even exists at all on that key field. Once we know that, we can decide the best course to move forward.\n\nIn the meantime, I have a fix for the metadata key issue that illustrates the lowercase path, but I'm not comfortable with it until we've come to a decision about how we want to deal with the metadata case sensitivity issue for all of our metadata if anything for the sake of consistency.", 
            "date_created": "2016-03-16 02:18:49.968300+00:00", 
            "author": "https://api.launchpad.net/1.0/~auggy"
        }, 
        {
            "content": "I'll add comments to the change I have posted for this bug regarding this discussion and will research if we actually need the unique constraint on the aggregate metadata key field.", 
            "date_created": "2016-03-16 02:20:26.744170+00:00", 
            "author": "https://api.launchpad.net/1.0/~auggy"
        }, 
        {
            "content": "It's worth noting that the aggregate metadata is user-facing in a sense that there is an API for showing aggregate details, including the aggregate metadata [1]. The primary consumer of the metadata is Nova itself, but it's entirely possible for an end user to write code to create/update/read aggregate metadata. And I get wary of the idea of put data != get data for the end user.\n\n\n[1] http://developer.openstack.org/api-ref-compute-v2.1.html#showAggregate", 
            "date_created": "2016-03-16 18:36:23.646023+00:00", 
            "author": "https://api.launchpad.net/1.0/~melwitt"
        }, 
        {
            "content": "Thanks for the clarification, melanie. Yes, aggregate metadata is also potentially user facing in that we have API support making it so. I also agree that I'm not fan of modifying input.\n\nBecause this only affects new key creation in the case of aggregate metadata, if we can't do the database change, we could just throw a validation error for new keys that aren't all lowercase. Sean and I had originally discussed modifying the JSON validation to that effect. We would still need additional error checking to handle the duplicate case, but at least that would set the user expectation.\n\nFor the larger metadata case, I'm of the opinion that users should be able to set the keys to whatever capitalization strategy they want. If we can add a constraint to prevent  duplicate key names in some way, we could maintain an internal mapping that preserves the original case. It seems like over-engineering and added complexity, but that's my thought on it. Of course the ideal solution is to just fix the columns in the database.", 
            "date_created": "2016-03-17 18:08:42.081168+00:00", 
            "author": "https://api.launchpad.net/1.0/~auggy"
        }, 
        {
            "content": "After discussing on IRC and thinking about it, I understand the situation better in that the only way we could allow case sensitive metadata keys (that is, let users set whatever they want) is if we rewrite our existing metadata key queries to do a preliminary read-only query first (no more SELECT FOR UPDATE, IN, etc), filter in Python, and then act upon an exactly matching record. It also requires that we not have a unique constraint on the column. We would be constrained in the way we could query metadata keys and set column constraints and it's complex and error-prone, for not a lot of gain.\n\nMy primary concern was the idea of casefolding the keys. With the suggestion of raising an error if an API caller attempts to set a non-lowercase key, my concern is addressed.\n\nAs you mentioned on the review, I think we can add the validation and leave the backend as-is. That way previously set CamelCase keys continue to work and we avoid future problems.", 
            "date_created": "2016-03-21 18:23:39.875891+00:00", 
            "author": "https://api.launchpad.net/1.0/~melwitt"
        }, 
        {
            "content": "Change abandoned by Augustina Ragwitz (<email address hidden>) on branch: master\nReview: https://review.openstack.org/283868\nReason: Spec is up that addresses this issue, I'll work on that instead", 
            "date_created": "2016-06-14 17:10:27.208748+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "https://review.openstack.org/#/c/329697/", 
            "date_created": "2016-08-19 00:25:26.909954+00:00", 
            "author": "https://api.launchpad.net/1.0/~auggy"
        }, 
        {
            "content": "Change abandoned by Sean Dague (<email address hidden>) on branch: master\nReview: https://review.openstack.org/283364\nReason: This review is > 6 weeks without comment, and failed Jenkins the last time it was checked. We are abandoning this for now. Feel free to reactivate the review by pressing the restore button and leaving a 'recheck' comment to get fresh test results.", 
            "date_created": "2016-12-09 21:04:26.822270+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Change abandoned by Ken'ichi Ohmichi (<email address hidden>) on branch: master\nReview: https://review.openstack.org/380675", 
            "date_created": "2017-04-17 18:18:58.011908+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Related fix proposed to branch: master\nReview: https://review.openstack.org/484957", 
            "date_created": "2017-07-18 21:48:37.990975+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/484957\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=22f4aedb857073cf29923c78d5185df4e2e03539\nSubmitter: Jenkins\nBranch:    master\n\ncommit 22f4aedb857073cf29923c78d5185df4e2e03539\nAuthor: Matt Riedemann <email address hidden>\nDate:   Tue Jul 18 17:47:22 2017 -0400\n\n    Do not mention that tags are case sensitive in docs\n    \n    Because MySQL is case insensitive by default, and this\n    is something that depends on the database backend in the\n    cloud, let's not mention that tags are case sensitive in\n    the API.\n    \n    Change-Id: I6efa9d6a5c598ac7a5c898d63b6a4b1934560b80\n    Related-Bug: #1538011\n", 
            "date_created": "2017-07-19 17:33:20.208969+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Found open reviews for this bug in gerrit, setting to In Progress. \n\nreview: https://review.openstack.org/283364 in branch: master\n", 
            "date_created": "2017-07-24 14:48:10.061517+00:00", 
            "author": "https://api.launchpad.net/1.0/~sdague"
        }, 
        {
            "content": "related bug https://bugs.launchpad.net/nova/+bug/1709260", 
            "date_created": "2017-08-10 09:26:07.403394+00:00", 
            "author": "https://api.launchpad.net/1.0/~xuhj"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/504885", 
            "date_created": "2017-09-18 08:57:21.680886+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ]
}
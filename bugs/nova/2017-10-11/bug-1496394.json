{
    "status": "Fix Released", 
    "last_updated": "2015-12-03 21:36:49.714293+00:00", 
    "description": "Apologies in advance for what's going to be a very long story for a simple change in nova/utils.py.\n\nChange b7e9a64416ff239a4c1b8501f398796b02c46ce7 introduces a filter_deleted flag into the metadata_to_dict function.   The name implies (to me anyway) that when the flag is False (as it is by default), deleted items will NOT be filtered out of the dict returned by the function.  However, that's not what happens: when filter_deleted=False, deleted items ARE excluded.\n\nPoint 1: this is a naming issue, not a code issue.  Here's what we've got:\nOriginal code: returns a dict of the non-deleted metadata.\n\ndef metadata_to_dict(metadata):\n    result = {}\n    for item in metadata:\n    \tif not item.get('deleted'):\n\t   result[item['key']] = item['value']\n   return result\n\nCurrent code: adds a new parameter with a default value ... so you'd expect the behavior with the default parameter setting to be the same as the original function.  \n\ndef metadata_to_dict(metadata, filter_deleted=False):\n    result = {}\n    for item in metadata:\n        if not filter_deleted and item.get('deleted'):\n            continue\n        result[item['key']] = item['value']\n    return result\n\nSummary of Point 1:\nIf the default value is used, deleted items will not be included in the returned dict, so original behavior is preserved.\nIf filter_deleted=True is passed to the function, the 'if' will fail and deleted metadata will be included, which is new behavior.\nHence, the code is OK ... but it would be much clearer if the parameter were named 'include_deleted'.  See the next point for why this matters.\n\nPoint 2: the naming issue is important.\n\nThree utility functions call the metadata_to_dict function:\n(a) def instance_meta(instance) -> calls without setting the parameter, so no change in behavior: Correct\n(b) def instance_sys_meta(instance) -> sets filter_deleted=True -> change in behavior (now includes deleted instance_system_metadata)\n(c) def get_image_from_system_metadata(system_meta) -> sets filter_deleted=True -> change in behavior (now includes deleted instance_system_metadata)\n\nThe change in behavior for (b) and (c) is a breaking change for a utility function, which is a bad practice.  I think what's going on is that when the functions were changed to use the new function signature for metadata_to_dict(), filter_deleted was set to True so that the functions would filter out deleted stuff, thereby preserving their original behavior.  But the opposite happened, namely, now they include deleted stuff.  Actually, the intention doesn't matter here--a breaking change to a utility function should not occur.  My real point is that when you look at functions (b) and (c) in isolation, filter_deleted=True appears to be what you'd want to pass to metadata_to_dict, whereas you need to pass filter_deleted=False to get the correct behavior.\n\nThis bug:\nAll I want to do is rename filter_deleted in the function metadata_to_dict() to 'include_deleted'.  (I'll file a separate bug to correct the utility functions that use the metadata_to_dict() function.)\n\nReferences:\nThe function is here: https://github.com/openstack/nova/blob/a2d5492e8a15cdc13ada61b03f6293c709160505/nova/utils.py#L847-L853\nThe change was introduced by https://review.openstack.org/#/c/109201/\nThe change is b7e9a64416ff239a4c1b8501f398796b02c46ce7", 
    "tags": [], 
    "importance": "Undecided", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1496394", 
    "owner": "https://api.launchpad.net/1.0/~brian-rosmaita", 
    "id": 1496394, 
    "index": 5768, 
    "created": "2015-09-16 13:24:24.199179+00:00", 
    "title": "misleadingly named parameter in metadata_to_dict utility function", 
    "comments": [
        {
            "content": "Apologies in advance for what's going to be a very long story for a simple change in nova/utils.py.\n\nChange b7e9a64416ff239a4c1b8501f398796b02c46ce7 introduces a filter_deleted flag into the metadata_to_dict function.   The name implies (to me anyway) that when the flag is False (as it is by default), deleted items will NOT be filtered out of the dict returned by the function.  However, that's not what happens: when filter_deleted=False, deleted items ARE excluded.\n\nPoint 1: this is a naming issue, not a code issue.  Here's what we've got:\nOriginal code: returns a dict of the non-deleted metadata.\n\ndef metadata_to_dict(metadata):\n    result = {}\n    for item in metadata:\n    \tif not item.get('deleted'):\n\t   result[item['key']] = item['value']\n   return result\n\nCurrent code: adds a new parameter with a default value ... so you'd expect the behavior with the default parameter setting to be the same as the original function.  \n\ndef metadata_to_dict(metadata, filter_deleted=False):\n    result = {}\n    for item in metadata:\n        if not filter_deleted and item.get('deleted'):\n            continue\n        result[item['key']] = item['value']\n    return result\n\nSummary of Point 1:\nIf the default value is used, deleted items will not be included in the returned dict, so original behavior is preserved.\nIf filter_deleted=True is passed to the function, the 'if' will fail and deleted metadata will be included, which is new behavior.\nHence, the code is OK ... but it would be much clearer if the parameter were named 'include_deleted'.  See the next point for why this matters.\n\nPoint 2: the naming issue is important.\n\nThree utility functions call the metadata_to_dict function:\n(a) def instance_meta(instance) -> calls without setting the parameter, so no change in behavior: Correct\n(b) def instance_sys_meta(instance) -> sets filter_deleted=True -> change in behavior (now includes deleted instance_system_metadata)\n(c) def get_image_from_system_metadata(system_meta) -> sets filter_deleted=True -> change in behavior (now includes deleted instance_system_metadata)\n\nThe change in behavior for (b) and (c) is a breaking change for a utility function, which is a bad practice.  I think what's going on is that when the functions were changed to use the new function signature for metadata_to_dict(), filter_deleted was set to True so that the functions would filter out deleted stuff, thereby preserving their original behavior.  But the opposite happened, namely, now they include deleted stuff.  Actually, the intention doesn't matter here--a breaking change to a utility function should not occur.  My real point is that when you look at functions (b) and (c) in isolation, filter_deleted=True appears to be what you'd want to pass to metadata_to_dict, whereas you need to pass filter_deleted=False to get the correct behavior.\n\nThis bug:\nAll I want to do is rename filter_deleted in the function metadata_to_dict() to 'include_deleted'.  (I'll file a separate bug to correct the utility functions that use the metadata_to_dict() function.)\n\nReferences:\nThe function is here: https://github.com/openstack/nova/blob/a2d5492e8a15cdc13ada61b03f6293c709160505/nova/utils.py#L847-L853\nThe change was introduced by https://review.openstack.org/#/c/109201/\nThe change is b7e9a64416ff239a4c1b8501f398796b02c46ce7", 
            "date_created": "2015-09-16 13:24:24.199179+00:00", 
            "author": "https://api.launchpad.net/1.0/~brian-rosmaita"
        }, 
        {
            "content": "The functionality of change https://review.openstack.org/#/c/109201/ seems correct. The intention is that the deleted items are NOT filtered.\n\nHowever having an argument called 'filter_deleted' that actually filters deleted items when 'False' seems likely to cause confusion.", 
            "date_created": "2015-09-16 15:50:09.505392+00:00", 
            "author": "https://api.launchpad.net/1.0/~mjdoffma"
        }, 
        {
            "content": "The follow-on bug I mentioned above is here: https://bugs.launchpad.net/nova/+bug/1496495", 
            "date_created": "2015-09-16 16:47:51.837754+00:00", 
            "author": "https://api.launchpad.net/1.0/~brian-rosmaita"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/226539", 
            "date_created": "2015-09-22 20:29:03.862037+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/226539\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=88939ddea9475ddaa30ba844e11b76567c1f9624\nSubmitter: Jenkins\nBranch:    master\n\ncommit 88939ddea9475ddaa30ba844e11b76567c1f9624\nAuthor: Brian Rosmaita <email address hidden>\nDate:   Tue Sep 22 20:27:02 2015 +0000\n\n    Change parameter name in utility function\n    \n    Change b7e9a64416ff239a4c1b8501f398796b02c46ce7 introduced a\n    filter_deleted flag into the metadata_to_dict utility function.\n    Counterintuitively, when this flag is False, deleted items are excluded\n    from the returned dict, and when the flag is True, deleted items are\n    included.  (The default setting is False, which preserves the behavior\n    of this function before the flag was added.)  This poor choice of names\n    doesn't sound like a big deal, but there are some functions calling\n    metadata_to_dict that are using the flag improperly (that is, they are\n    setting filter_deleted=True in the expectation that deleted items won't\n    be included in the output). This patch changes the name of the parameter\n    to the more perspicuous 'include_deleted', sets the default value to\n    False to preserve the original behavior of the function, and adds some\n    tests.  (I'll correct the functions that are using the flag incorrectly\n    in a dependent patch.)\n    \n    Change-Id: I40737ebb19fb50e3f671c996a2d096996835cc68\n    Closes-Bug: #1496394\n", 
            "date_created": "2015-10-05 18:03:35.696830+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "This issue was fixed in the openstack/nova 13.0.0.0b1 development milestone.", 
            "date_created": "2015-12-02 16:18:21.959167+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }
    ]
}
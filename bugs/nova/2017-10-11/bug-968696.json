{
    "status": "In Progress", 
    "last_updated": "2017-09-25 19:55:30.305724+00:00", 
    "description": "Fact: Keystone's rbac model grants roles to users on specific tenants, and post-keystone redux, there are no longer \"global\" roles.\n\nProblem: Granting a user an \"admin\" role on ANY tenant grants them unlimited \"admin\"-ness throughout the system because there is no differentiation between a scoped \"admin\"-ness and a global \"admin\"-ness.\n\nI don't have a specific solution to advocate, but being an admin on *any* tenant simply *cannot* allow you to administer all of keystone.\n\nSteps to reproduce (from Horizon, though you could do this with the CLI, too):\n\n1. User A (existing admin) creates Project B and User B.\n2. User A adds User B to Project B with the admin role on Project B.\n3. User B logs in and now has unlimited admin rights not only to view things in the dashboard, but to take actions like creating new projects and users, managing existing projects and users, etc.\n\n\nNote:  See changes ongoing under https://bugs.launchpad.net/neutron/+bug/1602081  which is required before policy changes can enforce.", 
    "tags": [
        "keystone"
    ], 
    "importance": "Wishlist", 
    "heat": 252, 
    "link": "https://bugs.launchpad.net/nova/+bug/968696", 
    "owner": "https://api.launchpad.net/1.0/~ayoung", 
    "id": 968696, 
    "index": 1229, 
    "created": "2012-03-29 23:02:07.034989+00:00", 
    "title": "'admin'-ness not properly scoped", 
    "comments": [
        {
            "content": "Fact: Keystone's rbac model correlates grants roles to users on specific tenants, and post-keystone redux, there are no longer \"global\" roles.\n\nProblem: Granting a user an \"admin\" role on ANY tenant grants them unlimited \"admin\"-ness throughout the system because there is no differentiation between a scoped \"admin\"-ness and a global \"admin\"-ness.\n\nI don't have a specific solution to advocate, but being an admin on *any* tenant simply *cannot* allow you to administer all of keystone.\n\n\nSteps to reproduce (from Horizon):\n\n1. User A (existing admin) creates Project B and User B.\n2. User A adds User B to Project B with the admin role on Project B.\n3. User B logs in and now has unlimited admin rights not only to view things in the dashboard, but to take actions like creating new projects and users, managing existing projects and users, etc.", 
            "date_created": "2012-03-29 23:02:07.034989+00:00", 
            "author": "https://api.launchpad.net/1.0/~gabriel-hurley"
        }, 
        {
            "content": "To clarify steps 1 & 2, I read this as two *different* relationships being created between User B and Project B.\r\n\r\nFirst, User B is created with a default tenant of Project B. <-- This behaves as expected.\r\nSecond, User B is explicitly granted the admin role on Project B. <-- This take effect globally, regardless.\r\n\r\nIn terms of the keystone CLI, this looks like:\r\n\r\n    keystone tenant-create --name=project-b\r\n    keystone user-create --name=user-b --pass=secret --tenant_id=<tenant id of project b>\r\n    keystone user-role-add --user=<user id of user b> --role=<role id of admin role> --tenant_id=<tenant id of project b>\r\n\r\nAfter creating User B, I then confirmed the bug by authenticating as User B for Project B, and then successfully listing all users and tenants in the system, and then subsequently deleting User A and Project A.", 
            "date_created": "2012-03-30 00:53:45.244519+00:00", 
            "author": "https://api.launchpad.net/1.0/~dolph"
        }, 
        {
            "content": "Perhaps the issue here is that we need a way to define adminness that extends beyond the tenant level.", 
            "date_created": "2012-03-30 01:12:23+00:00", 
            "author": "https://api.launchpad.net/1.0/~vishvananda"
        }, 
        {
            "content": "@vish: that's my thinking as well... it used to be \"global\" roles vs. \"scoped\" roles prior to the keystone redux. I missed the discussion that lead to removing that capacity (which would also be useful for the \"service\" users that got created), but I'm concerned that any such discussion may be too late for Essex now. :-/\n\nOne way or the other, there are definitely system-level capabilities which go beyond specific tenants that aren't currently being accounted for.", 
            "date_created": "2012-03-30 01:23:27.379315+00:00", 
            "author": "https://api.launchpad.net/1.0/~gabriel-hurley"
        }, 
        {
            "content": "Keystone only has two levels of access, admin and public, there are no actions that are scoped to tenants or users (as we discussed before, for example, a user cannot change her own password).  Ergo, if you are giving somebody a keystone admin role, that means they can do literally anything in keystone.\n\nThere are a variety of things that can be done to add more granular permissions, but right now this \"bug\" is invalid and is just a mis-expectation. Makes a perfectly fine feature request though: the feature request would be titled \"add more granular access control to keystone\" and would include a list of proposed requirements to perform certain kinds of actions, one example might be a tenant_admin that can do anything on the current tenant.", 
            "date_created": "2012-03-30 17:25:38.414281+00:00", 
            "author": "https://api.launchpad.net/1.0/~termie"
        }, 
        {
            "content": "If this is a mis-expectation than it's a bug on a completely misleading interface. If a role is assigned *on a tenant* the very reasonable expectation is that it has some connection *to that tenant*.\n\nI fail to see the purpose of connecting roles and tenants if they are not scoped.", 
            "date_created": "2012-03-30 19:48:19.434616+00:00", 
            "author": "https://api.launchpad.net/1.0/~gabriel-hurley"
        }, 
        {
            "content": "Sounds like a Keystone question, before becoming a Nova-specific issue. removing \"nova\" from the affected projects, feel free to add it back if anything needs to be done on Nova side.", 
            "date_created": "2012-06-07 09:45:37.467146+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "I believe this bug will be resolved with the proposed V3 API and the domains support there. Please review at https://docs.google.com/document/d/1s9C4EMxIZ55kZr62CKEC9ip7He_Q4_g1KRfSk9hY-Sg/edit?pli=1", 
            "date_created": "2012-06-07 16:20:33.242906+00:00", 
            "author": "https://api.launchpad.net/1.0/~heckj"
        }, 
        {
            "content": "With all due apologies, Thierry, this is absolutely a bug in the current Nova codebase. They have inconsistently implemented the scoping of objects as-is. Half the Nova resource APIs respect admin vs. non-admin tokens, half don't. That in and of itself has to be fixed independently of Keystone's future guidelines.\n\nKeystone's role in this is to shape what objects should be authorized, but it does not fix an incomplete implemntation as it stands currently.", 
            "date_created": "2012-06-13 23:07:34.012246+00:00", 
            "author": "https://api.launchpad.net/1.0/~gabriel-hurley"
        }, 
        {
            "content": "With my Horizon hat on, now, the current proposal on that table is this:\n\nAdd a splash message in the header that displays any time an \"admin\" user is in the Project Dashboard with a cautionary message indicating they are acting as an admin, and that there are several actions which they should be aware of as potentially causing significant problems. The splash message will be short, but will link to a longer documentation of the known problems and their origins.", 
            "date_created": "2012-06-13 23:10:41.943860+00:00", 
            "author": "https://api.launchpad.net/1.0/~gabriel-hurley"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/8588", 
            "date_created": "2012-06-15 00:52:51.553875+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/8588\nCommitted: http://github.com/openstack/horizon/commit/41307a354581f2e2b50dfa6a7d7b88cac9f642e1\nSubmitter: Jenkins\nBranch:    master\n\ncommit 41307a354581f2e2b50dfa6a7d7b88cac9f642e1\nAuthor: Gabriel Hurley <email address hidden>\nDate:   Thu Jun 14 17:50:42 2012 -0700\n\n    Adds warning banner for admin users in project dash.\n    \n    This is a bandaid until the underlying bugs in Nova get fixed.\n    \n    Fixes bug 968696.\n    \n    Change-Id: I735453482023dabc28069a4a8796aa43001f1891\n", 
            "date_created": "2012-06-21 22:24:34.142362+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "FYI, this is fixed for volumes snapshots and keypairs now.", 
            "date_created": "2012-08-16 20:46:56.966297+00:00", 
            "author": "https://api.launchpad.net/1.0/~vishvananda"
        }, 
        {
            "content": "Fix proposed to branch: stable/essex\nReview: https://review.openstack.org/11711", 
            "date_created": "2012-08-21 13:17:59.780053+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "This has been a well known and often discussed issue in keystone ... but it's still not totally resolved. I'm hoping that we've now laid sufficient groundwork (domains, policy, etc) to properly address this soon.", 
            "date_created": "2013-08-29 23:50:07.412580+00:00", 
            "author": "https://api.launchpad.net/1.0/~dolph"
        }, 
        {
            "content": "In general, it is desirable to have different scopes of admins. A cloud admin is needed to create and manage domains. A domain admin is needed to create and manage users and projects for a domain. A project admin is required to manage the resources created by members of a project. \n\nThe solution is likely to be a combination of changes to the policy file and establishing conventions for the \"home\" domain and project for different scopes of admin.\n", 
            "date_created": "2013-09-02 07:42:02.067158+00:00", 
            "author": "https://api.launchpad.net/1.0/~bryan-murray"
        }, 
        {
            "content": "Commit c7a5c6cf27a80ca50db9f1a1a74e8795eeefd9d1 is the start of addressing the issue:  a deployment can replace the default policy file with one that is more correctly specified.  However, just changing this outright will break most/all curent deployments.", 
            "date_created": "2013-10-07 17:10:04.211520+00:00", 
            "author": "https://api.launchpad.net/1.0/~ayoung"
        }, 
        {
            "content": "My suggestion to fix this issue\n\nThe biggest problem here is \u201croles name is global and keystone can no differentiate foo(Admin) vs bar(Admin)\u201c that is why Admin on a project become is admin on keystone resources (prject,users, group\u2026.) too.\n\nThis issue is mainly due to insufficiency of role data model which is nothing but just a name and there is no way we can define same role name for different services.\n\nSolution:\n====== \n1. Keystone should register itself in keystone along with other services and has given some name unique service_id. (e.g. keystone or identity=100 , NOVA=110 and Swift=120) (chicken and egg problem but can be done through system bootstrap)\n\n2. Role definition should be scoped to a service_id, so that every service can create their own role.(e.g. Admin(100), Admin(110) and Admin(120)).\n\n3. Role definition should have some info (may be a flag like for_non_project_use_only=true) to guide role assignment logic, so that certain role can/can\u2019t be assigned to a project. (e.g. Admin(100,true), Admin(110,false) and Admin(120,false))\n\n4. There should be validation in role assignment based on role definition\u2019s for_non_project_use_only filed, so that non_project roles can\u2019t be assigned to a project.\n\n5. Based on scoping (domain/project) Token response should return role list with service_id (e.g. [Admin(110), Admin(120)])\n\n6. Service scoped Auth (token) request should also be provided.\n\n7. For any keystone API calls, internal user credential (which is used to validate against policy) should have role with service_id (e.g. [Admin(110), Admin(120)])\n\n8. Keystone policy which considers role should also add \u201cservice_id\u201d in policy (e.g. \"identity:create_project\": [\"role:Admin and service_id:%(100)s\"])\n  8.1 Note: target.service_id should be always 100 because we are operating on identity API, that means the target is controlled by identity(100) service.\n  8.2 For identity:create_project API call if user have \u201cAdmin(110)\u201d (admin role scoped to a project) wd not satisfy \"role:Admin and service_id:%(100)s\" policy", 
            "date_created": "2013-11-19 23:35:43.444347+00:00", 
            "author": "https://api.launchpad.net/1.0/~arvind-tiwari"
        }, 
        {
            "content": "I mean \"role definition\" when I say \"role name\" in above comment", 
            "date_created": "2013-11-19 23:56:36.932272+00:00", 
            "author": "https://api.launchpad.net/1.0/~arvind-tiwari"
        }, 
        {
            "content": "It seems as if we have a number of problems here:\n\n1. Creating a role is partly implicit rather than fully explicit.\nCreating a role should comprise two steps, namely:\ni) Assigning permissions to the role\nii) Assigning users to the role\nBut in Keystone step i) is missing (at least when the admin role is created). The permissions seem to be predefined (ie. implicit). This is missing functionality in my opinion. Termie is partially correct in his posting of 2012-03-30 when he says \"add more granular access control to keystone\". I would go further, and say \"allow administrators to set access control permissions for roles in Keystone\"\n\n2. Roles have to be linked to tenants on creation. \nThis is a completely spurious linking and is not needed. It serves no functional purpose as I am aware and only complicates the model for no good reason. If you want to limit the permissions of a role to only take effect for a tenant (project) then add a new parameter to a role on creation, called its scope, and add the tenant (project) in the scope field.\n\n3. Role names are global and taken from the same flat namespace. \nRole names need to become hierarchical so that different entities can define their own roles, and the name of the role is concatenated with the name of the creating entity so that we still have global role names. Use the DNS as an exemplar for how roles should be named.", 
            "date_created": "2013-12-04 18:22:37.642045+00:00", 
            "author": "https://api.launchpad.net/1.0/~d-w-chadwick"
        }, 
        {
            "content": "David,\n\n1 i) is based on policy.json, and is effectively decentralized throughout openstack (although keystone has it's own policy.json), which I believe satisfies termie's request.\n\n2) Either way you're linking them to tenants/projects -- what does the alternative method buy you?", 
            "date_created": "2013-12-05 13:26:52.856565+00:00", 
            "author": "https://api.launchpad.net/1.0/~dolph"
        }, 
        {
            "content": "Hi Dolph\n\nso 1 i) now fixed through Keystone's policy file. That is good\n\n2). Roles do not need to be linked to tenants. The keystone admin role should not be as it should apply to all tenants. The scoping mechanism that we are discussing on the list will optionally scope a role to a domain, project or service at the decision of the creator. So this provides greater flexibility and is not mandatory, unlike the current mechanism which requires a project to be linked to the role on creation.", 
            "date_created": "2013-12-05 15:31:43.424878+00:00", 
            "author": "https://api.launchpad.net/1.0/~d-w-chadwick"
        }, 
        {
            "content": "David,\n\n2) I think the shortest path to resolve this issue is not to fundamentally change roles, but to use the current roles design and approach to assignments and simply extend them to assignments upon services:\n\n  https://blueprints.launchpad.net/keystone/+spec/service-scoped-tokens\n\nI believe that adding the scoping behavior of roles that you're describing would be compatible with the above, but I'd like to save that discussion for another context.", 
            "date_created": "2013-12-05 19:38:22.096395+00:00", 
            "author": "https://api.launchpad.net/1.0/~dolph"
        }, 
        {
            "content": "Dolph,\n\n2) I my opinion resources (services) should be abstracted from assignments otherwise your assignments data model will be impacted whenever we invent new resource. e.g. there was a proposal for resource groups and accommodate role assignment on  resource groups by changing the assignment data model.\n\n\n", 
            "date_created": "2013-12-05 20:48:00.457029+00:00", 
            "author": "https://api.launchpad.net/1.0/~arvind-tiwari"
        }, 
        {
            "content": "To further support \"resources (services) should be abstracted from assignments\" statement. Suppose we want to segregate admin-ness at endpoint level. (e.g. userA should have admin role on East but not West Nova endpoints). We can extend assignment to model this also but for how long. \n\n\n\n\n\n", 
            "date_created": "2013-12-05 20:55:25.539694+00:00", 
            "author": "https://api.launchpad.net/1.0/~arvind-tiwari"
        }, 
        {
            "content": "Cathing up on this bug, if I understand well, the initial issue was that there wasn't a way to grant admin-ness on a project without granting total control over all Openstack resources.\n\nI think that this can now be achieved by defining appropriate roles and policy rules.\n\nFor instance we can create a `project_admin` role that only allows a project admin to grant the `Member` role on his own project to other users, with the following rule:\n\"identity:create_grant\": \"role:project_admin and project_id:%(target.project.id)s and 'Member':%(target.role.name)s\"\n\nAlthough the last condition needs the following patch, allowing to check context variables against constants during the policy enforcement phase : https://review.openstack.org/#/c/68176/\n", 
            "date_created": "2014-02-04 10:15:46.506780+00:00", 
            "author": "https://api.launchpad.net/1.0/~florentflament"
        }, 
        {
            "content": "Florent: \"project_admin\" is a completely viable workaround today, but the issue remains that \"admin\" is still relatively magical compared to the way other roles are handled, as it does not respect the scope to which it's assigned.", 
            "date_created": "2014-02-07 18:38:30.224962+00:00", 
            "author": "https://api.launchpad.net/1.0/~dolph"
        }, 
        {
            "content": "I think there really needs to be at least three or four concepts here OOB: (I say 3 or 4 since 3 could just be a configuration of 2)\n\n1)  Tenant Admin - specific to that tenant only\n2)  Multi-tenant Admin - across a specific set of tenants\n3)  Global-Tenant Admin - Admin access to all tenants but not \"system\" actions (changing endpoints, making policy changes, etc.)\n4)  Global \"System\" Admin - God\n\nEven in file-system ACLs, there is adistinction between RWX and RWX + modify ACL\n\nI also think it would be a common use case to want to manage multiple tenants at once without having to re-authenticate to each one in turn, but that's a battle I'm sure I won't win.\n\n", 
            "date_created": "2014-06-19 17:43:10.371466+00:00", 
            "author": "https://api.launchpad.net/1.0/~jason-ob"
        }, 
        {
            "content": "Admin of one tenant can also create networks, routers and so on in other tenants, and take other actions. It might be a big risk for the security.\nSo I think it also affect the Neutron.", 
            "date_created": "2014-12-17 09:03:16.825564+00:00", 
            "author": "https://api.launchpad.net/1.0/~lisong-cruise"
        }, 
        {
            "content": "Please provide more information on what you suggest for neutron with respect to this bug.\n\nNeutron doesn't support RBAC at the moment, but it will not be added in the scope of one bugfix, i guess.", 
            "date_created": "2014-12-22 11:34:20.073324+00:00", 
            "author": "https://api.launchpad.net/1.0/~enikanorov"
        }, 
        {
            "content": "@Eugene Nikanorov (enikanorov)  \nHi Eugene, Thanks for your reply. \n\nIndeed, I just want to make sure that whether it will be safer that the admin of the tenant can only manage the network in their own tenants. Because, there is an issue that someone thought that HEAT should allow admin to create Networks in other tenants by HEAT. And we found the issue you are working on.\n\nSo we just want to make sure the trend that \"the admin scope will be limited in future\", or make sure \"Heat did not allow admin to create networks in other tenant will block any important Neutron functional case\".\nCould you help to give me some advise?\n\nAnd I have one question:\nIf the keystone fix the issue, admin will cannot create Networks in other tenant. Is that true?", 
            "date_created": "2014-12-23 02:29:58.916719+00:00", 
            "author": "https://api.launchpad.net/1.0/~lisong-cruise"
        }, 
        {
            "content": "@https://launchpad.net/~florentflament \n\nCan you please draw out the steps as to how the policy engine would work against this Rule .\n\nIt would be much better if you can draw out the step where to make that change for Tenant Admin Role.\n\nFYI , I created a tenant Admin Role and modified the policy.json for Keystone Service as per the same mentioned above.\n\n\"identity:create_grant\": \"role:project_admin and project_id:%(target.project.id)s and 'Member':%(target.role.name)s\"\n\nBut it's always still by default Role as \"Member\" for any user created as \"admin\" Project.\n\nCan you please clarify more on the workaround (steps would be great help). ", 
            "date_created": "2015-06-16 11:58:45.665728+00:00", 
            "author": "https://api.launchpad.net/1.0/~vineet-scm"
        }, 
        {
            "content": "IN order to close out this bug, all of the places that policy is enforced need to be scoped.  This is, I think possible today, with the4 exception of \"deleting resources for a deleted project\" but a patch has been proposed that should address that:\n\nhttps://review.openstack.org/#/c/203852/\n\nThe other places where global admin is required today are on calls like \"create cells\" in Nova, where the Cell abstraction is not scoped to any project.  There is an  admin project specified in the authtoken section of the config file,  and that can be used to scope anything that is endpoint-level instead of end-user-project level.\n\nMaking this happen will require rewriting the policy files for each of the services, to include Keystone, to make sure that the \"admin\" role is not used anywhere without also checking for a project scope.  As such, this bug affects each of the projects equally, but it is not a Keystone specific issue to solve.", 
            "date_created": "2015-07-21 23:48:47.148541+00:00", 
            "author": "https://api.launchpad.net/1.0/~ayoung"
        }, 
        {
            "content": "Note that fixing the scoping is dependent on \n\nhttps://bugs.launchpad.net/keystone/+bug/1476264\n\nAs that seems to be the only reason we currently need a global admin.\n\nFor other operations that do not have a scope on the object/API to check, policy should default to using the admin tenant configured when setting up the server in the authtoken section of the config file.\n\ndomain =default,\nproject = admin\n\nThat can be overridden in a production deployment, but matches what devstack currently does.", 
            "date_created": "2015-07-23 16:03:58.794201+00:00", 
            "author": "https://api.launchpad.net/1.0/~ayoung"
        }, 
        {
            "content": "I'd like to add a few lines to cinder to allow other fields to be considered when determining admin.  Currently this is only role.  Though not ideal, a combination of role/user/project and or domain can be used to satisfy the is_admin functionality currently used.", 
            "date_created": "2015-08-15 11:56:43.267553+00:00", 
            "author": "https://api.launchpad.net/1.0/~broskos"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/213501", 
            "date_created": "2015-08-16 12:42:04.480222+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/213501\nCommitted: https://git.openstack.org/cgit/openstack/cinder/commit/?id=9840721b51671296816d681dbd4b9afe221f68b4\nSubmitter: Jenkins\nBranch:    master\n\ncommit 9840721b51671296816d681dbd4b9afe221f68b4\nAuthor: Brent Roskos <email address hidden>\nDate:   Sun Aug 16 08:41:48 2015 -0400\n\n    adds user_id to check_is_admin\n    \n    A small tactical update to allow cinder to consider user_id\n    when checking for admin.\n    \n    This is needed in the field until the larger changes around\n    admin scoping are completed. Checking for role only is not\n    sufficient in a multi-domain configuration.\n    \n    juno-backport-potential\n    kilo-backport-potential\n    \n    closes-bug: 968696\n    \n    Change-Id: I0cb99186bd833c4c32964490c4bc6da9ad42d320\n", 
            "date_created": "2015-08-27 11:36:10.877863+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Fix proposed to branch: stable/juno\nReview: https://review.openstack.org/217695", 
            "date_created": "2015-08-27 12:54:18.169691+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Fix proposed to branch: stable/kilo\nReview: https://review.openstack.org/217728", 
            "date_created": "2015-08-27 14:18:17.265989+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Proposed solution:\n\n1. Add a config value ADMIN_PROJECT_ID\n2.  In token creation, if ADMIN_PROJECT_ID is not None:  only add the admin role to the token if the id of the scoped project == ADMIN_PROJECT_ID\n", 
            "date_created": "2015-10-11 18:37:00.145106+00:00", 
            "author": "https://api.launchpad.net/1.0/~ayoung"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/233480", 
            "date_created": "2015-10-12 03:19:13.174330+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "How's the proposed solution solving the problem where 'admin' role is admin for everybody? Can we separate Nova admin from Cinder admin?\n", 
            "date_created": "2015-10-12 04:34:27.933620+00:00", 
            "author": "https://api.launchpad.net/1.0/~guang-yee"
        }, 
        {
            "content": "Guang, you very easily could do that with custom policy:  Have a separate project for Nova and for Cinder, and list both of them in the \"admin_project_ids\" in Keystone.  Communicating the project name or ID with Nova and CInder is out of scope for the current mechanisms.", 
            "date_created": "2015-10-14 22:20:18.498103+00:00", 
            "author": "https://api.launchpad.net/1.0/~ayoung"
        }, 
        {
            "content": "Change abandoned by ayoung (<email address hidden>) on branch: master\nReview: https://review.openstack.org/233480\nReason: The Admin project needs to be added to the  data used for policy enforcement.  Just excluding projects will not work with existing APIs", 
            "date_created": "2015-10-28 05:10:43.124516+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/240719", 
            "date_created": "2015-11-01 16:38:14.466841+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Assigning to Kevin to look at. He did the RBAC work for networks in Liberty. Perhaps expanding the RBAC model to other Neutron resources would address what this bug is looking at.", 
            "date_created": "2015-11-02 21:14:39.968842+00:00", 
            "author": "https://api.launchpad.net/1.0/~mestery"
        }, 
        {
            "content": "So, a tweak on the approach proposed in Comment 39:  We are still going to have an admin project specified in the Keystone config. Instead of limiting tokens with the Admin role to that project, we are going to add an extra value to tokes that are scoped to that project:  is_admin_project=True. \n\nThis addresses  the fact that many APIS require Admin scoped to projects, and will handle the multiple roles for managing service or endpoint specific admins as well.", 
            "date_created": "2015-11-04 02:38:50.113535+00:00", 
            "author": "https://api.launchpad.net/1.0/~ayoung"
        }, 
        {
            "content": "Change abandoned by Alan Pevec (<email address hidden>) on branch: stable/juno\nReview: https://review.openstack.org/217695", 
            "date_created": "2015-11-13 19:27:55.346404+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "This isn't related to the RBAC for networks feature in Neutron so I removed that tag. I don't have time to look at this on the Neutron side at the moment so I will un-assign myself for now.", 
            "date_created": "2015-11-20 09:44:45.237831+00:00", 
            "author": "https://api.launchpad.net/1.0/~kevinbenton"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/240719\nCommitted: https://git.openstack.org/cgit/openstack/keystone/commit/?id=e7023697a884759716d0a01605825a3af90d4db6\nSubmitter: Jenkins\nBranch:    master\n\ncommit e7023697a884759716d0a01605825a3af90d4db6\nAuthor: Adam Young <email address hidden>\nDate:   Sun Oct 11 23:15:52 2015 -0400\n\n    set `is_admin` on tokens for admin project\n    \n    Adds two new configuration value:\n    \n    admin_project_name\n    admin_project_domain_name\n    \n    If both values are set, and tokens requested for\n    projects (only, not domains) that match both will have an\n    additional value in them;  `is_admin_project=true`\n    \n    DocImpact\n    -- Configuration changes need documentation\n    APIImpact\n    -- Adds optional return values in token validation calls\n    SecurityImpact\n    -- Should be helpful in making access control decisions\n    \n    Implements: blueprint is-admin-project\n    Partial-Bug: #968696\n    \n    Change-Id: Ic9cf9862739381a30130b4be87075f726736ff88\n", 
            "date_created": "2015-12-05 00:37:41.520651+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "With the above commit, we have the framework to start fixing this bug.  However,  we have to deal with existing deployments that expect the existing behavior.\n\nEach of the projects needs a new version of the policy.json file that reflects the current logic, but with the added check for \"is_admin_project\" performed against the token.  The deployment mechanism (devstack, puppet etc)  needs to switch over to using the new version of the file, and also to configure the values in the Keystone config file that populate that value on tokens for the appropriate projects.\n\nFor exiting deployments, there will be some users that had admin on other-than-admi projects and the site administrators need to determine how to deal with this.  Are they going to get admin on the admin project, or will they be limited to operations on the existing set of projects that no longer allow the global admin operations.", 
            "date_created": "2015-12-14 17:16:04.984447+00:00", 
            "author": "https://api.launchpad.net/1.0/~ayoung"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/257636", 
            "date_created": "2015-12-15 00:55:40.747218+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/240720\nCommitted: https://git.openstack.org/cgit/openstack/keystone/commit/?id=9804081a80ef815a86407a64f967986a7bf9ba25\nSubmitter: Jenkins\nBranch:    master\n\ncommit 9804081a80ef815a86407a64f967986a7bf9ba25\nAuthor: Adam Young <email address hidden>\nDate:   Sun Nov 1 11:55:45 2015 -0500\n\n    Updated Cloudsample\n    \n    Uses configuration options to determine if a token is for the admin\n    project and should be granted admin privileges.\n    \n    Closes-Bug: 968696\n    \n    Change-Id: Ib23452e171dc90115c77fa5a4b9dc4649054eb0e\n", 
            "date_created": "2015-12-15 14:01:55.269057+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Change abandoned by Sean McGinnis (<email address hidden>) on branch: stable/kilo\nReview: https://review.openstack.org/217728\nReason: This review is > 4 weeks without comment and currently blocked by a core reviewer with a -2. We are abandoning this for now. Feel free to reactivate the review by pressing the restore button and contacting the reviewer with the -2 on this review to ensure you address their concerns.", 
            "date_created": "2015-12-22 19:55:17.923520+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "This issue was fixed in the openstack/keystone 9.0.0.0b2 development milestone.", 
            "date_created": "2016-01-21 13:26:35.579464+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "I feel like global admin is something we're not really treating as a bug, but as a new feature that needs to be addressed. Moving to wishlist / feature state for nova for this reason. ", 
            "date_created": "2016-02-19 21:05:36.734734+00:00", 
            "author": "https://api.launchpad.net/1.0/~sdague"
        }, 
        {
            "content": "Please do not downgrade the importance of this bug.  With Nova ignoring it, it puts all of the other projects that use the Access Info into a position where they are locked in with the global admin.\n\nWork is actively underway to fix this.", 
            "date_created": "2016-03-28 14:20:05.130608+00:00", 
            "author": "https://api.launchpad.net/1.0/~ayoung"
        }, 
        {
            "content": "I have a question about this specific feature (use of the is_project_admin flag in the tokens), and most of all the ability to leverage that in Keystone policy and the other service policy files.\n\nI\u2019m running this build:\nopenstack-keystone-9.0.0.0b4-0.20160304193251.9d6ab5d.el7.centos.noarch\n\nIn my keystone policy file, I did this:\n\n  \"admin_required\": \"role:admin and is_admin_project\",\n   \u2026.\n  \"identity:list_domains\": \"rule:admin_required\",\n\nI set up the two variables (admin_project_domain_name and admin_project_name) in keystone.conf, and I can obtain  a token for a user in the admin project.   In the token response, I can see the is_admin_project: true flag which is good.\n\nSomehow though, I get 403 when I try a get /v3/domains with that token.\n\nI\u2019m just looking to see if the code for the policies to leverage that flag is already in in build 9.0.0.0b4?\n\nFrom the discussion above, it appears policy changes in the other services has not been merged yet so I'm sticking to just experimenting with Keystone's apis themselves first.\n", 
            "date_created": "2016-03-30 17:40:50.773294+00:00", 
            "author": "https://api.launchpad.net/1.0/~pentatonic"
        }, 
        {
            "content": "Same behavior with openstack-keystone-9.0.0.0-0.20160328140958.6639463.el7.centos.noarch", 
            "date_created": "2016-03-30 18:48:15.348770+00:00", 
            "author": "https://api.launchpad.net/1.0/~pentatonic"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/307648", 
            "date_created": "2016-04-19 09:01:46.359468+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Change abandoned by Sharat Sharma (<email address hidden>) on branch: master\nReview: https://review.openstack.org/307648", 
            "date_created": "2016-05-24 09:38:32.358329+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "CONFIRMED FOR: NEWTON\n\nAccording to Adam Young: http://lists.openstack.org/pipermail/openstack-dev/2016-June/097887.html", 
            "date_created": "2016-06-22 07:19:29.171453+00:00", 
            "author": "https://api.launchpad.net/1.0/~mzoeller"
        }, 
        {
            "content": "Note that the work in this bug is required to enforce policy as required by this one.  \n\nhttps://bugs.launchpad.net/neutron/+bug/1602081", 
            "date_created": "2016-09-30 03:59:37.085583+00:00", 
            "author": "https://api.launchpad.net/1.0/~ayoung"
        }, 
        {
            "content": "Fix proposed to branch: stable/mitaka\nReview: https://review.openstack.org/380733", 
            "date_created": "2016-10-01 10:27:39.355619+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Change abandoned by abdul nizamuddin (<email address hidden>) on branch: stable/mitaka\nReview: https://review.openstack.org/380733", 
            "date_created": "2016-10-01 10:41:31.604922+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Change abandoned by abdul nizamuddin (<email address hidden>) on branch: stable/mitaka\nReview: https://review.openstack.org/380733", 
            "date_created": "2016-10-01 11:11:59.382085+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/384148", 
            "date_created": "2016-10-09 03:13:08.793578+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/384642", 
            "date_created": "2016-10-10 17:43:27.245429+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reopening the Keystone one as the fix does not work for default policy, which is what most people use.", 
            "date_created": "2016-10-11 02:58:01.609363+00:00", 
            "author": "https://api.launchpad.net/1.0/~ayoung"
        }, 
        {
            "content": "Untagging this from keystone m2 milestone since there is still work to be done. Adam, is there a new target you're shooting for? ", 
            "date_created": "2016-10-11 14:42:56.343263+00:00", 
            "author": "https://api.launchpad.net/1.0/~lbragstad"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/384642\nCommitted: https://git.openstack.org/cgit/openstack/cinder/commit/?id=da0ea57d7e9b8254a877009e77f412684cce3754\nSubmitter: Jenkins\nBranch:    master\n\ncommit da0ea57d7e9b8254a877009e77f412684cce3754\nAuthor: Adam Young <email address hidden>\nDate:   Mon Oct 10 13:41:52 2016 -0400\n\n    Admin API policy enforcement contingent on is_admin_project\n    \n    In order for a user with the admin role to be able to perform\n    administrative actions, the role must be assigned to a project\n    that is deemed the \"admin\" project in the Keystone server. This\n    prevents someone being assigned admin on some random project\n    from being admin everywhere.\n    \n    Change-Id: Ic4294cc1746702c345259c64bad1e20675a7d9ab\n    Closes-Bug: 968696\n", 
            "date_created": "2016-12-11 23:12:30.094924+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "This issue was fixed in the openstack/cinder 10.0.0.0b2 development milestone.", 
            "date_created": "2016-12-15 16:00:18.753998+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "I'm not sure if this is still the best place to address the issue, but despite having patched my Newton based lab with commits ca73d296bd5a16435dd35cd0818f4b0a16bc2d02 and ef48072d94f780ebaacee8c3ddf02a68193fa74d (\"Fix cloud_admin rule and ensure only project tokens can be cloud admin\"), a domain scoped token is still marked as \"is_admin_project=True\". This has the effect that some projects treat a domain scoped token with the admin role on any given domain as Cloud Admin. This is the case in Neutron for instance.\n\nThis happens because when the token is initially created the function that populates the is_admin_project property doesn't set it since it's not a project token. The problem is that \"is_admin_project\" then defaults to true later on (to support legacy behavior). The \"is_admin_project\" property function that was added to the Token class in the previously mentioned patch never seems to get called either. \n\nMaybe I'm wrong but a quick glance of Ocata code doesn't make me think that this has changed in that release.\n\nThe following quick patch fixes it for me: \n\n--- keystone/token/providers/common.py.orig\t2017-03-01 21:09:57.221278528 +0000\n+++ keystone/token/providers/common.py\t2017-03-01 21:09:51.134244716 +0000\n@@ -315,11 +315,15 @@\n         if not (admin_project_name and admin_project_domain_name):\n             return  # admin project not enabled\n \n-        project = token_data['project']\n-\n-        token_data['is_admin_project'] = (\n-            project['name'] == admin_project_name and\n-            project['domain']['name'] == admin_project_domain_name)\n+        # Since 'is_admin_project' only supported for project scoped tokens,\n+        # return False if not project scoped\n+        if 'project' in token_data:\n+            project = token_data['project']\n+            token_data['is_admin_project'] = (\n+                project['name'] == admin_project_name and\n+                project['domain']['name'] == admin_project_domain_name)\n+        else:\n+            token_data['is_admin_project'] = False\n \n     def _get_roles_for_user(self, user_id, domain_id, project_id):\n         roles = []\n@@ -576,8 +580,7 @@\n             token_data['bind'] = bind\n \n         self._populate_scope(token_data, domain_id, project_id)\n-        if token_data.get('project'):\n-            self._populate_is_admin_project(token_data)\n+        self._populate_is_admin_project(token_data)\n         self._populate_user(token_data, user_id, trust)\n         self._populate_roles(token_data, user_id, domain_id, project_id, trust,\n                              access_token)\n\n", 
            "date_created": "2017-03-01 21:29:15.335101+00:00", 
            "author": "https://api.launchpad.net/1.0/~marc-w-heckmann"
        }, 
        {
            "content": "--- keystone/token/providers/common.py.orig\t2017-03-01 21:09:57.221278528 +0000\n+++ keystone/token/providers/common.py\t2017-03-01 21:09:51.134244716 +0000\n@@ -315,11 +315,15 @@\n         if not (admin_project_name and admin_project_domain_name):\n             return  # admin project not enabled\n \n-        project = token_data['project']\n-\n-        token_data['is_admin_project'] = (\n-            project['name'] == admin_project_name and\n-            project['domain']['name'] == admin_project_domain_name)\n+        # Since 'is_admin_project' only supported for project scoped tokens,\n+        # return False if not project scoped\n+        if 'project' in token_data:\n+            project = token_data['project']\n+            token_data['is_admin_project'] = (\n+                project['name'] == admin_project_name and\n+                project['domain']['name'] == admin_project_domain_name)\n+        else:\n+            token_data['is_admin_project'] = False\n \n     def _get_roles_for_user(self, user_id, domain_id, project_id):\n         roles = []\n@@ -576,8 +580,7 @@\n             token_data['bind'] = bind\n \n         self._populate_scope(token_data, domain_id, project_id)\n-        if token_data.get('project'):\n-            self._populate_is_admin_project(token_data)\n+        self._populate_is_admin_project(token_data)\n         self._populate_user(token_data, user_id, trust)\n         self._populate_roles(token_data, user_id, domain_id, project_id, trust,\n                              access_token)\n", 
            "date_created": "2017-03-01 21:36:05.806237+00:00", 
            "author": "https://api.launchpad.net/1.0/~marc-w-heckmann"
        }, 
        {
            "content": "", 
            "date_created": "2017-03-01 21:42:02.694288+00:00", 
            "author": "https://api.launchpad.net/1.0/~marc-w-heckmann"
        }, 
        {
            "content": "Sorry for patch formatting is my previous comment. Seems Launchpad mangles spaces. Patch attached instead.\n\nAnother issue which is orthogonal to the previous one is that despite having added the following patch to Neutron, 2e621eeb1cdfae5ceb3c83eb6befcb954f0b6cec(*) (\"Use to_policy_values for policy enforcement\"), Neutron completely ignores the \"is_admin_project\" value set in the token. \n\nThis is because neutron-server builds the request context differently than other projects. Instead of using \"from_environ\" in oslo_context, it does it itself in it's \"NeutronKeystoneContext\" class.\n\nThe fix is to tell it to look at the X_IS_ADMIN_PROJECT header. \n\nPatch attached. \n\n* https://github.com/openstack/neutron/commit/2e621eeb1cdfae5ceb3c83eb6befcb954f0b6cec", 
            "date_created": "2017-03-01 21:58:25.499862+00:00", 
            "author": "https://api.launchpad.net/1.0/~marc-w-heckmann"
        }, 
        {
            "content": "The Neutron bug bug above is likely addressed by: https://review.openstack.org/#/c/448538/", 
            "date_created": "2017-05-03 19:34:15.270042+00:00", 
            "author": "https://api.launchpad.net/1.0/~marc-w-heckmann"
        }, 
        {
            "content": "Comment #72 should be addressed by https://review.openstack.org/#/c/438035/", 
            "date_created": "2017-05-03 20:07:48.188823+00:00", 
            "author": "https://api.launchpad.net/1.0/~marc-w-heckmann"
        }, 
        {
            "content": "Marc FYI, the change you linked in comment 77 was a mistake and is in the process of being reverted.", 
            "date_created": "2017-05-03 20:46:01.218234+00:00", 
            "author": "https://api.launchpad.net/1.0/~edmondsw"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/464009", 
            "date_created": "2017-05-11 14:46:41.354752+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/464009\nCommitted: https://git.openstack.org/cgit/openstack/keystone/commit/?id=4a82ab9065a659bbcb838240da113a0509f651aa\nSubmitter: Jenkins\nBranch:    master\n\ncommit 4a82ab9065a659bbcb838240da113a0509f651aa\nAuthor: Gage Hugo <email address hidden>\nDate:   Thu May 11 10:34:26 2017 -0400\n\n    Revert change 438035 is_admin_project default\n    \n    This change reverts having is_admin_project default to False [0]\n    since we currently need to have it revert to True in order to\n    account for anyone who has not configured an admin project. This\n    will be truely fixed at a later date.\n    \n    This also adds comments from another change [1] which clarifies\n    the for why this should not be changed at this moment.\n    \n    [0] https://review.openstack.org/#/c/438035/\n    [1] https://review.openstack.org/#/c/257636/\n    \n    Partial-Bug: 968696\n    \n    Change-Id: I039bfc8a41d43634ebad545725b9188a82afb990\n    Co-Authored-By: Adam Young <email address hidden>\n    Co-Authored-By: Matthew Edmonds <email address hidden>\n", 
            "date_created": "2017-05-14 17:13:51.652438+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "setting this to \"Wishlist\" Nova is, essentially, blocking fixing this issue for all the projects in OpenStack.", 
            "date_created": "2017-05-22 20:07:50.807028+00:00", 
            "author": "https://api.launchpad.net/1.0/~ayoung"
        }, 
        {
            "content": "Just catching up on this bug since I wasn't subscribed to emails.\n\nSince the patch mentioned in comment 77 was reverted, am I wrong to believe that the patch I attached in comment 74 is still required?", 
            "date_created": "2017-05-25 20:05:41.003539+00:00", 
            "author": "https://api.launchpad.net/1.0/~marc-w-heckmann"
        }
    ]
}
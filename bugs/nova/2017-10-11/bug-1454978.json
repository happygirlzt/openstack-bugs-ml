{
    "status": "Invalid", 
    "last_updated": "2016-04-18 18:20:30.980692+00:00", 
    "description": "iSCSI multipath has performance issue on volume detachment when multiple LUNs are exposed via single target(iqn).\r\n\r\n1. We are using VNX as cinder backends. VNX is exposing multiple LUNs via a iqn. And a LUN is exposed via different iqns for multipathing. Libvirt driver is used in nova. And the virt_type is kvm.\r\n\r\n2. After we attached 100 volumes to VMs, and then do volume detachment in batch, we noticed that thousands of \"multipath -ll <mp_id>\" are executed per a volume detachement. In out enviornment, a \"multipath -ll <mp_id>\" takes about 0.2s, the performance is bad.\r\n\r\n3. Why there are so many \"multipath -ll <mp-id>\" triggerred?\r\nIn order to find all pathes of a multipath device, the code went through all the devices under /dev/disk/by-path which used the same iqn and execute \u2018multipath \u2013ll\u2019 on each of them to get the multipath id. When the multipath id of a device is the same as the volume to be detached. Then it is a path of the volume. When each iqn only expose one LUN, this code do not expose performance issue. However, when multiple luns are expose via a single iqn, the problems comes out.\r\n\r\nAssuming taht we have n LUNs attached. Each LUN has m iqns for multipathing, then there will be m*n devices under /dev/disk/by-path. And they are sharing m iqns. Then,\r\n    -- Code line 623- 644 will trigger o(n*m) times of \"multipath -ll <mp-id>\"\r\n    -- Code line 648-649 will trigger o((n*m)^2) times of \"multipath -ll <mp-id>\"\r\n\r\nnova/nova/virt/libvirt/volume.py\r\nLibvirtISCSIVolumeDriver._disconnect_volume_multipath_iscsi\r\n\r\n 618 out = self._run_iscsiadm_discover(iscsi_properties)\r\n 619\r\n 620 # Extract targets for the current multipath device.\r\n 621 ips_iqns = []\r\n 622 entries = self._get_iscsi_devices()\r\n 623 for ip, iqn in self._get_target_portals_from_iscsiadm_output(out):\r\n 624 ip_iqn = \"%s-iscsi-%s\" % (ip.split(\",\")[0], iqn)\r\n 625 for entry in entries:\r\n 626 entry_ip_iqn = entry.split(\"-lun-\")[0]\r\n 627 if entry_ip_iqn[:3] == \"ip-\":\r\n 628 entry_ip_iqn = entry_ip_iqn[3:]\r\n 629 elif entry_ip_iqn[:4] == \"pci-\":\r\n 630 # Look at an offset of len('pci-0000:00:00.0')\r\n 631 offset = entry_ip_iqn.find(\"ip-\", 16, 21)\r\n 632 entry_ip_iqn = entry_ip_iqn[(offset + 3):]\r\n 633 if (ip_iqn != entry_ip_iqn):\r\n 634 continue\r\n 635 entry_real_path = os.path.realpath(\"/dev/disk/by-path/%s\" %\r\n 636 entry)\r\n 637 entry_mpdev = self._get_multipath_device_name(entry_real_path)\r\n 638 if entry_mpdev == multipath_device:\r\n 639 ips_iqns.append([ip, iqn])\r\n 640 break\r\n 641\r\n 642 if not devices:\r\n 643 # disconnect if no other multipath devices\r\n 644 self._disconnect_mpath(iscsi_properties, ips_iqns)\r\n 645 return\r\n 646\r\n 647 # Get a target for all other multipath devices\r\n 648 other_iqns = [self._get_multipath_iqn(device)\r\n 649 for device in devices]\r\n\r\n====================Code version =====================\r\nstack@openstack-performance:~/tina/nova_iscsi_mp/nova$ git log -1\r\ncommit f4504f3575b35ec14390b4b678e441fcf953f47b\r\nMerge: 3f21f60 5fbd852\r\nAuthor: Jenkins <email address hidden>\r\nDate: Tue May 12 22:46:43 2015 +0000\r\n\r\n    Merge \"Remove db layer hard-code permission checks for network_get_all_by_host\"", 
    "tags": [], 
    "importance": "Undecided", 
    "heat": 30, 
    "link": "https://bugs.launchpad.net/nova/+bug/1454978", 
    "owner": "https://api.launchpad.net/1.0/~tina-tang", 
    "id": 1454978, 
    "index": 5537, 
    "created": "2015-05-14 07:26:05.451226+00:00", 
    "title": "[iSCSI Multipath]Thousands of multipath -ll <mp-id > are executed during volume detachment when multiple LUNs are exposed on a same target", 
    "comments": [
        {
            "content": "iSCSI multipath has performance issue on volume detachment when multiple LUNs are exposed via single target(iqn).\n1. We am using VNX as cinder backends. VNX is exposing multiple LUNs via a iqn. And a LUN is exposed via different iqns for multipathing. Libvirt driver is used in nova. And the virt_type is kvm.\n\n2. After we attached 100 volumes to VMs, and then do volume detachment in batch, we noticed that thousands of \"multipath -ll <mp_id>\" are executed per a volume detachement. In out enviornment, a \"multipath -ll <mp_id>\" takes about 0.2s, the performance is bad.\n\n3. Why there are so many \"multipath -ll <mp-id>\" triggerred?\nIn order to find all pathes of a multipath device, the code went through all the devices under /dev/disk/by-path which used the same iqn and execute \u2018multipath \u2013ll\u2019 on each of them to get the multipath id. When the multipath id of a device is the same as the volume to be detached. Then it is a path of the volume. When each iqn only expose one LUN, this code do not expose performance issue. However, when multiple luns are expose via a single iqn, the problems comes out. \n\nAssuming taht we have n LUNs attached. Each LUN has m iqns for multipathing, then there will be m*n devices under /dev/disk/by-path. And they are sharing m iqns. Then,\n    --   Code line 623- 644 will trigger o(n*m) times of \"multipath -ll <mp-id>\" \n    --   Code line 648-649 will trigger o(!m) times of \"multipath -ll <mp-id>\"\n\nnova/nova/virt/libvirt/volume.py\nLibvirtISCSIVolumeDriver._disconnect_volume_multipath_iscsi\n\n 618         out = self._run_iscsiadm_discover(iscsi_properties)\n 619\n 620         # Extract targets for the current multipath device.\n 621         ips_iqns = []\n 622         entries = self._get_iscsi_devices()\n 623         for ip, iqn in self._get_target_portals_from_iscsiadm_output(out):\n 624             ip_iqn = \"%s-iscsi-%s\" % (ip.split(\",\")[0], iqn)\n 625             for entry in entries:\n 626                 entry_ip_iqn = entry.split(\"-lun-\")[0]\n 627                 if entry_ip_iqn[:3] == \"ip-\":\n 628                     entry_ip_iqn = entry_ip_iqn[3:]\n 629                 elif entry_ip_iqn[:4] == \"pci-\":\n 630                     # Look at an offset of len('pci-0000:00:00.0')\n 631                     offset = entry_ip_iqn.find(\"ip-\", 16, 21)\n 632                     entry_ip_iqn = entry_ip_iqn[(offset + 3):]\n 633                 if (ip_iqn != entry_ip_iqn):\n 634                     continue\n 635                 entry_real_path = os.path.realpath(\"/dev/disk/by-path/%s\" %\n 636                                                    entry)\n 637                 entry_mpdev = self._get_multipath_device_name(entry_real_path)\n 638                 if entry_mpdev == multipath_device:\n 639                     ips_iqns.append([ip, iqn])\n 640                     break\n 641\n 642         if not devices:\n 643             # disconnect if no other multipath devices\n 644             self._disconnect_mpath(iscsi_properties, ips_iqns)\n 645             return\n 646\n 647         # Get a target for all other multipath devices\n 648         other_iqns = [self._get_multipath_iqn(device)\n 649                       for device in devices]\n\n\n\n \n====================Code version =====================\nstack@openstack-performance:~/tina/nova_iscsi_mp/nova$ git log -1\ncommit f4504f3575b35ec14390b4b678e441fcf953f47b\nMerge: 3f21f60 5fbd852\nAuthor: Jenkins <email address hidden>\nDate:   Tue May 12 22:46:43 2015 +0000\n\n    Merge \"Remove db layer hard-code permission checks for network_get_all_by_host\"", 
            "date_created": "2015-05-14 07:26:05.451226+00:00", 
            "author": "https://api.launchpad.net/1.0/~tina-tang"
        }, 
        {
            "content": "The code logic can be improved:\r\n\r\n1. Improve the way to find all pathes for a multipath device\r\n   The multipath \u2013ll  <mp-id>will give out the device name of each path. (sdd, sdf, sdh for below example)\r\n   #sudo multipath \u2013ll  3600601602ba03400278103ca73f8e411\r\n   3600601602ba03400278103ca73f8e411 dm-1 DGC,VRAID\r\n   size=3.0G features='1 queue_if_no_path' hwhandler='1 alua' wp=rw\r\n   |-+- policy='round-robin 0' prio=130 status=active\r\n   | |- 44:0:0:23  sdd 8:48  active ready  running\r\n   | `- 45:0:0:23  sdf 8:80  active ready  running\r\n   `-+- policy='round-robin 0' prio=10 status=enabled\r\n     `- 46:0:0:23  sdh 8:112 active ready  running\r\n \r\n   Go through each devices under /dev/disk/py-path, as long as the device link to the device name of the multipath device<mp-id>. Then it is a path of the volume. No additional multipath \u2013ll is needed.\r\n   # ls -l /dev/disk/by-path\r\n   total 0\r\n   ip-192.168.3.50:3260-iscsi-<iqna>-lun-0 -> ../../sdg\r\n   ip-192.168.3.50:3260-iscsi-<iqna>-lun-23 -> ../../sdh\r\n   ip-192.168.3.51:3260-iscsi-<iqnb>-lun-0 -> ../../sdc\r\n   ip-192.168.3.51:3260-iscsi-<iqnb>-lun-23 -> ../../sdd\r\n   ip-192.168.4.51:3260-iscsi-<iqnc>-lun-0 -> ../../sde\r\n   ip-192.168.4.51:3260-iscsi-<iqnc>-lun-23 -> ../../sdf\r\n\r\n2. In order check whehter a iqn is used by other devices, we do not need to find iqns used by all the other devices. But just mark the iqn as used once we find it has been used by a certain device, and return as soon as possible.", 
            "date_created": "2015-05-14 07:38:54.375132+00:00", 
            "author": "https://api.launchpad.net/1.0/~tina-tang"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/184005", 
            "date_created": "2015-05-18 09:42:13.230104+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Change abandoned by Michael Still (<email address hidden>) on branch: master\nReview: https://review.openstack.org/184005\nReason: Sounds like we're going with os.brick here.", 
            "date_created": "2015-10-15 06:33:55.554284+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Can this be tried against liberty or mitaka nova when we're using the os-brick library which had other fixes for multipath issues than did nova?", 
            "date_created": "2016-01-22 21:33:49.091821+00:00", 
            "author": "https://api.launchpad.net/1.0/~mriedem"
        }, 
        {
            "content": "Moving to invalid as this should no longer reproduce against Liberty or Mitaka after the move os-brick. Please reopen and reassign to os-brick if this issue persists. ", 
            "date_created": "2016-04-18 10:03:17.784618+00:00", 
            "author": "https://api.launchpad.net/1.0/~lyarwood"
        }, 
        {
            "content": "While I do not know the accepted conventions for OpenStack bugs, calling this \"invalid\" seems wrong.\n\nThis was a severe issue up until Liberty. You are right in that the problem does not exist in Liberty (and later).\n\nI believe there was an exceptionally large patch in the last update to Kilo, specifically to address a small zoo of bugs in this area. Somehow it seems this bug report was missed. While I have not yet verified, I suspect this bug was fixed in the last Kilo update.", 
            "date_created": "2016-04-18 18:20:30.458783+00:00", 
            "author": "https://api.launchpad.net/1.0/~preston-bannister"
        }
    ]
}
{
    "status": "Fix Released", 
    "last_updated": "2013-04-04 11:22:49.938037+00:00", 
    "description": "It seems silly to have a statically configured fixed_range *AND* require people to set up networks with nova-manage. AFAICT, it's used exclusively to set up NAT rules. We could just do that on-demand.", 
    "tags": [], 
    "importance": "Low", 
    "heat": 40, 
    "link": "https://bugs.launchpad.net/nova/+bug/741626", 
    "owner": "https://api.launchpad.net/1.0/~mathrock", 
    "id": 741626, 
    "index": 5036, 
    "created": "2011-03-24 11:21:42.257044+00:00", 
    "title": "FLAGS.fixed_range is silly", 
    "comments": [
        {
            "content": "It seems silly to have a statically configured fixed_range *AND* require people to set up networks with nova-manage. AFAICT, it's used exclusively to set up NAT rules. We could just do that on-demand.", 
            "date_created": "2011-03-24 11:21:42.257044+00:00", 
            "author": "https://api.launchpad.net/1.0/~soren"
        }, 
        {
            "content": "There is an additional issue related to fixed_range flag. It's not possible to safely create an environment which doesn't fit completely into one block. If for whatever reason, available range is supposed to include:\n10.1.0.0 -- 10.1.3.255\nthen fixed range will have to be set to 10.1.0.0/22 - including the 10.1.4.0/24 range and setting up a natting rule for it. This might affect existing traffic.\n\nSetting up on-demand iptable rules per project range would be preferred.", 
            "date_created": "2011-07-15 14:09:01.862365+00:00", 
            "author": "https://api.launchpad.net/1.0/~viraptor-gmail"
        }, 
        {
            "content": "I think it would be nice to take care of this bug as it would be fairly simple to fix and offer much more flexibility in allowing for non-contiguous fixed_ranges.  In order to be backwards compatible with CONF.fixed_range I was thinking of adding a new config option, say CONF.use_dynamic_fixed_range, which if set to True would figure out the CIDRs to set up for NAT by looking at the networks on the current network host and then setting up the NATs for each.  It would default to False such that existing behavior would not change. Does this sound worthwhile?  Is this something that would be eligible for FFE for Grizzly or is this too much to be allowed for FFE?", 
            "date_created": "2013-03-03 22:21:47.213356+00:00", 
            "author": "https://api.launchpad.net/1.0/~mathrock"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/23787", 
            "date_created": "2013-03-07 05:41:36.660344+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/23787\nCommitted: http://github.com/openstack/nova/commit/26440ae2cd4c8ffe44beecb6bb0cce19cb43bb7b\nSubmitter: Jenkins\nBranch:    master\n\ncommit 26440ae2cd4c8ffe44beecb6bb0cce19cb43bb7b\nAuthor: mathrock <email address hidden>\nDate:   Wed Mar 6 16:28:50 2013 -0500\n\n    Deprecate CONF.fixed_range, do dynamic setup\n    \n    Do dynamic fixed_range setup by pulling the networks that should\n    exist on the host and making the appropriate calls to set up the NAT\n    entries for each network. This allows for non-contiguous subnets to\n    be configured in the fixed_ip space and only configures the NAT rules\n    as they are needed. This also restricts the NAT range to the smallest\n    range required preventing the NAT from impacting subnets that might\n    exist on the external network.\n    \n    DocImpact: For backwards compatibility, Grizzly will still support\n    the CONF.fixed_range option and if set will perform the default logic\n    from Folsom and earlier releases. To use the new dynamic fixed_range\n    setup in Grizzly, set fixed_range='' in your nova.conf. The intention\n    is to remove the CONF.fixed_range option entirely early in the Havana\n    cycle and use the dynamic fixed_range setup from Havana going\n    forward.\n    \n    Change-Id: I4ec111079f7a1d253190e6a6008048f992a53f68\n    Fixes: bug #741626 bug #966175\n", 
            "date_created": "2013-03-12 16:49:36.292172+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ]
}
{
    "status": "Fix Released", 
    "last_updated": "2014-10-16 10:00:36.053486+00:00", 
    "description": "When using the Ironic Nova driver, a stopped server is still presented as Running even when the server is stopped. Checking via the Ironic API correctly shows the instance as powered down:\n\nstack@ironic:~/logs/screen$ nova list\n+--------------------------------------+---------+--------+------------+-------------+-------------------+\n| ID                                   | Name    | Status | Task State | Power State | Networks          |\n+--------------------------------------+---------+--------+------------+-------------+-------------------+\n| 5b43d631-91e1-4384-9b87-93283b3ae958 | testing | ACTIVE | -          | Running     | private=10.1.0.10 |\n+--------------------------------------+---------+--------+------------+-------------+-------------------+\nstack@ironic:~/logs/screen$ nova stop 5b43d631-91e1-4384-9b87-93283b3ae958\nstack@ironic:~/logs/screen$ nova list\n+--------------------------------------+---------+---------+------------+-------------+-------------------+\n| ID                                   | Name    | Status  | Task State | Power State | Networks          |\n+--------------------------------------+---------+---------+------------+-------------+-------------------+\n| 5b43d631-91e1-4384-9b87-93283b3ae958 | testing | SHUTOFF | -          | Running     | private=10.1.0.10 |\n+--------------------------------------+---------+---------+------------+-------------+-------------------+\nstack@ironic:~/logs/screen$ ping 10.1.0.10\nPING 10.1.0.10 (10.1.0.10) 56(84) bytes of data.\nFrom 172.24.4.2 icmp_seq=1 Destination Host Unreachable\nFrom 172.24.4.2 icmp_seq=5 Destination Host Unreachable\nFrom 172.24.4.2 icmp_seq=6 Destination Host Unreachable\nFrom 172.24.4.2 icmp_seq=7 Destination Host Unreachable\nFrom 172.24.4.2 icmp_seq=8 Destination Host Unreachable\n--- 10.1.0.10 ping statistics ---\n9 packets transmitted, 0 received, +5 errors, 100% packet loss, time 8000ms\nstack@ironic:~/logs/screen$ ironic node-list\n+--------------------------------------+--------------------------------------+-------------+--------------------+-------------+\n| UUID                                 | Instance UUID                        | Power State | Provisioning State | Maintenance |\n+--------------------------------------+--------------------------------------+-------------+--------------------+-------------+\n| 91e81c38-4dce-412b-8a1b-a914d28943e4 | 5b43d631-91e1-4384-9b87-93283b3ae958 | power off   | active             | False       |\n+--------------------------------------+--------------------------------------+-------------+--------------------+-------------+", 
    "tags": [
        "ironic", 
        "nova-driver"
    ], 
    "importance": "High", 
    "heat": 22, 
    "link": "https://bugs.launchpad.net/nova/+bug/1310135", 
    "owner": "https://api.launchpad.net/1.0/~devananda", 
    "id": 1310135, 
    "index": 1481, 
    "created": "2014-04-20 00:27:23.705780+00:00", 
    "title": "Stopping an instance via the Nova API when using the Nova Ironic driver incorrectly reports powerstate", 
    "comments": [
        {
            "content": "When using the Ironic Nova driver, a stopped server is still presented as Running even when the server is stopped. Checking via the Ironic API correctly shows the instance as powered down:\n\nstack@ironic:~/logs/screen$ nova list\n+--------------------------------------+---------+--------+------------+-------------+-------------------+\n| ID                                   | Name    | Status | Task State | Power State | Networks          |\n+--------------------------------------+---------+--------+------------+-------------+-------------------+\n| 5b43d631-91e1-4384-9b87-93283b3ae958 | testing | ACTIVE | -          | Running     | private=10.1.0.10 |\n+--------------------------------------+---------+--------+------------+-------------+-------------------+\nstack@ironic:~/logs/screen$ nova stop 5b43d631-91e1-4384-9b87-93283b3ae958\nstack@ironic:~/logs/screen$ nova list\n+--------------------------------------+---------+---------+------------+-------------+-------------------+\n| ID                                   | Name    | Status  | Task State | Power State | Networks          |\n+--------------------------------------+---------+---------+------------+-------------+-------------------+\n| 5b43d631-91e1-4384-9b87-93283b3ae958 | testing | SHUTOFF | -          | Running     | private=10.1.0.10 |\n+--------------------------------------+---------+---------+------------+-------------+-------------------+\nstack@ironic:~/logs/screen$ ping 10.1.0.10\nPING 10.1.0.10 (10.1.0.10) 56(84) bytes of data.\nFrom 172.24.4.2 icmp_seq=1 Destination Host Unreachable\nFrom 172.24.4.2 icmp_seq=5 Destination Host Unreachable\nFrom 172.24.4.2 icmp_seq=6 Destination Host Unreachable\nFrom 172.24.4.2 icmp_seq=7 Destination Host Unreachable\nFrom 172.24.4.2 icmp_seq=8 Destination Host Unreachable\n--- 10.1.0.10 ping statistics ---\n9 packets transmitted, 0 received, +5 errors, 100% packet loss, time 8000ms\nstack@ironic:~/logs/screen$ ironic node-list\n+--------------------------------------+--------------------------------------+-------------+--------------------+-------------+\n| UUID                                 | Instance UUID                        | Power State | Provisioning State | Maintenance |\n+--------------------------------------+--------------------------------------+-------------+--------------------+-------------+\n| 91e81c38-4dce-412b-8a1b-a914d28943e4 | 5b43d631-91e1-4384-9b87-93283b3ae958 | power off   | active             | False       |\n+--------------------------------------+--------------------------------------+-------------+--------------------+-------------+", 
            "date_created": "2014-04-20 00:27:23.705780+00:00", 
            "author": "https://api.launchpad.net/1.0/~dwalleck"
        }, 
        {
            "content": "I was able to reproduce this issue and did some debugging.\n\nThis issue is occurring because when the ironic driver makes an 'ironic client' call to do power action on the particular node, ironic spawns an thread to perform the power actions and the ironic client returns immediately.\n\nSince ironic client returned, nova will query and see that the node is still in powered on state and sets the POWER STATE to running.\n(we need to actually wait for the state transition to happen)\n\n\nNOTE:\nThe POWER STATE is automatically corrected in the next 'sync power state' action that happens periodically. \nBut, we need to fix this issue, since user may not wait till this periodic task to happen.\n", 
            "date_created": "2014-09-09 06:24:09.605643+00:00", 
            "author": "https://api.launchpad.net/1.0/~rh-s"
        }, 
        {
            "content": "If the request is received by Ironic (iow, does not return an error from the API call) should we make the assumption that it will succeed, and set the power state in Nova to POWEROFF? If, for some reason, Ironic failed to complete the requested action, and the node is still ON, then Nova will detect *that* on the next sync_power_state cycle.\n\nI think this is better than the current behavior, but still not ideal.\n\nIdeally, we should have a notification bus between the services, eg. so Ironic can actively inform Nova when the requested action is complete.", 
            "date_created": "2014-09-13 02:06:01.111729+00:00", 
            "author": "https://api.launchpad.net/1.0/~devananda"
        }, 
        {
            "content": "Eventual consistency of states is something that's normal for Nova. Is there a reason this is believe to be any worse than nova delete's normal delays? It seem like the real issue is there should be an ironic callback for when things are done. ", 
            "date_created": "2014-09-18 10:27:58.434708+00:00", 
            "author": "https://api.launchpad.net/1.0/~sdague"
        }, 
        {
            "content": "I agree with Sean - the real solution here is just to have a callback mechanism between Ironic and Nova. Waiting for a periodic task to sync the power state is not ideal, but it is \"normal\" for Nova today.", 
            "date_created": "2014-09-23 16:14:17.813446+00:00", 
            "author": "https://api.launchpad.net/1.0/~devananda"
        }, 
        {
            "content": "So I did some more investigation after Adam reported that the parallel tempest tests fail intermittently on reboot() for a similar reason. For reference, that bug is here:\n\n  https://bugs.launchpad.net/ironic/+bug/1373650\n\nSummary\n=======\n\nIronic's API for requesting power state changes (on, off, reboot) is asynchronous - it returns 202 when the request is received and actionable, not when it is complete.\n\nNova's ComputeManager seems to require that virt driver power_on/power_off/reboot methods return when the action is complete, and polls the driver for status immediately afterwards. It then updates the instance state based on this, and marks the action as complete (regardless of the return). \n\nThe mismatch should be obvious now -- Ironic's API is async, but nova.compute.manager expects the virt driver to return only when the action is complete. So, today, the ironic virt driver is not giving the Ironic service any time to complete the request, and ComputeManager thinks the operation is complete.\n\nNova self-corrects for power on/off requests in the periodic sync_power_state method, but there is still a problem here. In a busy system, the action appears complete before it even starts, which is causing the tempest failures.\n\nProposal\n========\n\nIronic represents the pending action in the \"target_power_state\" field, which is set when the request is received. When the requested action is complete, this field is reset to None, and the \"power_state\" field is updated.\n\nI propose that the Ironic virt driver have a new method _wait_for_power_state(client, node, new_state) which polls Ironic in a loop and returns when node.target_power_state != new_state\n\nThen, the driver methods would become:\n\ndef reboot(...):\n  new_state = 'reboot'\n  ironicclient = ...\n  node = ...\n  ironicclient.call(\"node.set_power_state\", node.uuid, new_state)\n _wait_for_power_state(ironicclient, node, new_state)", 
            "date_created": "2014-09-25 00:56:48.164235+00:00", 
            "author": "https://api.launchpad.net/1.0/~devananda"
        }, 
        {
            "content": "Hi Devananda, I see that you have moved the bug to 'triaged' in nova!, so if we are fixing this issue, will the fix go to 'ironic driver' in nova repo?", 
            "date_created": "2014-09-25 05:11:42.337201+00:00", 
            "author": "https://api.launchpad.net/1.0/~rh-s"
        }, 
        {
            "content": "right, it should be fixed in Nova tree as the driver lives there", 
            "date_created": "2014-09-25 07:54:06.081683+00:00", 
            "author": "https://api.launchpad.net/1.0/~divius"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/124162", 
            "date_created": "2014-09-25 20:00:39.708139+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Digging further after proposing a fix to the Nova driver, there is *also* a race inside of ironic/conductor/manager.py and ironic/conductor/utils.py -- I am posting a fix for those now.", 
            "date_created": "2014-09-25 23:25:28.385491+00:00", 
            "author": "https://api.launchpad.net/1.0/~devananda"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/124225", 
            "date_created": "2014-09-25 23:31:26.067306+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Was already working towards the fix  :(\nBut np, thanks for fixing it in quick time.", 
            "date_created": "2014-09-26 06:00:46.984423+00:00", 
            "author": "https://api.launchpad.net/1.0/~rh-s"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/124225\nCommitted: https://git.openstack.org/cgit/openstack/ironic/commit/?id=f33a26fd81b1bfd57f6b3c437f10c83e5059f878\nSubmitter: Jenkins\nBranch:    master\n\ncommit f33a26fd81b1bfd57f6b3c437f10c83e5059f878\nAuthor: Devananda van der Veen <email address hidden>\nDate:   Thu Sep 25 16:25:57 2014 -0700\n\n    Conductor changes target_power_state before starting work\n    \n    A race was discovered between when Nova requests a power state change\n    and when that request is visible in Ironic's API, which could lead to\n    Nova believing the request was completely satisfied before it\n    actually started.\n    \n    A partial fix has been proposed to Nova:\n        https://review.openstack.org/124162\n    \n    This also requires that Ironic change the node's target_power_state from\n    within ConductorManager *prior* to spawning the background thread which\n    performs the actual work.\n    \n    Looking into this exposed another potential race in Ironic whereby\n    a power state change request could be responded with 202-Accepted,\n    but the background thread might fail to be started, and no error would\n    be reported. The new behavior is to set node.last_error in the same\n    way that this is handled for provision state changes that fail in the\n    same way.\n    \n    Change-Id: I4d85c9230bcd9b6e36ffa9a326fda9908fee7e76\n    Closes-bug: #1310135\n", 
            "date_created": "2014-09-29 22:26:22.244964+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/124162\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=6e1fd7b9b51498af5f688a41d6636ff90b9a56f5\nSubmitter: Jenkins\nBranch:    master\n\ncommit 6e1fd7b9b51498af5f688a41d6636ff90b9a56f5\nAuthor: Devananda van der Veen <email address hidden>\nDate:   Thu Sep 25 09:07:23 2014 -0700\n\n    Ironic driver must wait for power state changes\n    \n    The Ironic virt driver was previously returning from power_on,\n    power_off, and reboot calls immediately after making the request to\n    Ironic -- but before Ironic had necessarily acted upon it. This could\n    lead to Nova acting as though the state change was complete before it\n    actually was.\n    \n    This patch introduces a new private method which polls Ironic until it\n    signals that the power state change is complete. With this, the\n    power_on, power_off, and reboot methods wait for the action to complete\n    before returning to ComputeManager.\n    \n    Closes-bug: #1310135\n    \n    Change-Id: I0bbdd8bc8807a0df43a420825f497842b387c4d5\n", 
            "date_created": "2014-09-30 11:10:14.915524+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ]
}
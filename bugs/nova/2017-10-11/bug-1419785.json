{
    "status": "Fix Released", 
    "last_updated": "2015-11-19 21:50:05.854100+00:00", 
    "description": "When running more than one nova compute configured for the same cluster, rebooting one of the computes will delete all running instances.", 
    "tags": [
        "in-stable-juno", 
        "vmware"
    ], 
    "importance": "High", 
    "heat": 18, 
    "link": "https://bugs.launchpad.net/nova/+bug/1419785", 
    "owner": "https://api.launchpad.net/1.0/~garyk", 
    "id": 1419785, 
    "index": 1688, 
    "created": "2015-02-09 13:33:00.164866+00:00", 
    "title": "VMware: running a redundant nova compute deletes running instances", 
    "comments": [
        {
            "content": "When running more than one nova compute configured for the same cluster, rebooting one of the computes will delete all running instances.", 
            "date_created": "2015-02-09 13:33:00.164866+00:00", 
            "author": "https://api.launchpad.net/1.0/~garyk"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/154029", 
            "date_created": "2015-02-09 13:33:47.900816+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Some context: this happens because _destroy_evacuated_instances in compute.manager does (lightly edited for clarity):\n\n        local_instances = self._get_instances_on_driver(context, filters)\n        for instance in local_instances:\n            if instance.host != self.host:\n                ...DESTROY...\n\nThe only instances which will be destroyed are the ones for which instance.host != self.host.\n\nThe meaning of self.host in this context appears to be 'hypervisor'. However, self.host is also a service endpoint. Historically there was a 1:1 relationship between these 2, but there are now a couple of drivers where this no longer makes sense.\n\nI think the correct fix for this would be something like adding driver.get_hypervisor_id() which returns a driver-specific identifier for the hypervisor location. Instance.host would then be set to this value. HA nova instances would then ensure that this returned the same value for all Novas managing the same hypervisor.\n\nHowever, that's a spec and a bunch of work, and this is a critical issue.\n\nNote that there is no problem in the above code if the active and standby node have the same value of self.host. The immediate workaround would seem to be to configure the active and standby nodes accordingly. This would presumably assume simultaneous failover of dns/ip.\n\nFor this specific issue, I would prefer to see a solution which is able to detect this situation and refuse to start Nova.", 
            "date_created": "2015-02-09 16:22:16.190878+00:00", 
            "author": "https://api.launchpad.net/1.0/~mbooth-9"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/154907", 
            "date_created": "2015-02-11 15:21:36.207197+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "The fix that Matt suggest is not viable in my opinoin. It does not support HA at all which kind of defeats the purpose", 
            "date_created": "2015-02-11 16:05:15.060114+00:00", 
            "author": "https://api.launchpad.net/1.0/~garyk"
        }, 
        {
            "content": "Supporting HA isn't in the scope of this Critical bug. Nova doesn't currently support HA, and adding it will require a spec and a significant amount of work. This bug will fix the bug as described here.\n\nThat said, I believe HA will still be supportable if all HA nodes have the same hostname.", 
            "date_created": "2015-02-11 16:18:05.168582+00:00", 
            "author": "https://api.launchpad.net/1.0/~mbooth-9"
        }, 
        {
            "content": "Cannot be critical, as single driver.", 
            "date_created": "2015-02-16 01:47:20.514145+00:00", 
            "author": "https://api.launchpad.net/1.0/~mikal"
        }, 
        {
            "content": "Change abandoned by Matthew Booth (<email address hidden>) on branch: master\nReview: https://review.openstack.org/154907\nReason: I think this can be better done in the DB, which is cleaner and applies to all drivers.", 
            "date_created": "2015-02-23 10:47:38.850422+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/158269", 
            "date_created": "2015-02-23 12:03:41.231834+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Michael, I believe this bugs meets the definition of critical here:\n\nhttps://wiki.openstack.org/wiki/BugTriage#Task_2:_Prioritize_confirmed_bugs_.28bug_supervisors.29\n\nbecause it results in data loss. Severe data loss, in fact. It also affects both the VMware and Ironic drivers.", 
            "date_created": "2015-02-23 13:50:41.847720+00:00", 
            "author": "https://api.launchpad.net/1.0/~mbooth-9"
        }, 
        {
            "content": "critical is for things that impact all users", 
            "date_created": "2015-02-26 21:21:49.856119+00:00", 
            "author": "https://api.launchpad.net/1.0/~jogo"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/159890", 
            "date_created": "2015-02-27 15:37:33.532285+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/159890\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=922148ac45c5a70da8969815b4f47e3c758d6974\nSubmitter: Jenkins\nBranch:    master\n\ncommit 922148ac45c5a70da8969815b4f47e3c758d6974\nAuthor: Dan Smith <email address hidden>\nDate:   Fri Feb 27 07:30:10 2015 -0800\n\n    Allow disabling the evacuate cleanup mechanism in compute manager\n    \n    This mechanism attempts to destroy any locally-running instances on\n    startup if instance.host != self.host. The assumption is that the\n    instance has been evacuated and is safely running elsewhere. This is\n    a dangerous assumption to make, so this patch adds a configuration\n    variable to disable this behavior if it's not desired.\n    \n    Note that disabling it may have implications for the case where\n    instances *were* evacuated, given potential shared resources.\n    To counter that problem, this patch also makes _init_instance()\n    skip initialization of the instance if it appears to be owned\n    by another host, logging a prominent warning in that case.\n    \n    As a result, if you have destroy_after_evacuate=False and you start\n    a nova compute with an incorrect hostname, or run it twice from\n    another host, then the worst that will happen is you get log\n    warnings about the instances on the host being ignored. This should\n    be an indication that something is wrong, but still allow for\n    fixing it without any loss. If the configuration option is disabled\n    and a legitimate evacuation does occur, simply enabling it and then\n    restarting the compute service will cause the cleanup to occur.\n    \n    This is added to the workarounds config group because it is really\n    only relevant while evacuate is fundamentally broken in this way.\n    It needs to be refactored to be more robust, and once that is done,\n    this should be able to go away.\n    \n    DocImpact: New configuration option, and peril warning\n    Partial-Bug: #1419785\n    Change-Id: Ib9a3c72c096822dd5c65c905117ae14994c73e99\n", 
            "date_created": "2015-03-05 21:48:46.348688+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Change abandoned by Matthew Booth (<email address hidden>) on branch: master\nReview: https://review.openstack.org/158269\nReason: Fucked if I know why.", 
            "date_created": "2015-03-12 21:47:23.204191+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Fix proposed to branch: stable/juno\nReview: https://review.openstack.org/174779", 
            "date_created": "2015-04-17 09:28:13.002222+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Change abandoned by garyk (<email address hidden>) on branch: master\nReview: https://review.openstack.org/154029\nReason: Need to discuss this", 
            "date_created": "2015-05-16 02:26:48.444808+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/174779\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=6f1f9dbc211356a3d0e2d46d3a984d7ceee79ca6\nSubmitter: Jenkins\nBranch:    stable/juno\n\ncommit 6f1f9dbc211356a3d0e2d46d3a984d7ceee79ca6\nAuthor: Tony Breeds <email address hidden>\nDate:   Tue Jan 27 11:17:54 2015 -0800\n\n    Allow disabling the evacuate cleanup mechanism in compute manager\n    \n    This mechanism attempts to destroy any locally-running instances on\n    startup if instance.host != self.host. The assumption is that the\n    instance has been evacuated and is safely running elsewhere. This is\n    a dangerous assumption to make, so this patch adds a configuration\n    variable to disable this behavior if it's not desired.\n    \n    Note that disabling it may have implications for the case where\n    instances *were* evacuated, given potential shared resources.\n    To counter that problem, this patch also makes _init_instance()\n    skip initialization of the instance if it appears to be owned\n    by another host, logging a prominent warning in that case.\n    \n    As a result, if you have destroy_after_evacuate=False and you start\n    a nova compute with an incorrect hostname, or run it twice from\n    another host, then the worst that will happen is you get log\n    warnings about the instances on the host being ignored. This should\n    be an indication that something is wrong, but still allow for\n    fixing it without any loss. If the configuration option is disabled\n    and a legitimate evacuation does occur, simply enabling it and then\n    restarting the compute service will cause the cleanup to occur.\n    \n    This is added to the workarounds config group because it is really\n    only relevant while evacuate is fundamentally broken in this way.\n    It needs to be refactored to be more robust, and once that is done,\n    this should be able to go away.\n    \n    Conflicts:\n            nova/compute/manager.py\n            nova/tests/unit/compute/test_compute.py\n            nova/tests/unit/compute/test_compute_mgr.py\n            nova/utils.py\n    \n    NOTE: In nova/utils.py a new section has been introduced but\n    only the option addessed by this backport has been included.\n    \n    DocImpact: New configuration option, and peril warning\n    Partial-Bug: #1419785\n    (cherry picked from commit 922148ac45c5a70da8969815b4f47e3c758d6974)\n    \n    -- squashed with commit --\n    \n    Create a 'workarounds' config group.\n    \n    This group is for very specific reasons.\n    \n    If you're:\n    - Working around an issue in a system tool (e.g. libvirt or qemu) where the fix\n      is in flight/discussed in that community.\n    - The tool can be/is fixed in some distributions and rather than patch the code\n      those distributions can trivially set a config option to get the \"correct\"\n      behavior.\n    This is a good place for your workaround.\n    \n    (cherry picked from commit b1689b58409ab97ef64b8cec2ba3773aacca7ac5)\n    \n    --\n    \n    Change-Id: Ib9a3c72c096822dd5c65c905117ae14994c73e99\n", 
            "date_created": "2015-06-03 09:02:49.179690+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "The actual fix for this is to make nova-compute not attempt to delete instances unless they were actually evacuated. That fix was committed here, so this should be fixed now:\n\nhttps://review.openstack.org/#/c/183354", 
            "date_created": "2015-09-14 16:00:16.451907+00:00", 
            "author": "https://api.launchpad.net/1.0/~danms"
        }
    ]
}
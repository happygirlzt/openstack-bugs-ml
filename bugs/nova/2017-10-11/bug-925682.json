{
    "status": "Fix Released", 
    "last_updated": "2012-04-05 10:15:34.334613+00:00", 
    "description": "nova/api/openstack/compute/contrib/virtual_interfaces.py maps the ID as UUID:\n\n\n 44 def _translate_vif_summary_view(_context, vif):\n 45     \"\"\"Maps keys for VIF summary view.\"\"\"\n 46     d = {}\n 47     d['id'] = vif['uuid']\n 48     d['mac_address'] = vif['address']\n 49     return d\n\nhowever, the the Nova code will only retrieve an ID properly.\n\n1450 @require_context\n1451 def instance_get(context, instance_id, session=None):\n1452     result = _build_instance_get(context, session=session).\\\n1453                 filter_by(id=instance_id).\\\n1454                 first()\n1455\n1456     if not result:\n1457         raise exception.InstanceNotFound(instance_id=instance_id)\n1458\n1459     return result\n\nResulting stack trace:\n\n(nova.rpc): TRACE:   File \"/opt/stack/nova/nova/rpc/amqp.py\", line 244, in _process_data\n(nova.rpc): TRACE:     rval = node_func(context=ctxt, **node_args)\n(nova.rpc): TRACE:   File \"/opt/stack/nova/nova/network/manager.py\", line 236, in wrapped\n(nova.rpc): TRACE:     return func(self, context, *args, **kwargs)\n(nova.rpc): TRACE:   File \"/opt/stack/nova/nova/network/manager.py\", line 1514, in get_vifs_by_instance\n(nova.rpc): TRACE:     vifs = self.db.virtual_interface_get_by_instance(context, instance_id)\n(nova.rpc): TRACE:   File \"/opt/stack/nova/nova/db/api.py\", line 530, in virtual_interface_get_by_instance\n(nova.rpc): TRACE:     return IMPL.virtual_interface_get_by_instance(context, instance_id)\n(nova.rpc): TRACE:   File \"/opt/stack/nova/nova/db/sqlalchemy/api.py\", line 119, in wrapper\n(nova.rpc): TRACE:     return f(*args, **kwargs)\n(nova.rpc): TRACE:   File \"/opt/stack/nova/nova/db/sqlalchemy/api.py\", line 131, in wrapper\n(nova.rpc): TRACE:     db.instance_get(context, instance_id)\n(nova.rpc): TRACE:   File \"/opt/stack/nova/nova/db/api.py\", line 591, in instance_get\n(nova.rpc): TRACE:     return IMPL.instance_get(context, instance_id)\n(nova.rpc): TRACE:   File \"/opt/stack/nova/nova/db/sqlalchemy/api.py\", line 119, in wrapper\n(nova.rpc): TRACE:     return f(*args, **kwargs)\n(nova.rpc): TRACE:   File \"/opt/stack/nova/nova/db/sqlalchemy/api.py\", line 1457, in instance_get\n(nova.rpc): TRACE:     raise exception.InstanceNotFound(instance_id=instance_id)\n(nova.rpc): TRACE: InstanceNotFound: Instance a4bf8a2b-f006-477d-8928-bbb4c92bc047 could not be found.\n\nIs the appropriate fix to have the VIF extension return ID or to make instance_get work with UUIDs like this:\n\n@require_context\ndef instance_get(context, instance_id, session=None):\n \n    if utils.is_uuid_like(instance_id):\n        result = _build_instance_get(context, session=session).\\\n            filter_by(uuid=instance_id).\\\n            first()\n    else:\n         result = _build_instance_get(context, session=session).\\\n            filter_by(id=instance_id).\\\n            first()\n\n    if not result:\n        raise exception.InstanceNotFound(instance_id=instance_id)\n\n    return result", 
    "tags": [], 
    "importance": "Medium", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/925682", 
    "owner": "https://api.launchpad.net/1.0/~vishvananda", 
    "id": 925682, 
    "index": 2741, 
    "created": "2012-02-02 19:54:33.198739+00:00", 
    "title": "virtual_interfaces extension returns UUID, Nova expects ID", 
    "comments": [
        {
            "content": "nova/api/openstack/compute/contrib/virtual_interfaces.py maps the ID as UUID:\n\n\n 44 def _translate_vif_summary_view(_context, vif):\n 45     \"\"\"Maps keys for VIF summary view.\"\"\"\n 46     d = {}\n 47     d['id'] = vif['uuid']\n 48     d['mac_address'] = vif['address']\n 49     return d\n\nhowever, the the Nova code will only retrieve an ID properly.\n\n1450 @require_context\n1451 def instance_get(context, instance_id, session=None):\n1452     result = _build_instance_get(context, session=session).\\\n1453                 filter_by(id=instance_id).\\\n1454                 first()\n1455\n1456     if not result:\n1457         raise exception.InstanceNotFound(instance_id=instance_id)\n1458\n1459     return result\n\nResulting stack trace:\n\n(nova.rpc): TRACE:   File \"/opt/stack/nova/nova/rpc/amqp.py\", line 244, in _process_data\n(nova.rpc): TRACE:     rval = node_func(context=ctxt, **node_args)\n(nova.rpc): TRACE:   File \"/opt/stack/nova/nova/network/manager.py\", line 236, in wrapped\n(nova.rpc): TRACE:     return func(self, context, *args, **kwargs)\n(nova.rpc): TRACE:   File \"/opt/stack/nova/nova/network/manager.py\", line 1514, in get_vifs_by_instance\n(nova.rpc): TRACE:     vifs = self.db.virtual_interface_get_by_instance(context, instance_id)\n(nova.rpc): TRACE:   File \"/opt/stack/nova/nova/db/api.py\", line 530, in virtual_interface_get_by_instance\n(nova.rpc): TRACE:     return IMPL.virtual_interface_get_by_instance(context, instance_id)\n(nova.rpc): TRACE:   File \"/opt/stack/nova/nova/db/sqlalchemy/api.py\", line 119, in wrapper\n(nova.rpc): TRACE:     return f(*args, **kwargs)\n(nova.rpc): TRACE:   File \"/opt/stack/nova/nova/db/sqlalchemy/api.py\", line 131, in wrapper\n(nova.rpc): TRACE:     db.instance_get(context, instance_id)\n(nova.rpc): TRACE:   File \"/opt/stack/nova/nova/db/api.py\", line 591, in instance_get\n(nova.rpc): TRACE:     return IMPL.instance_get(context, instance_id)\n(nova.rpc): TRACE:   File \"/opt/stack/nova/nova/db/sqlalchemy/api.py\", line 119, in wrapper\n(nova.rpc): TRACE:     return f(*args, **kwargs)\n(nova.rpc): TRACE:   File \"/opt/stack/nova/nova/db/sqlalchemy/api.py\", line 1457, in instance_get\n(nova.rpc): TRACE:     raise exception.InstanceNotFound(instance_id=instance_id)\n(nova.rpc): TRACE: InstanceNotFound: Instance a4bf8a2b-f006-477d-8928-bbb4c92bc047 could not be found.\n\nIs the appropriate fix to have the VIF extension return ID or to make instance_get work with UUIDs like this:\n\n@require_context\ndef instance_get(context, instance_id, session=None):\n \n    if utils.is_uuid_like(instance_id):\n        result = _build_instance_get(context, session=session).\\\n            filter_by(uuid=instance_id).\\\n            first()\n    else:\n         result = _build_instance_get(context, session=session).\\\n            filter_by(id=instance_id).\\\n            first()\n\n    if not result:\n        raise exception.InstanceNotFound(instance_id=instance_id)\n\n    return result", 
            "date_created": "2012-02-02 19:54:33.198739+00:00", 
            "author": "https://api.launchpad.net/1.0/~mjfork"
        }, 
        {
            "content": "A better fix, based on instance_update in nova/nova/db/sqlalchemy/api.py may be \n\n@require_context\ndef instance_get(context, instance_id, session=None):\n\u00a0\u00a0\u00a0\u00a0if utils.is_uuid_like(instance_id):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return instance_get_by_uuid(context, instance_id, session)\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = _build_instance_get(context, session=session).\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0filter_by(id=instance_id).\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0first()\n\u00a0\u00a0\u00a0\u00a0if not result:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0raise exception.InstanceNotFound(instance_id=instance_id)\n\u00a0\u00a0\u00a0\u00a0return result", 
            "date_created": "2012-02-02 20:02:38.561508+00:00", 
            "author": "https://api.launchpad.net/1.0/~mjfork"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/3705", 
            "date_created": "2012-02-02 21:07:29.953783+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/3705\nCommitted: http://github.com/openstack/nova/commit/723cbc762a5e1d8d53e7e30223ee701dd65bd61c\nSubmitter: Jenkins\nBranch:    master\n\ncommit 723cbc762a5e1d8d53e7e30223ee701dd65bd61c\nAuthor: Vishvananda Ishaya <email address hidden>\nDate:   Thu Feb 2 13:04:29 2012 -0800\n\n    Fixes uuid lookup in virtual interfaces extension\n    \n     * Makes virtual interfaces get the instance and pass it to network.api\n     * Sends the id from the instance when looking up vifs\n     * Repairs the tests\n     * Fixes bug 925682\n    \n    Change-Id: If25514246f30bfc983f26f7a8f1c35f33f8b9cc4\n", 
            "date_created": "2012-02-02 21:38:48.192486+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ]
}
{
    "status": "Won't Fix", 
    "last_updated": "2017-06-16 15:29:27.011726+00:00", 
    "description": "I guess this is a subset of bug #1004468 and https://blueprints.launchpad.net/ceilometer/+spec/non-libvirt-hw\n\nHowever, it's a bit different for nova-baremetal. There is no hypervisor we can query for CPU, disk and network statistics so we can't just add another plugin for ceilometer's compute agent.\n\nInstead, we will need an agent which runs inside each baremetal instance and posts samples to ceilometer's public /meters/ API\n\nAt a first glance, these look like the counters which require a guest agent:\n\n\u00a0cpu                      CPU time used\n\u00a0cpu_util                 CPU utilisation\n\u00a0disk.read.request        Number of read requests\n\u00a0disk.write.request       Number of write requests\n\u00a0disk.read.bytes          Volume of read in B\n\u00a0disk.write.bytes         Volume of write in B\n\u00a0network.incoming.bytes   number of incoming bytes on the network\n\u00a0network.outgoing.bytes   number of outgoing bytes on the network\n\u00a0network.incoming.packets number of incoming packets\n\u00a0network.outgoing.packets number of outgoing packets\n\nFor the other compute counters, we can add baremetal support to the ceilometer compute agent - e.g. these counters:\n\n\u00a0instance                 Duration of instance\n\u00a0instance:<type>          Duration of instance <type> (openstack types)\n\u00a0memory                   Volume of RAM in MB\n\u00a0cpus                     Number of VCPUs\n\u00a0disk.root.size           Size of root disk in GB\n\u00a0disk.ephemeral.size      Size of ephemeral disk in GB\n\nOne thing to consider is access control to these counters - we probably don't usually allow tenants to update these counters in, but in this case the tenant will require that ability.\n\nIt's unclear whether this guest agent would live in ceilometer, nova baremetal or ironic. It's interfacing with (what should be) a very stable ceilometer API, so there's no particular need for it to live in ceilometer.\n\nI'm also adding a tripleo task, since I expect tripleo will want these metrics available for things like auto-scaling or simply resource monitoring. We'd need at least a diskimage-builder element which includes the guest agent.", 
    "tags": [
        "baremetal"
    ], 
    "importance": "Medium", 
    "heat": 18, 
    "link": "https://bugs.launchpad.net/nova/+bug/1188218", 
    "owner": "None", 
    "id": 1188218, 
    "index": 3425, 
    "created": "2013-06-06 14:42:00.613817+00:00", 
    "title": "Support standard ceilometer compute metrics with nova baremetal", 
    "comments": [
        {
            "content": "I guess this is a subset of bug #1004468 and https://blueprints.launchpad.net/ceilometer/+spec/non-libvirt-hw\n\nHowever, it's a bit different for nova-baremetal. There is no hypervisor we can query for CPU, disk and network statistics so we can't just add another plugin for ceilometer's compute agent.\n\nInstead, we will need an agent which runs inside each baremetal instance and posts samples to ceilometer's public /meters/ API\n\nAt a first glance, these look like the counters which require a guest agent:\n\n cpu                       Cumulative        ns  inst ID   pollster      CPU time used\n cpu_util                  Gauge              %  inst ID   pollster      CPU utilisation\n disk.read.request         Cumulative   request  inst ID   pollster      Number of read requests\n disk.write.request        Cumulative   request  inst ID   pollster      Number of write requests\n disk.read.bytes           Cumulative         B  inst ID   pollster      Volume of read in B\n disk.write.bytes          Cumulative         B  inst ID   pollster      Volume of write in B\n network.incoming.bytes    Cumulative         B  iface ID  pollster      number of incoming bytes on the network\n network.outgoing.bytes    Cumulative         B  iface ID  pollster      number of outgoing bytes on the network\n network.incoming.packets  Cumulative   packets  iface ID  pollster      number of incoming packets\n network.outgoing.packets  Cumulative   packets  iface ID  pollster      number of outgoing packets\n\nFor the other compute counters, we can add baremetal support to the ceilometer compute agent - e.g. these counters:\n\n instance                  Gauge       instance  inst ID   both          Duration of instance\n instance:<type>           Gauge       instance  inst ID   both          Duration of instance <type> (openstack types)\n memory                    Gauge             MB  inst ID   notification  Volume of RAM in MB\n cpus                     Gauge           vcpu  inst ID   notification  Number of VCPUs\n disk.root.size            Gauge             GB  inst ID   notification  Size of root disk in GB\n disk.ephemeral.size       Gauge             GB  inst ID   notification  Size of ephemeral disk in GB\n\nOne thing to consider is access control to these counters - we probably don't usually allow tenants to update these counters in, but in this case the tenant will require that ability.\n\nIt's unclear whether this guest agent would live in ceilometer, nova baremetal or ironic. It's interfacing with (what should be) a very stable ceilometer API, so there's no particular need for it to live in ceilometer.\n\nI'm also adding a tripleo task, since I expect tripleo will want these metrics available for things like auto-scaling or simply resource monitoring.", 
            "date_created": "2013-06-06 14:42:00.613817+00:00", 
            "author": "https://api.launchpad.net/1.0/~markmc"
        }, 
        {
            "content": "Mark, could you check how this can be tackled with the work being done on https://blueprints.launchpad.net/openstack/?searchtext=monitoring-physical-devices ?", 
            "date_created": "2013-06-07 08:30:33.307016+00:00", 
            "author": "https://api.launchpad.net/1.0/~jdanjou"
        }, 
        {
            "content": "What changes do you think Ironic will need to support this?", 
            "date_created": "2013-06-10 23:15:01.284168+00:00", 
            "author": "https://api.launchpad.net/1.0/~lifeless"
        }, 
        {
            "content": "lifeless, see:\n\n  It's unclear whether this guest agent would live in ceilometer,\n  nova baremetal or ironic. It's interfacing with (what should be)\n a very stable ceilometer API, so there's no particular need for\n it to live in ceilometer.\n\nI could see a case for this agent to live in Ironic.", 
            "date_created": "2013-07-04 14:07:08.388551+00:00", 
            "author": "https://api.launchpad.net/1.0/~markmc"
        }, 
        {
            "content": "I have a problem with the wording of the bug report: \"we will need an agent which runs inside each baremetal instance\".\n\nBaremetal (and Ironic) instances do not, by definition, necessarily have an agent.\n\nThat said, gathering counter data *might* be possible via IPMI calls remotely, in some situations, but no code has been written today to do that.\n\nProviding information such as duration and size of an instance could be accomplished fairly easily via an agent alongside (or a hook inside) nova-compute and ironic-conductor.", 
            "date_created": "2013-07-31 18:33:49.209876+00:00", 
            "author": "https://api.launchpad.net/1.0/~devananda"
        }, 
        {
            "content": "To clarify my last comment, TripleO could have a ceilometer agent baked into its service images, which could provide useful information back to the undercloud's Heat and help it to determine when to scale the overcloud. But this isn't strictly related to baremetal or ironic in any way.", 
            "date_created": "2013-07-31 18:38:41.766416+00:00", 
            "author": "https://api.launchpad.net/1.0/~devananda"
        }, 
        {
            "content": "Related blueprints:\nhttps://blueprints.launchpad.net/ceilometer/+spec/monitoring-physical-devices\nhttps://blueprints.launchpad.net/ceilometer/+spec/ipmi-inspector-for-monitoring-physical-devices", 
            "date_created": "2013-09-20 12:53:10.389913+00:00", 
            "author": "https://api.launchpad.net/1.0/~lsmola"
        }, 
        {
            "content": "Ironic spec has been approved:\nhttp://git.openstack.org/cgit/openstack/ironic-specs/tree/specs/juno/send-data-to-ceilometer.rst", 
            "date_created": "2014-07-08 16:29:37.136427+00:00", 
            "author": "https://api.launchpad.net/1.0/~devananda"
        }, 
        {
            "content": "Ironic spec has been implemented: https://blueprints.launchpad.net/ironic/+spec/send-data-to-ceilometer.", 
            "date_created": "2014-08-19 17:22:51.276623+00:00", 
            "author": "https://api.launchpad.net/1.0/~rloo"
        }, 
        {
            "content": "https://github.com/openstack/ceilometer/commit/683ead74af36c88575ca8bce312ecf1428a5cc80", 
            "date_created": "2015-07-07 16:06:36.176326+00:00", 
            "author": "https://api.launchpad.net/1.0/~chungg"
        }, 
        {
            "content": "Is this bug still relevant to tripleo? I would guess that it has already been addressed in some way. I'm marking as incomplete for tripleo but if someone has further information feel free to change status or file a new bug outlining whatever gap needs to be covered to consider this fixed.", 
            "date_created": "2016-05-26 23:37:57.657584+00:00", 
            "author": "https://api.launchpad.net/1.0/~beagles"
        }, 
        {
            "content": "This bug is > 365 days without activity. We are unsetting assignee and milestone and setting status to Incomplete in order to allow its expiry in 60 days.\n\nIf the bug is still valid, then update the bug status.", 
            "date_created": "2017-06-16 15:29:26.235799+00:00", 
            "author": "https://api.launchpad.net/1.0/~emilienm"
        }
    ]
}
{
    "status": "Fix Released", 
    "last_updated": "2014-09-22 22:23:37.116854+00:00", 
    "description": "2013.2.1 release of OpenStack, Neutron OVS plugin.\n\nUsers where able to add interfaces using the 'nova interface-attach' command to the external network definition within the OpenStack deployment.  This appears to work and the ports are listed in nova port-list <uuid>.  However when deleting these instances, nova-compute throws the following error; its also not possible to delete the offending ports from the user tenant; this has to be done from an admin tenant:\n\nneutron port-delete <port>\nnova delete <uuid>\n\n2014-02-25 13:03:57.639 40614 ERROR nova.openstack.common.rpc.amqp [req-fb76503b-fad2-4ead-bae5-18c870c7a419 4dc76d7ddf8349b7bf63791a3cd4d024 79699f6f71e245b186720f1e2bc03cf0] Exception during message handling\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp Traceback (most recent call last):\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/openstack/common/rpc/amqp.py\", line 461, in _process_data\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     **args)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/openstack/common/rpc/dispatcher.py\", line 172, in dispatch\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     result = getattr(proxyobj, method)(ctxt, **kwargs)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/compute/manager.py\", line 353, in decorated_function\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     return function(self, context, *args, **kwargs)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/exception.py\", line 90, in wrapped\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     payload)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/exception.py\", line 73, in wrapped\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     return f(self, context, *args, **kw)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/compute/manager.py\", line 243, in decorated_function\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     pass\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/compute/manager.py\", line 229, in decorated_function\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     return function(self, context, *args, **kwargs)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/compute/manager.py\", line 294, in decorated_function\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     function(self, context, *args, **kwargs)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/compute/manager.py\", line 271, in decorated_function\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     e, sys.exc_info())\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/compute/manager.py\", line 258, in decorated_function\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     return function(self, context, *args, **kwargs)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/compute/manager.py\", line 1802, in terminate_instance\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     do_terminate_instance(instance, bdms)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/openstack/common/lockutils.py\", line 246, in inner\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     return f(*args, **kwargs)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/compute/manager.py\", line 1794, in do_terminate_instance\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     reservations=reservations)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/hooks.py\", line 105, in inner\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     rv = f(*args, **kwargs)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/compute/manager.py\", line 1767, in _delete_instance\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     user_id=user_id)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/compute/manager.py\", line 1739, in _delete_instance\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     self._shutdown_instance(context, db_inst, bdms)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/compute/manager.py\", line 1649, in _shutdown_instance\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     network_info = self._get_instance_nw_info(context, instance)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/compute/manager.py\", line 876, in _get_instance_nw_info\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     instance)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/network/api.py\", line 49, in wrapper\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     res = f(self, context, *args, **kwargs)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/network/neutronv2/api.py\", line 456, in get_instance_nw_info\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     result = self._get_instance_nw_info(context, instance, networks)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/network/neutronv2/api.py\", line 465, in _get_instance_nw_info\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     nw_info = self._build_network_info_model(context, instance, networks)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/network/neutronv2/api.py\", line 1011, in _build_network_info_model\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     subnets)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/network/neutronv2/api.py\", line 964, in _nw_info_build_network\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     label=network_name,\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp UnboundLocalError: local variable 'network_name' referenced before assignment\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp", 
    "tags": [
        "in-stable-havana", 
        "patch"
    ], 
    "importance": "High", 
    "heat": 30, 
    "link": "https://bugs.launchpad.net/nova/+bug/1284718", 
    "owner": "https://api.launchpad.net/1.0/~salvatore-orlando", 
    "id": 1284718, 
    "index": 1406, 
    "created": "2014-02-25 16:41:47.493425+00:00", 
    "title": "interface-attach to external network a) works and b) results in undeletable instances", 
    "comments": [
        {
            "content": "2013.2.1 release of OpenStack, Neutron OVS plugin.\n\nUsers where able to add interfaces using the 'nova interface-attach' command to the external network definition within the OpenStack deployment.  This appears to work and the ports are listed in nova port-list <uuid>.  However when deleting these instances, nova-compute throws the following error; its also not possible to delete the offending ports from the user tenant; this has to be done from an admin tenant:\n\nneutron port-delete <port>\nnova delete <uuid>\n\n2014-02-25 13:03:57.639 40614 ERROR nova.openstack.common.rpc.amqp [req-fb76503b-fad2-4ead-bae5-18c870c7a419 4dc76d7ddf8349b7bf63791a3cd4d024 79699f6f71e245b186720f1e2bc03cf0] Exception during message handling\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp Traceback (most recent call last):\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/openstack/common/rpc/amqp.py\", line 461, in _process_data\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     **args)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/openstack/common/rpc/dispatcher.py\", line 172, in dispatch\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     result = getattr(proxyobj, method)(ctxt, **kwargs)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/compute/manager.py\", line 353, in decorated_function\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     return function(self, context, *args, **kwargs)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/exception.py\", line 90, in wrapped\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     payload)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/exception.py\", line 73, in wrapped\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     return f(self, context, *args, **kw)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/compute/manager.py\", line 243, in decorated_function\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     pass\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/compute/manager.py\", line 229, in decorated_function\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     return function(self, context, *args, **kwargs)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/compute/manager.py\", line 294, in decorated_function\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     function(self, context, *args, **kwargs)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/compute/manager.py\", line 271, in decorated_function\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     e, sys.exc_info())\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/compute/manager.py\", line 258, in decorated_function\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     return function(self, context, *args, **kwargs)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/compute/manager.py\", line 1802, in terminate_instance\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     do_terminate_instance(instance, bdms)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/openstack/common/lockutils.py\", line 246, in inner\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     return f(*args, **kwargs)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/compute/manager.py\", line 1794, in do_terminate_instance\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     reservations=reservations)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/hooks.py\", line 105, in inner\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     rv = f(*args, **kwargs)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/compute/manager.py\", line 1767, in _delete_instance\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     user_id=user_id)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/compute/manager.py\", line 1739, in _delete_instance\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     self._shutdown_instance(context, db_inst, bdms)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/compute/manager.py\", line 1649, in _shutdown_instance\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     network_info = self._get_instance_nw_info(context, instance)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/compute/manager.py\", line 876, in _get_instance_nw_info\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     instance)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/network/api.py\", line 49, in wrapper\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     res = f(self, context, *args, **kwargs)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/network/neutronv2/api.py\", line 456, in get_instance_nw_info\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     result = self._get_instance_nw_info(context, instance, networks)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/network/neutronv2/api.py\", line 465, in _get_instance_nw_info\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     nw_info = self._build_network_info_model(context, instance, networks)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/network/neutronv2/api.py\", line 1011, in _build_network_info_model\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     subnets)\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp   File \"/usr/lib/python2.7/dist-packages/nova/network/neutronv2/api.py\", line 964, in _nw_info_build_network\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp     label=network_name,\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp UnboundLocalError: local variable 'network_name' referenced before assignment\n2014-02-25 13:03:57.639 40614 TRACE nova.openstack.common.rpc.amqp", 
            "date_created": "2014-02-25 16:41:47.493425+00:00", 
            "author": "https://api.launchpad.net/1.0/~james-page"
        }, 
        {
            "content": "This happens because \"shared\" networks access rights allow any tenant to create ports, thus overriding the settings for \"external\" networks where only admins can create ports, but any tenant can create floating IPs.\n\nA potential use case for this would be a deployment where the same publicly connected network can be used to deploy internet facing appliances, such as load balancers, as well as floating IPs allowing access to instances running on private networks.\nWhether this scenario makes sense or not, it is debatable. A new constraint might be added to prevent external networks to be made shared as well.\n\nI think the condition in which a tenant can create ports on external networks can be avoided by simply removing the shared attribute for the network. If that's confirmed this is not a security issue. \n\nEven in the case when a network is explicitly made external and shared, I am still not sure I see a security issue of which people choosing this strategy should be aware.\n\nHowever, the reported issue where a port created with interface-attach can be removed only in admin context looks like a bug and needs to be triaged.\n", 
            "date_created": "2014-02-26 10:08:54.269863+00:00", 
            "author": "https://api.launchpad.net/1.0/~salvatore-orlando"
        }, 
        {
            "content": "Details of external network definition:\n\nneutron net-show 2bfdbd29-ce26-42f0-a0ef-ac895903a1ed\n+-----------------+--------------------------------------+\n| Field           | Value                                |\n+-----------------+--------------------------------------+\n| admin_state_up  | True                                 |\n| id              | 2bfdbd29-ce26-42f0-a0ef-ac895903a1ed |\n| name            | ext_net                              |\n| router:external | True                                 |\n| shared          | False                                |\n| status          | ACTIVE                               |\n| subnets         | 8910f065-6f71-43fb-849b-b4e7aff14384 |\n| tenant_id       | 79699f6f71e245b186720f1e2bc03cf0     |\n+-----------------+--------------------------------------+\n", 
            "date_created": "2014-02-26 11:30:58.174843+00:00", 
            "author": "https://api.launchpad.net/1.0/~james-page"
        }, 
        {
            "content": "Salvatore\n\nThe external network definition is defined as shared=False", 
            "date_created": "2014-02-26 11:31:45.119011+00:00", 
            "author": "https://api.launchpad.net/1.0/~james-page"
        }, 
        {
            "content": "I have then rectified the bug title to remove the \"shared\" keyword.\nThe situation is then different, ports should not be created on external networks with tenant credentials.\n\nAssigning to myself for triage.", 
            "date_created": "2014-02-26 11:38:59.150655+00:00", 
            "author": "https://api.launchpad.net/1.0/~salvatore-orlando"
        }, 
        {
            "content": "So if I understand correctly there are two separate issues with potential security implications:\n\nIssue (a) is that anyone can attach an interface to an \"external\" network -- what are the security consequences of that ? Unexpected snooping ? What are the natural security expectations of an \"external\" network ?\n\nIssue (b) is a bug affecting removal of instances making use of such interfaces -- I don't really see an attack vector in that one. You can make it so that you can't delete your own instances. That sounds like a regular bug ?", 
            "date_created": "2014-02-28 10:58:14.734787+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "I think in the context of (a) the driver for a security issue would be if by direct attaching to the floating ip network, you could consume more ports than you would normally be able to consume floating ip's (as dictated by quota).  This could cause some sort of potential DoS attach by consuming floating ips via a backdoor route.  I've not confirmed whether this is the case or not.\n\nRe b) - yes that does just sound like a bug.", 
            "date_created": "2014-03-17 16:44:12.984215+00:00", 
            "author": "https://api.launchpad.net/1.0/~james-page"
        }, 
        {
            "content": "@neutron-coresec, could you confirm the (a) attack secnario above ?", 
            "date_created": "2014-03-19 14:04:56.170083+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "Sorry folks,\n\nI was supposed to be on top of this one, but limited to same meaningless testing.", 
            "date_created": "2014-03-23 23:33:51.583350+00:00", 
            "author": "https://api.launchpad.net/1.0/~salvatore-orlando"
        }, 
        {
            "content": "This is a bug that we can have a fix ready for Icehouse and a backport for Havana.  I do not think we should have a security embargo because tenant isolation of traffic is not compromised.  Additionally, a denial of service attack should trigger quota resource restrictions on VM instance and ports. ", 
            "date_created": "2014-04-03 14:52:39.181481+00:00", 
            "author": "https://api.launchpad.net/1.0/~markmcclain"
        }, 
        {
            "content": "I agree with Mark this is not a security issue. Even if a user attaches a port to an external network it won't have connectivity as we only use external networks to keep track of ip addresses for NAT rules. It looks like in his trace he is hitting this bug which was fixed and backported to havana already: https://review.openstack.org/#/c/54521/ . \n\nI believe gary had a patch that validated the input on attach_interface but I'm not able to find it at the moment on gerrit X.x", 
            "date_created": "2014-04-03 16:48:14.378164+00:00", 
            "author": "https://api.launchpad.net/1.0/~arosen"
        }, 
        {
            "content": "The root cause is the following.\n\nIf port binding extension is enabled, nova will select an admin client to create the port.\nThe admin client is allowed to plug ports into any network, including external networks.\n\nAs a result a tenant can not only add interfaces on an external network, but even boot vms on external networks.\n\nA fast and (in my opinion) correct fix is to restrict the search for non-shared networks to those which are actually owned by the tenant.\nIn this way:\n- admins will still be able to boot VMs  on external networks, as they would own it.\n- regular tenants won't be able to boot or attach interfaces on external networks\n- if an admin want to give another tenant the chance to have an interface on an external network, this can be achieve with a two step workflow:\n 1) create neutron port for tenant on external network\n 2) attach interface by port id\n\nSince the latter use case is in my understanding really marginal, I think the two-step replacement workflow will be acceptable.\nI don't think this solution will break any concrete use case; if existing deployment are leveraging this bug to boot tenant VMs on external networks, I don't think we should find a solution to keep this as a valid use case.\n\nIn order to remove the security flag from this bug, I have also validated that this bug cannot be exploited to allow a tenant to boot a VM on another tenant's network or port.\n", 
            "date_created": "2014-04-03 17:14:10.097229+00:00", 
            "author": "https://api.launchpad.net/1.0/~salvatore-orlando"
        }, 
        {
            "content": "Please do not consider the attached patch as final as it still raises a 500 on interface-attach, and I want a 400 instead.\n", 
            "date_created": "2014-04-03 17:18:21.872262+00:00", 
            "author": "https://api.launchpad.net/1.0/~salvatore-orlando"
        }, 
        {
            "content": "Hi Salvatore, \n\nI don't think that is the right fix. The reason this is occurring is because we are not calling validate_networks before calling to the nova-compute node. The fix was included in this patch set though was dropped for some reason:\n\nhttps://review.openstack.org/#/c/57229/8..9/nova/api/openstack/compute/contrib/attach_interfaces.py\n\nIn addition we might need to adiff --git a/nova/exception.py b/nova/exception.py\nindex cce9125..c5caa6d 100644\n--- a/nova/exception.py\n+++ b/nova/exception.py\n@@ -624,6 +624,9 @@ class NetworkRequiresSubnet(Invalid):\n     msg_fmt = _(\"Network %(network_uuid)s requires a subnet in order to boot\"\n                 \" instances on.\")\n \n+class NetworkIsExternal(Invalid):\n+    msg_fmt = _(\"Creating ports on router:external network %(network_uuid)s \"\n+                \"is not allowed.\")\n \n class DatastoreNotFound(NotFound):\n     msg_fmt = _(\"Could not find the datastore reference(s) which the VM uses.\")\ndiff --git a/nova/network/neutronv2/api.py b/nova/network/neutronv2/api.py\nindex 17e3bed..03db13c 100644\n--- a/nova/network/neutronv2/api.py\n+++ b/nova/network/neutronv2/api.py\n@@ -588,6 +588,7 @@ class API(base.Base):\n \n         neutron = neutronv2.get_client(context)\n         ports_needed_per_instance = 0\n \n         if not requested_networks:\n             nets = self._get_available_networks(context, context.project_id,\n@@ -634,10 +635,14 @@ class API(base.Base):\n             nets = self._get_available_networks(context,\n                                     context.project_id, net_ids,\n                                     neutron=neutron)\n\n             for net in nets:\n                 if not net.get('subnets'):\n                     raise exception.NetworkRequiresSubnet(\n                         network_uuid=net['id'])\n+                if net.get('router:external'):\n+                    raise exception.NetworkIsExternal(network_uuid=net['id'])\n \n             if len(nets) != len(net_ids):\n                 requsted_netid_set = set(net_ids)\ndd these lines as well: ", 
            "date_created": "2014-04-03 17:43:25.929133+00:00", 
            "author": "https://api.launchpad.net/1.0/~arosen"
        }, 
        {
            "content": "I went for this approach as well, but then I thought it was probably too restrictive to forbid boot/attach for all cases on external networks.\n\nThis is why I went for this alternate approach which, just like the one you highlighted, operates on the 'validate' phase.\n\nAnyway, I think we'll let a third party pick the right approach!", 
            "date_created": "2014-04-03 17:56:38.694301+00:00", 
            "author": "https://api.launchpad.net/1.0/~salvatore-orlando"
        }, 
        {
            "content": "Seems there's consensus that this is not an exploitable vulnerability. Also, the bug was originally, even if only very briefly, public when it was first opened (thus broader exposure has already compromised any effective embargo).", 
            "date_created": "2014-04-03 21:10:15.582110+00:00", 
            "author": "https://api.launchpad.net/1.0/~fungi"
        }, 
        {
            "content": "This bug is in progress: https://review.openstack.org/#/c/85189/\n\nlaunchpad seem not be willing to update status", 
            "date_created": "2014-04-03 23:10:03.272120+00:00", 
            "author": "https://api.launchpad.net/1.0/~salvatore-orlando"
        }, 
        {
            "content": "The attachment \"bug_ext_net.patch\" seems to be a patch.  If it isn't, please remove the \"patch\" flag from the attachment, remove the \"patch\" tag, and if you are a member of the ~ubuntu-reviewers, unsubscribe the team.\n\n[This is an automated message performed by a Launchpad user owned by ~brian-murray, for any issues please contact him.]", 
            "date_created": "2014-04-04 00:32:27.580385+00:00", 
            "author": "https://api.launchpad.net/1.0/~crichton"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/85189\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=7d1b4117fda7709307a35e56625cfa7709a6b795\nSubmitter: Jenkins\nBranch:    master\n\ncommit 7d1b4117fda7709307a35e56625cfa7709a6b795\nAuthor: Salvatore Orlando <email address hidden>\nDate:   Thu Apr 3 14:54:11 2014 -0700\n\n    Require admin context for interfaces on ext network\n    \n    Currently any user can attach an interface to a neutron\n    external network, if the neutron plugin supports the port\n    binding extension.\n    In this case, nova will create neutron ports using the admin\n    client, thus bypassing neutron authZ checks for creating ports\n    on external networks.\n    \n    This patch adds a check in nova to verify the API request has an\n    admin context when a request for an interface is made on a\n    neutron external network.\n    \n    Change-Id: I5fb0bdcbf19eb82746ea3b192c1f65899bfb3c0b\n    Closes-Bug: 1284718\n", 
            "date_created": "2014-04-07 16:51:33.824606+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Fix proposed to branch: milestone-proposed\nReview: https://review.openstack.org/85823", 
            "date_created": "2014-04-07 21:11:46.544084+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/85823\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=da66d50010d5b1ba1d7fc9c3d59d81b6c01bb0b0\nSubmitter: Jenkins\nBranch:    milestone-proposed\n\ncommit da66d50010d5b1ba1d7fc9c3d59d81b6c01bb0b0\nAuthor: Salvatore Orlando <email address hidden>\nDate:   Thu Apr 3 14:54:11 2014 -0700\n\n    Require admin context for interfaces on ext network\n    \n    Currently any user can attach an interface to a neutron\n    external network, if the neutron plugin supports the port\n    binding extension.\n    In this case, nova will create neutron ports using the admin\n    client, thus bypassing neutron authZ checks for creating ports\n    on external networks.\n    \n    This patch adds a check in nova to verify the API request has an\n    admin context when a request for an interface is made on a\n    neutron external network.\n    \n    Change-Id: I5fb0bdcbf19eb82746ea3b192c1f65899bfb3c0b\n    Closes-Bug: 1284718\n    (cherry picked from commit 7d1b4117fda7709307a35e56625cfa7709a6b795)\n", 
            "date_created": "2014-04-08 08:52:03.780376+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "This bug was fixed in the package nova - 1:2014.1~rc2-0ubuntu1\n\n---------------\nnova (1:2014.1~rc2-0ubuntu1) trusty; urgency=medium\n\n  * New upstream release candidate (LP: #1299055) including fixes for:\n    - Require admin context for interfaces on external networks to prevent\n      non-admin users directly creating ports on external networks\n      (LP: #1284718).\n -- James Page <email address hidden>   Thu, 10 Apr 2014 10:59:37 +0100", 
            "date_created": "2014-04-10 12:08:44.622670+00:00", 
            "author": "https://api.launchpad.net/1.0/~janitor"
        }, 
        {
            "content": "Fix proposed to branch: stable/havana\nReview: https://review.openstack.org/110476", 
            "date_created": "2014-07-29 21:54:59.227644+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/110476\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=1b69111f07de241b2cf80ea37e6fa09fcb959655\nSubmitter: Jenkins\nBranch:    stable/havana\n\ncommit 1b69111f07de241b2cf80ea37e6fa09fcb959655\nAuthor: Salvatore Orlando <email address hidden>\nDate:   Thu Apr 3 14:54:11 2014 -0700\n\n    Require admin context for interfaces on ext network\n    \n    Currently any user can attach an interface to a neutron\n    external network, if the neutron plugin supports the port\n    binding extension.\n    In this case, nova will create neutron ports using the admin\n    client, thus bypassing neutron authZ checks for creating ports\n    on external networks.\n    \n    This patch adds a check in nova to verify the API request has an\n    admin context when a request for an interface is made on a\n    neutron external network.\n    \n    Conflicts:\n    \tnova/exception.py\n    \n    Change-Id: I5fb0bdcbf19eb82746ea3b192c1f65899bfb3c0b\n    Closes-Bug: 1284718\n    (cherry picked from commit 7d1b4117fda7709307a35e56625cfa7709a6b795)\n", 
            "date_created": "2014-07-30 16:49:24.895269+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "this breaks provider networks, now my users are unable to boot vm using provider networks.", 
            "date_created": "2014-08-04 03:14:29.652487+00:00", 
            "author": "https://api.launchpad.net/1.0/~gfa"
        }, 
        {
            "content": "i've filled a bug for the regression, https://bugs.launchpad.net/nova/+bug/1352102", 
            "date_created": "2014-08-04 03:24:42.109890+00:00", 
            "author": "https://api.launchpad.net/1.0/~gfa"
        }, 
        {
            "content": "Yes, this \"fix\" now breaks our setup. Our users have access to an external network but to give them admin would be a huge policy violation. This really should have been changed to use the policy.json to limit access or open it up.", 
            "date_created": "2014-08-06 16:47:36.414897+00:00", 
            "author": "https://api.launchpad.net/1.0/~mjblack"
        }
    ]
}
{
    "status": "Fix Released", 
    "last_updated": "2016-06-15 06:29:59.658686+00:00", 
    "description": "1. version\ntecs@tecs-Aspire-4740:/opt/stack/nova/nova/compute$ git log -1\ncommit 545d8d8666389f33601b0b003dec844004694919\nMerge: a224d5e f5c9ebd\nAuthor: Jenkins <email address hidden>\nDate:   Fri Jun 3 19:25:23 2016 +0000\n\n\u00a0\u00a0\u00a0\u00a0Merge \"Fall back to flat config drive if not found in rbd\"\n\n2. code\n\u00a0\u00a0\u00a0\u00a0@mock.patch.object(objects.Migration, 'obj_as_admin')\n\u00a0\u00a0\u00a0\u00a0@mock.patch.object(objects.Migration, 'save')\n\u00a0\u00a0\u00a0\u00a0@mock.patch.object(objects.MigrationList, 'get_by_filters')\n\u00a0\u00a0\u00a0\u00a0@mock.patch.object(objects.InstanceList, 'get_by_filters')\n\u00a0\u00a0\u00a0\u00a0def _test_cleanup_incomplete_migrations(self, inst_host,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mock_inst_get_by_filters,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mock_migration_get_by_filters,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mock_save, mock_obj_as_admin):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def fake_inst(context, uuid, host):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inst = objects.Instance(context)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inst.uuid = uuid\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inst.host = host\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return inst\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def fake_migration(uuid, status, inst_uuid, src_host, dest_host):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0migration = objects.Migration()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0migration.uuid = uuid\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0migration.status = status\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0migration.instance_uuid = inst_uuid\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0migration.source_compute = src_host\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0migration.dest_compute = dest_host\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return migration\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fake_instances = [fake_inst(self.context, uuids.instance_1, inst_host),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fake_inst(self.context, uuids.instance_2, inst_host)]\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fake_migrations = [fake_migration('123', 'error',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0uuids.instance_1,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'fake-host', 'fake-mini'),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fake_migration('456', 'error',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0uuids.instance_2,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'fake-host', 'fake-mini')]\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mock_migration_get_by_filters.return_value = fake_migrations\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mock_inst_get_by_filters.return_value = fake_instances\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0with mock.patch.object(self.compute.driver, 'delete_instance_files'):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.compute._cleanup_incomplete_migrations(self.context)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Ensure that migration status is set to 'failed' after instance\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# files deletion for those instances whose instance.host is not\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# same as compute host where periodic task is running.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for inst in fake_instances:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for mig in fake_migrations:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if inst.uuid == mig.instance_uuid:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.assertEqual('failed', mig.status)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Make sure we filtered the instances by host in the DB query.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.assertEqual(CONF.host,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mock_inst_get_by_filters.call_args[0][1]['host'])\n\n        # (hanrong) start add\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for instance in mock_inst_get_by_filters.return_value:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.assertEqual(CONF.host,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0instance.host)\n      # (hanrong) end end\n\n\u00a0\u00a0\u00a0\u00a0def test_cleanup_incomplete_migrations_dest_node(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\"\"Test to ensure instance files are deleted from destination node.\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0If instance gets deleted during resizing/revert-resizing operation,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0in that case instance files gets deleted from instance.host (source\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0host here), but there is possibility that instance files could be\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0present on destination node.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0This test ensures that `_cleanup_incomplete_migration` periodic\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0task deletes orphaned instance files from destination compute node.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\"\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.flags(host='fake-mini')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self._test_cleanup_incomplete_migrations('fake-host')\n\n3.  I add this code in \"_test_cleanup_incomplete_migrations\" function\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for instance in mock_inst_get_by_filters.return_value:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.assertEqual(CONF.host,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0instance.host)\n\n4.   objects.InstanceList.get_by_filters will result instance.host==CONF.host\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inst_filters = {'deleted': True, 'soft_deleted': False,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'uuid': inst_uuid_from_migrations, 'host': CONF.host}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0instances = objects.InstanceList.get_by_filters(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0context, inst_filters, expected_attrs=attrs, use_slave=True)\n\n5. Then error is occur\n/usr/bin/python2.7 /usr/local/pycharm/helpers/pycharm/utrunner.py /opt/stack/nova/nova/tests/unit/compute/test_compute_mgr.py::ComputeManagerUnitTestCase::test_cleanup_incomplete_migrations_dest_node true\nTesting started at \u4e0a\u534810:14 ...\n\nFailure\n_StringException: pythonlogging:'': {{{2016-06-05 10:15:17,733 INFO [nova.virt.driver] Loading compute driver 'fake.SmallFakeDriver'}}}\n\nTraceback (most recent call last):\n\u00a0\u00a0File \"/opt/stack/nova/nova/tests/unit/compute/test_compute_mgr.py\", line 1638, in test_cleanup_incomplete_migrations_dest_node\n\u00a0\u00a0\u00a0\u00a0self._test_cleanup_incomplete_migrations('fake-host')\n\u00a0\u00a0File \"/usr/local/lib/python2.7/dist-packages/mock/mock.py\", line 1305, in patched\n\u00a0\u00a0\u00a0\u00a0return func(*args, **keywargs)\n\u00a0\u00a0File \"/opt/stack/nova/nova/tests/unit/compute/test_compute_mgr.py\", line 1625, in _test_cleanup_incomplete_migrations\n\u00a0\u00a0\u00a0\u00a0instance.host)\n\u00a0\u00a0File \"/usr/local/lib/python2.7/dist-packages/testtools/testcase.py\", line 362, in assertEqual\n\u00a0\u00a0\u00a0\u00a0self.assertThat(observed, matcher, message)\n\u00a0\u00a0File \"/usr/local/lib/python2.7/dist-packages/testtools/testcase.py\", line 447, in assertThat\n\u00a0\u00a0\u00a0\u00a0raise mismatch_error\ntesttools.matchers._impl.MismatchError: 'fake-mini' != u'fake-host'\n\n6. unit test scene was set error by this code\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fake_instances = [fake_inst(self.context, uuids.instance_1, inst_host),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fake_inst(self.context, uuids.instance_2, inst_host)]\n\u00a0\u00a0\u00a0\u00a0\u00a0mock_inst_get_by_filters.return_value = fake_instances\n\n7. so this might be right unit test scene\nfake_instances = [fake_inst(self.context, uuids.instance_1, CONF.host),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fake_inst(self.context, uuids.instance_2, CONF.host)]", 
    "tags": [], 
    "importance": "Medium", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1589181", 
    "owner": "https://api.launchpad.net/1.0/~hanrong", 
    "id": 1589181, 
    "index": 4546, 
    "created": "2016-06-05 02:31:19.401936+00:00", 
    "title": "Unit test scene of test_cleanup_incomplete_migrations_dest_node is set error.", 
    "comments": [
        {
            "content": "1. version\ntecs@tecs-Aspire-4740:/opt/stack/nova/nova/compute$ git log -1\ncommit 545d8d8666389f33601b0b003dec844004694919\nMerge: a224d5e f5c9ebd\nAuthor: Jenkins <email address hidden>\nDate:   Fri Jun 3 19:25:23 2016 +0000\n\n    Merge \"Fall back to flat config drive if not found in rbd\"\n\n2. code \n    @mock.patch.object(objects.Migration, 'obj_as_admin')\n    @mock.patch.object(objects.Migration, 'save')\n    @mock.patch.object(objects.MigrationList, 'get_by_filters')\n    @mock.patch.object(objects.InstanceList, 'get_by_filters')\n    def _test_cleanup_incomplete_migrations(self, inst_host,\n                                            mock_inst_get_by_filters,\n                                            mock_migration_get_by_filters,\n                                            mock_save, mock_obj_as_admin):\n        def fake_inst(context, uuid, host):\n            inst = objects.Instance(context)\n            inst.uuid = uuid\n            inst.host = host\n            return inst\n\n        def fake_migration(uuid, status, inst_uuid, src_host, dest_host):\n            migration = objects.Migration()\n            migration.uuid = uuid\n            migration.status = status\n            migration.instance_uuid = inst_uuid\n            migration.source_compute = src_host\n            migration.dest_compute = dest_host\n            return migration\n\n        fake_instances = [fake_inst(self.context, uuids.instance_1, inst_host),\n                          fake_inst(self.context, uuids.instance_2, inst_host)]\n\n        fake_migrations = [fake_migration('123', 'error',\n                                          uuids.instance_1,\n                                          'fake-host', 'fake-mini'),\n                           fake_migration('456', 'error',\n                                           uuids.instance_2,\n                                          'fake-host', 'fake-mini')]\n\n        mock_migration_get_by_filters.return_value = fake_migrations\n        mock_inst_get_by_filters.return_value = fake_instances\n\n        with mock.patch.object(self.compute.driver, 'delete_instance_files'):\n            self.compute._cleanup_incomplete_migrations(self.context)\n\n        # Ensure that migration status is set to 'failed' after instance\n        # files deletion for those instances whose instance.host is not\n        # same as compute host where periodic task is running.\n        for inst in fake_instances:\n            for mig in fake_migrations:\n                if inst.uuid == mig.instance_uuid:\n                    self.assertEqual('failed', mig.status)\n\n        # Make sure we filtered the instances by host in the DB query.\n        self.assertEqual(CONF.host,\n                         mock_inst_get_by_filters.call_args[0][1]['host'])\n        for instance in mock_inst_get_by_filters.return_value:\n            self.assertEqual(CONF.host,\n                             instance.host)\n\n    def test_cleanup_incomplete_migrations_dest_node(self):\n        \"\"\"Test to ensure instance files are deleted from destination node.\n\n        If instance gets deleted during resizing/revert-resizing operation,\n        in that case instance files gets deleted from instance.host (source\n        host here), but there is possibility that instance files could be\n        present on destination node.\n        This test ensures that `_cleanup_incomplete_migration` periodic\n        task deletes orphaned instance files from destination compute node.\n        \"\"\"\n        self.flags(host='fake-mini')\n        self._test_cleanup_incomplete_migrations('fake-host')\n\n3.  I add this code in \"_test_cleanup_incomplete_migrations\" function\n        for instance in mock_inst_get_by_filters.return_value:\n            self.assertEqual(CONF.host,\n                             instance.host)\n\n4.   objects.InstanceList.get_by_filters will result instance.host==CONF.host\n            inst_filters = {'deleted': True, 'soft_deleted': False,\n                        'uuid': inst_uuid_from_migrations, 'host': CONF.host}\n            instances = objects.InstanceList.get_by_filters(\n                context, inst_filters, expected_attrs=attrs, use_slave=True)\n\n5. Then error is occur\n/usr/bin/python2.7 /usr/local/pycharm/helpers/pycharm/utrunner.py /opt/stack/nova/nova/tests/unit/compute/test_compute_mgr.py::ComputeManagerUnitTestCase::test_cleanup_incomplete_migrations_dest_node true\nTesting started at \u4e0a\u534810:14 ...\n\nFailure\n_StringException: pythonlogging:'': {{{2016-06-05 10:15:17,733 INFO [nova.virt.driver] Loading compute driver 'fake.SmallFakeDriver'}}}\n\nTraceback (most recent call last):\n  File \"/opt/stack/nova/nova/tests/unit/compute/test_compute_mgr.py\", line 1638, in test_cleanup_incomplete_migrations_dest_node\n    self._test_cleanup_incomplete_migrations('fake-host')\n  File \"/usr/local/lib/python2.7/dist-packages/mock/mock.py\", line 1305, in patched\n    return func(*args, **keywargs)\n  File \"/opt/stack/nova/nova/tests/unit/compute/test_compute_mgr.py\", line 1625, in _test_cleanup_incomplete_migrations\n    instance.host)\n  File \"/usr/local/lib/python2.7/dist-packages/testtools/testcase.py\", line 362, in assertEqual\n    self.assertThat(observed, matcher, message)\n  File \"/usr/local/lib/python2.7/dist-packages/testtools/testcase.py\", line 447, in assertThat\n    raise mismatch_error\ntesttools.matchers._impl.MismatchError: 'fake-mini' != u'fake-host'\n\n\n6. unit test scene was set error by this code\n      fake_instances = [fake_inst(self.context, uuids.instance_1, inst_host),\n                                     fake_inst(self.context, uuids.instance_2, inst_host)]\n     mock_inst_get_by_filters.return_value = fake_instances\n\n7. so this might be right unit test scene\nfake_instances = [fake_inst(self.context, uuids.instance_1, CONF.host),\n                                     fake_inst(self.context, uuids.instance_2, CONF.host)]", 
            "date_created": "2016-06-05 02:31:19.401936+00:00", 
            "author": "https://api.launchpad.net/1.0/~hanrong"
        }, 
        {
            "content": "To keep the test purpose consistent, I modify code, but unit test case failed\n\n@mock.patch.object(objects.Migration, 'obj_as_admin')\n    @mock.patch.object(objects.Migration, 'save')\n    @mock.patch.object(objects.MigrationList, 'get_by_filters')\n    @mock.patch.object(objects.InstanceList, 'get_by_filters')\n    def _test_cleanup_incomplete_migrations(self, inst_host,\n                                            mock_inst_get_by_filters,\n                                            mock_migration_get_by_filters,\n                                            mock_save, mock_obj_as_admin):\n        def fake_inst(context, uuid, host):\n            inst = objects.Instance(context)\n            inst.uuid = uuid\n            inst.host = host\n            return inst\n\n        def fake_migration(uuid, status, inst_uuid, src_host, dest_host):\n            migration = objects.Migration()\n            migration.uuid = uuid\n            migration.status = status\n            migration.instance_uuid = inst_uuid\n            migration.source_compute = src_host\n            migration.dest_compute = dest_host\n            return migration\n\n        fake_instances = [fake_inst(self.context, uuids.instance_1, inst_host),\n                          fake_inst(self.context, uuids.instance_2, inst_host)]\n\n        fake_migrations = [fake_migration('123', 'error',\n                                          uuids.instance_1,\n                                          'fake-host', 'fake-mini'),\n                           fake_migration('456', 'error',\n                                           uuids.instance_2,\n                                          'fake-host', 'fake-mini')]\n\n        mock_migration_get_by_filters.return_value = fake_migrations\n\n        # hanrong start modify\n        def fake_instance_get_by_filters(context, filters,\n                                         sort_key='created_at',\n                                         sort_dir='desc', limit=None,\n                                         marker=None, expected_attrs=None,\n                                         use_slave=False,\n                                         sort_keys=None, sort_dirs=None\n                                         ):\n            filter_host = filters.get('host', None)\n            print 'filter_host', filter_host\n            if filter_host:\n                return [item for item in fake_instances\n                        if item.host == filter_host]\n            else:\n                return fake_instances\n\n        mock_inst_get_by_filters.side_effect = fake_instance_get_by_filters\n        # hanrong end modify\n\n        with mock.patch.object(self.compute.driver, 'delete_instance_files'):\n            self.compute._cleanup_incomplete_migrations(self.context)\n\n        # Ensure that migration status is set to 'failed' after instance\n        # files deletion for those instances whose instance.host is not\n        # same as compute host where periodic task is running.\n        for inst in fake_instances:\n            for mig in fake_migrations:\n                if inst.uuid == mig.instance_uuid:\n                    self.assertEqual('failed', mig.status)\n\n        # Make sure we filtered the instances by host in the DB query.\n        self.assertEqual(CONF.host,\n                         mock_inst_get_by_filters.call_args[0][1]['host'])", 
            "date_created": "2016-06-05 03:06:54.733314+00:00", 
            "author": "https://api.launchpad.net/1.0/~hanrong"
        }, 
        {
            "content": "usr/bin/python2.7 /usr/local/pycharm/helpers/pycharm/utrunner.py /opt/stack/nova/nova/tests/unit/compute/test_compute_mgr.py::ComputeManagerUnitTestCase::test_cleanup_incomplete_migrations_dest_node true\nTesting started at \u4e0a\u534811:01 ...\nfilter_host fake-mini\n\nFailure\n_StringException: pythonlogging:'': {{{2016-06-05 11:01:56,808 INFO [nova.virt.driver] Loading compute driver 'fake.SmallFakeDriver'}}}\n\nTraceback (most recent call last):\n  File \"/opt/stack/nova/nova/tests/unit/compute/test_compute_mgr.py\", line 1651, in test_cleanup_incomplete_migrations_dest_node\n    self._test_cleanup_incomplete_migrations('fake-host')\n  File \"/usr/local/lib/python2.7/dist-packages/mock/mock.py\", line 1305, in patched\n    return func(*args, **keywargs)\n  File \"/opt/stack/nova/nova/tests/unit/compute/test_compute_mgr.py\", line 1634, in _test_cleanup_incomplete_migrations\n    self.assertEqual('failed', mig.status)\n  File \"/usr/local/lib/python2.7/dist-packages/testtools/testcase.py\", line 362, in assertEqual\n    self.assertThat(observed, matcher, message)\n  File \"/usr/local/lib/python2.7/dist-packages/testtools/testcase.py\", line 447, in assertThat\n    raise mismatch_error\ntesttools.matchers._impl.MismatchError: 'failed' != u'error'", 
            "date_created": "2016-06-05 03:07:09.027370+00:00", 
            "author": "https://api.launchpad.net/1.0/~hanrong"
        }, 
        {
            "content": "I think the code of _cleanup_incomplete_migrations function is error. I'm modifying the code logic of _cleanup_incomplete_migrations function now.", 
            "date_created": "2016-06-05 03:08:53.436514+00:00", 
            "author": "https://api.launchpad.net/1.0/~hanrong"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/325635", 
            "date_created": "2016-06-05 06:34:02.815903+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "It is duplicated bug: https://bugs.launchpad.net/nova/+bug/1589821", 
            "date_created": "2016-06-12 00:57:47.839820+00:00", 
            "author": "https://api.launchpad.net/1.0/~hanrong"
        }, 
        {
            "content": "Change abandoned by Rong Han (<email address hidden>) on branch: master\nReview: https://review.openstack.org/325635\nReason: https://review.openstack.org/#/c/326262 is merged", 
            "date_created": "2016-06-12 00:58:45.995837+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ]
}
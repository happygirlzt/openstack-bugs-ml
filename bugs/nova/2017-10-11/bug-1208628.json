{
    "status": "Fix Released", 
    "last_updated": "2013-10-17 11:56:58.799908+00:00", 
    "description": "The logic to check if the host being added to an availability zone is already a member of an availability zone in add_host_to_aggregate() added in: I788782a9f21ec2672551f75123753175bb268586 does not work correctly. The db query to get the availability_zone key from the aggregate metadata returns a set of values. However the pop() call only returns the last entry in the set. Additionally, the pop() would not work if db call returned nothing for the az key.\n\nAlso there was no protection against the availability zone key not being in the database. So if if an aggregate was created without an availability zone this check would raise a KeyError when you tried to add a host to it.", 
    "tags": [], 
    "importance": "High", 
    "heat": 14, 
    "link": "https://bugs.launchpad.net/nova/+bug/1208628", 
    "owner": "https://api.launchpad.net/1.0/~treinish", 
    "id": 1208628, 
    "index": 1172, 
    "created": "2013-08-05 22:36:22.351356+00:00", 
    "title": "Logic in add_host_to_aggregate() is incorrect.", 
    "comments": [
        {
            "content": "The logic to check if the host being added to an availability zone is already a member of an availability zone in add_host_to_aggregate() added in: I788782a9f21ec2672551f75123753175bb268586 does not work correctly. The db query to get the availability_zone key from the aggregate metadata returns a set of values. However the pop() call only returns the last entry in the set. Additionally, the pop() would not work if db call returned nothing for the az key.\n\nAlso there was no protection against the availability zone key not being in the database. So if if an aggregate was created without an availability zone this check would raise a KeyError when you tried to add a host to it.", 
            "date_created": "2013-08-05 22:36:22.351356+00:00", 
            "author": "https://api.launchpad.net/1.0/~treinish"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/40424", 
            "date_created": "2013-08-06 14:19:18.123705+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "I'm not sure the distinction between aggregates and availability zones is totally logical.\n\nIt seems to me that the ideal solution would be to throw out the mapping between aggregates and availability zones (or make it a 1:1 mapping), allow a host to be part of mulitple aggregates, and allow an instance to specify multiple aggregates.\n\nSuppose I have aggregates \"has_ssd\", \"has_10g_network\", \"western_power_grid\" and \"eastern_power_grid\".\n\nMaybe I have a host that matches \"has_ssd\",  \"has_10g_network\", and \"western_power_grid\", and another that matches \"has_ssd\" and \"eastern_power_grid\".\n\nAs an end-user I could spin up an instance (not a flavor) that specifies \"has_ssd\" and it could go anywhere, while if I specified \"has_ssd\" and \"eastern_power_grid\" then it would only go to one specific host.", 
            "date_created": "2013-08-19 15:35:30.329497+00:00", 
            "author": "https://api.launchpad.net/1.0/~cbf123"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/40424\nCommitted: http://github.com/openstack/nova/commit/52738c7fa69e960b4cc1562b5933a41ebea0d6cc\nSubmitter: Jenkins\nBranch:    master\n\ncommit 52738c7fa69e960b4cc1562b5933a41ebea0d6cc\nAuthor: Matthew Treinish <email address hidden>\nDate:   Mon Aug 5 18:37:47 2013 -0400\n\n    Fix logic in add_host_to_aggregate()\n    \n    Commit I788782a9f21ec2672551f75123753175bb268586 introduced some\n    changes into the add_host_to_aggregate() method to catch adding an\n    host to an availability zone when the host was already a member of\n    a different availability zone. However there were a couple of issues\n    with this change. There was no check that the availability_zone was\n    in the metadata grabbed from the database which would raise a\n    KeyError back to the api. Additionally, the check wouldn't always\n    work as expected because the database returned a set of availability\n    zones (including sometimes an empty set) so the check would fail in\n    some conditions when it was expected to pass.\n    \n    This commit fixes the logic for checking if the host is already in an\n    availability zone. It also replaces the try/except block in the\n    aggregates extension to check up front if the action is valid instead\n    of waiting for a key error when it goes to use the action.\n    \n    Fixes bug 1208627\n    Fixes bug 1208628\n    \n    Change-Id: I81b79602e23e78c8b077d313e556796de1255bbf\n", 
            "date_created": "2013-08-22 18:09:00.111499+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ]
}
{
    "status": "Fix Released", 
    "last_updated": "2012-01-03 10:15:40.073745+00:00", 
    "description": "The error handling in libvirt_conn is not great; there's a lot of catching of generic exceptions and assuming that any error is the error we think it's likely to be.\n\nI hit this one hard when testing my 'don't erase all instances on host reboot patch'.  For each instance, it called get_info, assuming that if this throws an exception that means the VM has been deleted.  It then marks the instance deleted in the DB.\n\n_but_ libvirt wasn't started.  (I don't know why, something was screwy with my upstart).  Every get_info failed with a connection error, and every instance was removed.  Not good.\n\nI'm changing the generic \"except:\" handler to something like this:\n\ntry:\n            virt_dom = self._conn.lookupByName(instance_name)\n        except libvirt.libvirtError as e:\n            LOG.warning(_(\"Error from libvirt during lookup: %s\") % e)\n            if e.get_error_code() == libvirt.VIR_ERR_UNKNOWN_HOST:\n                raise exception.NotFound(_(\"Instance %s not found\")\n                                         % instance_name)\n            # TODO(justinsb): How do I raise this and keep the stack trace?\n            raise e\n\n\n(Though I haven't tested that code yet)\n\nWe probably need to go through _every_ catch block in libvirt_conn and do something similar.  We could probably use a helper function here to make this less painful, though it might be less readable.", 
    "tags": [], 
    "importance": "Wishlist", 
    "heat": 8, 
    "link": "https://bugs.launchpad.net/nova/+bug/741468", 
    "owner": "None", 
    "id": 741468, 
    "index": 1026, 
    "created": "2011-03-24 05:03:48.740270+00:00", 
    "title": "libvirt error handling is poor", 
    "comments": [
        {
            "content": "The error handling in libvirt_conn is not great; there's a lot of catching of generic exceptions and assuming that any error is the error we think it's likely to be.\n\nI hit this one hard when testing my 'don't erase all instances on host reboot patch'.  For each instance, it called get_info, assuming that if this throws an exception that means the VM has been deleted.  It then marks the instance deleted in the DB.\n\n_but_ libvirt wasn't started.  (I don't know why, something was screwy with my upstart).  Every get_info failed with a connection error, and every instance was removed.  Not good.\n\nI'm changing the generic \"except:\" handler to something like this:\n\ntry:\n            virt_dom = self._conn.lookupByName(instance_name)\n        except libvirt.libvirtError as e:\n            LOG.warning(_(\"Error from libvirt during lookup: %s\") % e)\n            if e.get_error_code() == libvirt.VIR_ERR_UNKNOWN_HOST:\n                raise exception.NotFound(_(\"Instance %s not found\")\n                                         % instance_name)\n            # TODO(justinsb): How do I raise this and keep the stack trace?\n            raise e\n\n\n(Though I haven't tested that code yet)\n\nWe probably need to go through _every_ catch block in libvirt_conn and do something similar.  We could probably use a helper function here to make this less painful, though it might be less readable.", 
            "date_created": "2011-03-24 05:03:48.740270+00:00", 
            "author": "https://api.launchpad.net/1.0/~justin-fathomdb"
        }, 
        {
            "content": "Just \"raise\" without the \"e\" will reraise the current exception and keep the stack trace intact.\r\n\r\n> -----Original Message-----\r\n> From: <email address hidden> [mailto:<email address hidden>] On Behalf Of\r\n> justinsb\r\n> Sent: 24 March 2011 05:04\r\n> To: Ewan Mellor\r\n> Subject: [Bug 741468] [NEW] libvirt error handling is poor\r\n> \r\n> Public bug reported:\r\n> \r\n> The error handling in libvirt_conn is not great; there's a lot of\r\n> catching of generic exceptions and assuming that any error is the error\r\n> we think it's likely to be.\r\n> \r\n> I hit this one hard when testing my 'don't erase all instances on host\r\n> reboot patch'.  For each instance, it called get_info, assuming that if\r\n> this throws an exception that means the VM has been deleted.  It then\r\n> marks the instance deleted in the DB.\r\n> \r\n> _but_ libvirt wasn't started.  (I don't know why, something was screwy\r\n> with my upstart).  Every get_info failed with a connection error, and\r\n> every instance was removed.  Not good.\r\n> \r\n> I'm changing the generic \"except:\" handler to something like this:\r\n> \r\n> try:\r\n>             virt_dom = self._conn.lookupByName(instance_name)\r\n>         except libvirt.libvirtError as e:\r\n>             LOG.warning(_(\"Error from libvirt during lookup: %s\") % e)\r\n>             if e.get_error_code() == libvirt.VIR_ERR_UNKNOWN_HOST:\r\n>                 raise exception.NotFound(_(\"Instance %s not found\")\r\n>                                          % instance_name)\r\n>             # TODO(justinsb): How do I raise this and keep the stack\r\n> trace?\r\n>             raise e\r\n> \r\n> \r\n> (Though I haven't tested that code yet)\r\n> \r\n> We probably need to go through _every_ catch block in libvirt_conn and\r\n> do something similar.  We could probably use a helper function here to\r\n> make this less painful, though it might be less readable.\r\n> \r\n> ** Affects: nova\r\n>      Importance: Undecided\r\n>          Status: New\r\n> \r\n> --\r\n> You received this bug notification because you are subscribed to\r\n> OpenStack Compute (nova).\r\n> https://bugs.launchpad.net/bugs/741468\r\n> \r\n> Title:\r\n>   libvirt error handling is poor\r\n> \r\n> Status in OpenStack Compute (Nova):\r\n>   New\r\n> \r\n> Bug description:\r\n>   The error handling in libvirt_conn is not great; there's a lot of\r\n>   catching of generic exceptions and assuming that any error is the\r\n>   error we think it's likely to be.\r\n> \r\n>   I hit this one hard when testing my 'don't erase all instances on\r\n> host\r\n>   reboot patch'.  For each instance, it called get_info, assuming that\r\n>   if this throws an exception that means the VM has been deleted.  It\r\n>   then marks the instance deleted in the DB.\r\n> \r\n>   _but_ libvirt wasn't started.  (I don't know why, something was\r\n> screwy\r\n>   with my upstart).  Every get_info failed with a connection error, and\r\n>   every instance was removed.  Not good.\r\n> \r\n>   I'm changing the generic \"except:\" handler to something like this:\r\n> \r\n>   try:\r\n>               virt_dom = self._conn.lookupByName(instance_name)\r\n>           except libvirt.libvirtError as e:\r\n>               LOG.warning(_(\"Error from libvirt during lookup: %s\") %\r\n> e)\r\n>               if e.get_error_code() == libvirt.VIR_ERR_UNKNOWN_HOST:\r\n>                   raise exception.NotFound(_(\"Instance %s not found\")\r\n>                                            % instance_name)\r\n>               # TODO(justinsb): How do I raise this and keep the stack\r\n> trace?\r\n>               raise e\r\n> \r\n> \r\n>   (Though I haven't tested that code yet)\r\n> \r\n>   We probably need to go through _every_ catch block in libvirt_conn\r\n> and\r\n>   do something similar.  We could probably use a helper function here\r\n> to\r\n>   make this less painful, though it might be less readable.\r\n", 
            "date_created": "2011-03-24 10:01:43+00:00", 
            "author": "https://api.launchpad.net/1.0/~ewanmellor"
        }, 
        {
            "content": "Thanks Ewan.  I've been told that eventlet breaks that though...?\n\nI did find a 3-arg raise command, but it was a little bit too much Python\nfor me to get my head around.\n", 
            "date_created": "2011-03-24 10:20:37+00:00", 
            "author": "https://api.launchpad.net/1.0/~justin-fathomdb"
        }, 
        {
            "content": "From what I understand eventlet comes into play only if you explicitly call it during error handling (as in https://bugs.launchpad.net/glance/+bug/726742). \n\nIn this case I think the no-arg raise should work, since `sys.exc_clear()` isn't ever called from eventlet.", 
            "date_created": "2011-03-24 12:48:12.443606+00:00", 
            "author": "https://api.launchpad.net/1.0/~blamar"
        }, 
        {
            "content": "> From what I understand eventlet comes into play only if you explicitly call it during error handling \n\nExactly right.\n\n> I did find a 3-arg raise command\n\nI initially used a 3-arg raise in Glance to work around the problem. It worked beautifully, just one problem though, it's not pep-8 compat. After a few weeks of suffering though complaints, Jaypipes just made this change:\n\n\n- 324             raise exc_type, exc_value, exc_traceback\n+324            raise exc_type(exc_traceback)", 
            "date_created": "2011-03-25 14:48:06.086115+00:00", 
            "author": "https://api.launchpad.net/1.0/~rconradharris"
        }, 
        {
            "content": "Thanks for the explanation all.\n\nI always like to think of the future evolution of the code, so while this\nmight be safe today:\n\nexcept libvirt.libvirtError as e:\n             LOG.warning(_(\"Error from libvirt during lookup: %s\") % e)\n             raise\n\n...it sounds like if we plugged in a centralized logging solution that fired\noff HTTP messages using eventlet (or even wrote to files using eventlet?),\nthat this would no longer be safe.\n\nBut having seen the alternative (thanks Rick & Brian for the info) I think\nmaybe it's better just to live with the no-arg throw...  If we ever plug in\nan logger that clears exceptions, we can probably put the responsibility for\nmaking sure that the exceptions aren't swallowed on that code.\n\n---\n\nFor anyone reading this bug that's a little confused, this discussion was\nabout my TODO note.  The \"catch-all\" libvirt error handling is still\nproblematic.\n", 
            "date_created": "2011-03-25 20:56:09+00:00", 
            "author": "https://api.launchpad.net/1.0/~justin-fathomdb"
        }, 
        {
            "content": "Ewan suggests that this has been addressed well enough that this ticket is no longer useful, and I agree.", 
            "date_created": "2012-01-03 10:15:38.360737+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }
    ]
}
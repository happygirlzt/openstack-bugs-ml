{
    "status": "Fix Released", 
    "last_updated": "2011-10-21 05:24:53.538209+00:00", 
    "description": "OK, so I'm familiar with virtualenv, and have been developing Nova with virtualenv for a while now, with no problems if I use the instructions I put up on my blog here:\n\nhttp://www.joinfu.com/2010/07/developing-nova-on-linux-getting-started/\n\nHowever, if I try to use the \"automated\" virtualenv/run_tests.sh stuff, everything bombs, and IMHO, it bombs unnecessarily.\n\nI'm on Linux, Ubuntu Lucid, but it really shouldn't matter *what* I have installed locally if we use virtualenv properly.  Let me show you what happens when I try to do things \"the automated\" way using run_tests.sh and /tools/install_virtualenv.py.\n\njpipes@serialcoder:~/repos/nova/pylint-nova-objectstore-handler$ ./run_tests.sh\nYou need to install the Nova virtualenv before you can run this.\n\nPlease run tools/install_venv.py\njpipes@serialcoder:~/repos/nova/pylint-nova-objectstore-handler$ python tools/install_venv.py\nChecking for pip... done.\nChecking for virtualenv... done.\nCreating venv... done.\nInstalling dependencies with pip (this can take a while)...\nException:\nTraceback (most recent call last):\n\u00a0\u00a0File \"/usr/lib/python2.6/dist-packages/pip.py\", line 252, in main\n\u00a0\u00a0\u00a0\u00a0self.run(options, args)\n\u00a0\u00a0File \"/usr/lib/python2.6/dist-packages/pip.py\", line 408, in run\n\u00a0\u00a0\u00a0\u00a0requirement_set.install_files(finder, force_root_egg_info=self.bundle)\n\u00a0\u00a0File \"/usr/lib/python2.6/dist-packages/pip.py\", line 1721, in install_files\n\u00a0\u00a0\u00a0\u00a0if req_to_install.check_if_exists():\n\u00a0\u00a0File \"/usr/lib/python2.6/dist-packages/pip.py\", line 1583, in check_if_exists\n\u00a0\u00a0\u00a0\u00a0dist = pkg_resources.get_distribution(self.req)\n\u00a0\u00a0File \"/usr/share/pyshared/pkg_resources.py\", line 292, in get_distribution\n\u00a0\u00a0\u00a0\u00a0if isinstance(dist,Requirement): dist = get_provider(dist)\n\u00a0\u00a0File \"/usr/share/pyshared/pkg_resources.py\", line 176, in get_provider\n\u00a0\u00a0\u00a0\u00a0return working_set.find(moduleOrReq) or require(str(moduleOrReq))[0]\n\u00a0\u00a0File \"/usr/share/pyshared/pkg_resources.py\", line 436, in find\n\u00a0\u00a0\u00a0\u00a0raise VersionConflict(dist,req)     # XXX add more info\nVersionConflict: (anyjson 0.2.2 (/usr/share/pyshared), Requirement.parse('anyjson==0.2.4'))\n\nStoring complete log in ./pip-log.txt\nCommand \"pip install -E .nova-venv -r tools/pip-requires\" failed.\nNone\n\n===\n\nThis is just outright annoying.  The whole purpose of a virtualenv is to install packages into a virtual environment that don't necessarily match what's already on your system.\n\nI feel there are a couple of issues with the current scripts:\n\n1) There is really no need to have PIP be a dependency *before* creating the virtualenv.  Right now, not having PIP will bomb out the install_virtenv.py script needlessly.  PIP could be installed once the virtualenv is activated.\n\n2) The run_tests.sh can be adapted to simply all the needed dependencies automatically if virtualenv is found and the .nova-venv directory does not exist.  There's really no need to exit and make the user do it manually.\n\n", 
    "tags": [], 
    "importance": "Low", 
    "heat": 10, 
    "link": "https://bugs.launchpad.net/nova/+bug/615906", 
    "owner": "https://api.launchpad.net/1.0/~jaypipes", 
    "id": 615906, 
    "index": 4926, 
    "created": "2010-08-10 15:10:20.385057+00:00", 
    "title": "pip-requires and virtualenv don't play together nicely", 
    "comments": [
        {
            "content": "OK, so I'm familiar with virtualenv, and have been developing Nova with virtualenv for a while now, with no problems if I use the instructions I put up on my blog here:\n\n\n\nHowever, if I try to use the \"automated\" virtualenv/run_tests.sh stuff, everything bombs, and IMHO, it bombs unnecessarily.\n\nI'm on Linux, Ubuntu Lucid, but it really shouldn't matter *what* I have installed locally if we use virtualenv properly.  Let me show you what happens when I try to do things \"the automated\" way using run_tests.sh and /tools/install_virtualenv.py.\n\njpipes@serialcoder:~/repos/nova/pylint-nova-objectstore-handler$ ./run_tests.sh \nYou need to install the Nova virtualenv before you can run this.\n\nPlease run tools/install_venv.py\njpipes@serialcoder:~/repos/nova/pylint-nova-objectstore-handler$ python tools/install_venv.py \nChecking for pip... done.\nChecking for virtualenv... done.\nCreating venv... done.\nInstalling dependencies with pip (this can take a while)...\nException:\nTraceback (most recent call last):\n  File \"/usr/lib/python2.6/dist-packages/pip.py\", line 252, in main\n    self.run(options, args)\n  File \"/usr/lib/python2.6/dist-packages/pip.py\", line 408, in run\n    requirement_set.install_files(finder, force_root_egg_info=self.bundle)\n  File \"/usr/lib/python2.6/dist-packages/pip.py\", line 1721, in install_files\n    if req_to_install.check_if_exists():\n  File \"/usr/lib/python2.6/dist-packages/pip.py\", line 1583, in check_if_exists\n    dist = pkg_resources.get_distribution(self.req)\n  File \"/usr/share/pyshared/pkg_resources.py\", line 292, in get_distribution\n    if isinstance(dist,Requirement): dist = get_provider(dist)\n  File \"/usr/share/pyshared/pkg_resources.py\", line 176, in get_provider\n    return working_set.find(moduleOrReq) or require(str(moduleOrReq))[0]\n  File \"/usr/share/pyshared/pkg_resources.py\", line 436, in find\n    raise VersionConflict(dist,req)     # XXX add more info\nVersionConflict: (anyjson 0.2.2 (/usr/share/pyshared), Requirement.parse('anyjson==0.2.4'))\n\nStoring complete log in ./pip-log.txt\nCommand \"pip install -E .nova-venv -r tools/pip-requires\" failed.\nNone\n\n===\n\nThis is just outright annoying.  The whole purpose of a virtualenv is to install packages into a virtual environment that don't necessarily match what's already on your system.  \n\nI feel there are a couple of issues with the current scripts:\n\n1) There is really no need to have PIP be a dependency *before* creating the virtualenv.  Right now, not having PIP will bomb out the install_virtenv.py script needlessly.  PIP could be installed once the virtualenv is activated.\n\n2) The run_tests.sh can be adapted to simply all the needed dependencies automatically if virtualenv is found and the .nova-venv directory does not exist.  There's really no need to exit and make the user do it manually.", 
            "date_created": "2010-08-10 15:10:20.385057+00:00", 
            "author": "https://api.launchpad.net/1.0/~jaypipes"
        }, 
        {
            "content": "Note that a the installation won't work if the developer does not have python's development headers, since M2Crypto builds the extension manually and must link with Python.h.\n\nNot sure how we can enforce this with the pip-requires file?  Open to suggestions.", 
            "date_created": "2010-08-10 16:53:47.823091+00:00", 
            "author": "https://api.launchpad.net/1.0/~jaypipes"
        }, 
        {
            "content": "Yeah i was noting this.  On ubuntu you can do:\napt-get build-dep python-m2crypto\nShould we check and run the apt-get command?\n\nVish\n\nOn Tue, Aug 10, 2010 at 9:53 AM, Jay Pipes <email address hidden>wrote:\n\n> Note that a the installation won't work if the developer does not have\n> python's development headers, since M2Crypto builds the extension\n> manually and must link with Python.h.\n>\n> Not sure how we can enforce this with the pip-requires file?  Open to\n> suggestions.\n>\n> --\n> pip-requires and virtualenv don't play together nicely\n> https://bugs.launchpad.net/bugs/615906\n> You received this bug notification because you are a member of Nova\n> Bugs, which is subscribed to OpenStack Compute (nova).\n>\n> Status in OpenStack Compute (Nova): Fix Committed\n>\n> Bug description:\n> OK, so I'm familiar with virtualenv, and have been developing Nova with\n> virtualenv for a while now, with no problems if I use the instructions I put\n> up on my blog here:\n>\n> http://www.joinfu.com/2010/07/developing-nova-on-linux-getting-started/\n>\n> However, if I try to use the \"automated\" virtualenv/run_tests.sh stuff,\n> everything bombs, and IMHO, it bombs unnecessarily.\n>\n> I'm on Linux, Ubuntu Lucid, but it really shouldn't matter *what* I have\n> installed locally if we use virtualenv properly.  Let me show you what\n> happens when I try to do things \"the automated\" way using run_tests.sh and\n> /tools/install_virtualenv.py.\n>\n> jpipes@serialcoder:~/repos/nova/pylint-nova-objectstore-handler$\n> ./run_tests.sh\n> You need to install the Nova virtualenv before you can run this.\n>\n> Please run tools/install_venv.py\n> jpipes@serialcoder:~/repos/nova/pylint-nova-objectstore-handler$ python\n> tools/install_venv.py\n> Checking for pip... done.\n> Checking for virtualenv... done.\n> Creating venv... done.\n> Installing dependencies with pip (this can take a while)...\n> Exception:\n> Traceback (most recent call last):\n>   File \"/usr/lib/python2.6/dist-packages/pip.py\", line 252, in main\n>     self.run(options, args)\n>   File \"/usr/lib/python2.6/dist-packages/pip.py\", line 408, in run\n>     requirement_set.install_files(finder, force_root_egg_info=self.bundle)\n>   File \"/usr/lib/python2.6/dist-packages/pip.py\", line 1721, in\n> install_files\n>     if req_to_install.check_if_exists():\n>   File \"/usr/lib/python2.6/dist-packages/pip.py\", line 1583, in\n> check_if_exists\n>     dist = pkg_resources.get_distribution(self.req)\n>   File \"/usr/share/pyshared/pkg_resources.py\", line 292, in\n> get_distribution\n>     if isinstance(dist,Requirement): dist = get_provider(dist)\n>   File \"/usr/share/pyshared/pkg_resources.py\", line 176, in get_provider\n>     return working_set.find(moduleOrReq) or require(str(moduleOrReq))[0]\n>   File \"/usr/share/pyshared/pkg_resources.py\", line 436, in find\n>     raise VersionConflict(dist,req)     # XXX add more info\n> VersionConflict: (anyjson 0.2.2 (/usr/share/pyshared),\n> Requirement.parse('anyjson==0.2.4'))\n>\n> Storing complete log in ./pip-log.txt\n> Command \"pip install -E .nova-venv -r tools/pip-requires\" failed.\n> None\n>\n> ===\n>\n> This is just outright annoying.  The whole purpose of a virtualenv is to\n> install packages into a virtual environment that don't necessarily match\n> what's already on your system.\n>\n> I feel there are a couple of issues with the current scripts:\n>\n> 1) There is really no need to have PIP be a dependency *before* creating\n> the virtualenv.  Right now, not having PIP will bomb out the\n> install_virtenv.py script needlessly.  PIP could be installed once the\n> virtualenv is activated.\n>\n> 2) The run_tests.sh can be adapted to simply all the needed dependencies\n> automatically if virtualenv is found and the .nova-venv directory does not\n> exist.  There's really no need to exit and make the user do it manually.\n>\n>\n>\n>\n>\n", 
            "date_created": "2010-08-10 22:53:09+00:00", 
            "author": "https://api.launchpad.net/1.0/~vishvananda"
        }, 
        {
            "content": "So...I was trying to keep Andy's original intention of being platform-agnostic in the script, so I only rely on easy_install.\n\nLemme ask Monty (or Andy, if you know!) if setup.py has some ability to do a C++-like configure.ac for checking non-Python build dependencies like this...", 
            "date_created": "2010-08-11 15:32:55.297999+00:00", 
            "author": "https://api.launchpad.net/1.0/~jaypipes"
        }, 
        {
            "content": "I am late to this thread but I don't think this issue is valid.\n\nI don't understand how you are getting the error you are getting. Either you are using a clean virtualenv and the only version of anyjson available for download is 0.2.4 or you are not using a clean virtualenv.\n\nIn the first case it means we should change the pip-requires file to be more lenient on the version of anyjson, in fact we don't even require it some other library does.\n\nIn the second case we just need to make sure we are passing the right flags to make a clean virtual env.\n\nTowards the patch that already appears \"Merged\" the exact opposite patch to change the behavior form doing what you are already doing is how we got to this point, so that patch should be reverted pending discussion with the people who reviewed and discussed the original patch (i think myself, monty and soren). The main goal was not to install anything on anybody's system without them agreeing to it first, and additionally any packages that need to be installed globally probably need to be run with root so the script should choke if it tried to install virtualenv without being run with sudo.\n\nAs for installing pip in the virtualenv itself that seems fine, though I don't feel like it has much impact.\n\nAs for checking the build stuff for m2crypto I don't think there is much of a way around telling them it is somewhat tricky, but we can certainly check if they are linux and if they are check with apt-get and tell them what to do, `uname` is usually enough to determine their platform or we can `which` apt-get", 
            "date_created": "2010-08-11 17:33:06.757256+00:00", 
            "author": "https://api.launchpad.net/1.0/~termie"
        }, 
        {
            "content": "Going to put in a follow-up patch to remove the automatic installation of virtualenv.  Per IRC convo with termie:\n\n<jaypipes> termie: so...this bug: https://bugs.launchpad.net/nova/+bug/610402\n<jaypipes> termie: that is the original one you are referring to, right?\n<jaypipes> termie: in regards to my patch on installing into virtualenv?\n<termie> jaypipes: no, not really\n<termie> jaypipes: so, i first added this makefile that did this stuff\n<termie> soren had issue with it because it was installing things on the system\n<termie> the decision was to move the installation to a separate script\n<termie> then the makefile changed to suit hudson\n<termie> then the makefil was removed to suit debian\n<jaypipes> termie: ah, ok, which was the tools/with_virt.sh and install_venv?\n<termie> and the test stuff put into run_test.ssh\n<termie> jaypipes: correcy\n<jaypipes> gotcha.\n<termie> the main goal of the whole thing is just to try to make everybody use the same environment\n<termie> so that bug reports are limited to actual bugs rather than library mismatches\n<termie> and to make it easier for people to run the tests so that they actually do it\n<jaypipes> termie: so, the newer bug (615906) was due to, apparently, when running install_venv, the pip -E was apparently *not* respecting the --no-site-packages... or at least, that's what it seemed to me.  There should be no need to have *any* version of anyjson on my local system for run_tests.sh and install_venv.py to succeed (since pip should just install it into the venv), but that's not what happened.\n* jaypipes thinks that is hard to follow...but that's the story :)\n<termie> jaypipes: right, which is what i was guessing in my statement that it was not a clean virtualenv\n<termie> so i think the bugfix is to make sure it is a clean virtualenv\n<jaypipes> termie: but it was :)\n<termie> jaypipes: then fix the bug ;)\n<jaypipes> termie: oh, are you saying that the fix was to rm -rf the virtualenv?\n<termie> no, i am saying the fix is to make sure that you are getting the version of anyjson that is in the virtualenv\n* jaypipes really not understanding...\n<termie> since that is the main purpose of vitualenv and it tends to work quite well at it i am assumign somewhere in here we have some user error and my code was doing it wrong\n<termie> if pip is not respecting the virtualenv when it is checking dependencies we should find a way to make sure it does\n<termie> because it certainly seems to every time i use it\n<termie> otherwise it wouldn't be installing things i already have on my system\n<jaypipes> termie: I can only tell you what happened...\n<jaypipes> termie: the only solution I found was to adapt the install_venv script to call tools/with_venv.sh pip -E blah blah instead of just pip -E blah blah...\n<termie> jaypipes: then perhaps that is a fine solution\n<jaypipes> termie: which, reading the docs for pip seemed redundant, but unfortunately, that's all that worked. :(\n<termie> jaypipes: but the patch you have is not limited to that\n<jaypipes> termie: the only other thing the patch does is automatically install virtualenv instead of returning an error message saying virtualenv is required...\n<jaypipes> termie: when run_tests.sh is run.\n<termie> jaypipes: yup, but that is different functionality that, as i said, has been discussed and decided agianst previously\n<termie> because that was the original functionality\n<termie> and it was changed to be what it is now (prior to your patch)\n<jaypipes> termie: ok, understood now.  I'll put in a follow-up to remove that part.", 
            "date_created": "2010-08-11 20:28:26.153932+00:00", 
            "author": "https://api.launchpad.net/1.0/~jaypipes"
        }, 
        {
            "content": "On 08/11/2010 08:32 AM, Jay Pipes wrote:\n> So...I was trying to keep Andy's original intention of being platform-\n> agnostic in the script, so I only rely on easy_install.\n> \n> Lemme ask Monty (or Andy, if you know!) if setup.py has some ability to\n> do a C++-like configure.ac for checking non-Python build dependencies\n> like this...\n\nNot really - it's the main deficiency in using easy_install/etc. rather\nthan system stuff.\n\nOTOH, it _is_ python, so one can write anything, but it's not a feature\nof the system and I'm not sure I believe we should put it in there.\n\nI think it may just have to be ok for there to be a step or two someone\nhas to do (such as apt-get install) to get some of the components. They\naren't going to be installed into the virtualenv anyway...\n\nMonty\n\n\n\nConfidentiality Notice: This e-mail message (including any attached or\nembedded documents) is intended for the exclusive and confidential use of the\nindividual or entity to which this message is addressed, and unless otherwise\nexpressly indicated, is confidential and privileged information of Rackspace.\nAny dissemination, distribution or copying of the enclosed material is prohibited.\nIf you receive this transmission in error, please notify us immediately by e-mail\nat <email address hidden>, and delete the original message.\nYour cooperation is appreciated.\n", 
            "date_created": "2010-08-12 05:04:04+00:00", 
            "author": "https://api.launchpad.net/1.0/~mordred"
        }
    ]
}
{
    "status": "Fix Released", 
    "last_updated": "2012-09-27 15:27:49.938180+00:00", 
    "description": "In the new reservation based quota handling code, the logic for deleting an instance creates a negative reservation at the start of the api call and commits it once the request has been cast to the compute manager:\n\n...\n            self.compute_rpcapi.terminate_instance(context, instance)\n\n            QUOTAS.commit(context, reservations) ...\n...\n\nThe code does include checks for instance['host'] beign null and InstanceNotFound to catch race conditions if the instance has been deleted\n\nBut in the case where a second delete request were processed in the API server before the first request has been processed in the compute manager (for example consider that the compute manager is down and the user makes multiple requests because the first didn\u2019t seem to finish) these checks won\u2019t fail, which will lead to the quota being released each time the commit is processed in the API server.\n\nThe fix would seem to be to pass the negative reservations down into the compute manager so that they only get committed when the delete is processed.   \n\nIn the compute manager the delete requests for an instance are synchronised on the uuid, so a second request won\u2019t run until the first has finished, hence a check at the start to see if the instance still exists and do the rollback there should work OK.", 
    "tags": [], 
    "importance": "Medium", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1027187", 
    "owner": "https://api.launchpad.net/1.0/~eglynn", 
    "id": 1027187, 
    "index": 2973, 
    "created": "2012-07-20 18:02:57.366863+00:00", 
    "title": "Quota handing is broken for multiple delete requests will reduce the", 
    "comments": [
        {
            "content": "In the new reservation based quota handling code, the logic for deleting an instance creates a negative reservation at the start of the api call and commits it once the request has been cast to the compute manager:\n\n...\n            self.compute_rpcapi.terminate_instance(context, instance)\n\n            QUOTAS.commit(context, reservations) ...\n...\n\nThe code does include checks for instance['host'] beign null and InstanceNotFound to catch race conditions if the instance has been deleted\n\nBut in the case where a second delete request were processed in the API server before the first request has been processed in the compute manager (for example consider that the compute manager is down and the user makes multiple requests because the first didn\u2019t seem to finish) these checks won\u2019t fail, which will lead to the quota being released each time the commit is processed in the API server.\n\nThe fix would seem to be to pass the negative reservations down into the compute manager so that they only get committed when the delete is processed.   \n\nIn the compute manager the delete requests for an instance are synchronised on the uuid, so a second request won\u2019t run until the first has finished, hence a check at the start to see if the instance still exists and do the rollback there should work OK.", 
            "date_created": "2012-07-20 18:02:57.366863+00:00", 
            "author": "https://api.launchpad.net/1.0/~philip-day"
        }, 
        {
            "content": "Interestingly, in the special case where the double accounting for the repeated delete causes the in_use count to go negative, then a subsequent attempt to reserve further instance quota will cause the inappropriate in_use value to be healed via the sync logic.", 
            "date_created": "2012-08-08 16:07:59.953994+00:00", 
            "author": "https://api.launchpad.net/1.0/~eglynn"
        }, 
        {
            "content": "Fix merged to master:\n\n  https://review.openstack.org/11044", 
            "date_created": "2012-08-14 09:57:46.614311+00:00", 
            "author": "https://api.launchpad.net/1.0/~eglynn"
        }
    ]
}
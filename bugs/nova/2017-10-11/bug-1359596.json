{
    "status": "Opinion", 
    "last_updated": "2016-05-17 16:57:22.488409+00:00", 
    "description": "Following change https://review.openstack.org/#/c/114594 adds checking for related versions of objects. This is imho wrong because it will make for unnecessary versioning code that will need to be written by developers. Better way to do this would be to declare version on the ObjectField and then do all the necesary backports automatically as the code is always:\n\n            primitive['field_name'] = (\n                    objects.RlatedObject().object_make_compatible(\n                        primitive, field_version))\n\nAnd thus can be done in the superclass in a generic way with a little bit of tweaking of the ObjectField to know it's expected version, and stop the proliferation of boilerplate that can be an easy source of bugs. Furthermore it will stop the unnecessary proliferation of versions of all related objects. We would need to bump the version of the object that owns another object only when we require new functionality from the owned object.", 
    "tags": [
        "unified-objects"
    ], 
    "importance": "Wishlist", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1359596", 
    "owner": "None", 
    "id": 1359596, 
    "index": 1590, 
    "created": "2014-08-21 08:02:09.443771+00:00", 
    "title": "Objects should be able to backport related objects automatically", 
    "comments": [
        {
            "content": "Following change https://review.openstack.org/#/c/114594 adds checking for related versions of objects. This is imho wrong because it will make for unnecessary versioning code that will need to be written by developers. Better way to do this would be to declare version on the ObjectField and then do all the necesary backports automatically as the code is always:\n\n            primitive['field_name'] = (\n                    objects.RlatedObject().object_make_compatible(\n                        primitive, field_version))\n\nAnd thus can be done in the superclass in a generic way with a little bit of tweaking of the ObjectField to know it's expected version, and stop the proliferation of boilerplate that can be an easy source of bugs. Furthermore it will stop the unnecessary proliferation of versions of all related objects. We would need to bump the version of the object that owns another object only when we require new functionality from the owned object.", 
            "date_created": "2014-08-21 08:02:09.443771+00:00", 
            "author": "https://api.launchpad.net/1.0/~ndipanov"
        }, 
        {
            "content": "Actually seeing how bad this gets for changing the instance - I want to raise this to critical....", 
            "date_created": "2014-08-21 08:04:37.400695+00:00", 
            "author": "https://api.launchpad.net/1.0/~ndipanov"
        }, 
        {
            "content": "https://wiki.openstack.org/wiki/BugTriage#Task_2:_Prioritize_confirmed_bugs_.28bug_supervisors.29 Seems to disagree with my understanding of the importance so pushing down to Low", 
            "date_created": "2014-08-21 13:32:30.400461+00:00", 
            "author": "https://api.launchpad.net/1.0/~ndipanov"
        }, 
        {
            "content": "This is an internal refactoring/improvement sort of thing, so I'm going to mark it as such.\r\n\r\nThe backporting operation is not as straightforward as just a per-field \"current dependent version\" because it's a moving target. Right now we only backport the top of a hierarchy of objects that contain an unknown (to the receiver) version. We do that for a couple reasons, but most importantly because it's likely that if there is one there are several. Bumping the parent version helps us not only to identify a chain of changes by the version of the top-level object, but also so that the code that triggers a backport will fire immediately at the top. Thus, the backport operation becomes a single-shot RPC call that can backport a bunch of objects all at once, instead of us asking for a backport of each object in a tree that we can't handle.\r\n\r\nI like the idea of making this process more automated for sure. I'm not sure the snippet proposed is quite expressive enough for what we need, so some brainstorming and discussion would be good.", 
            "date_created": "2014-08-21 15:52:41.643155+00:00", 
            "author": "https://api.launchpad.net/1.0/~danms"
        }, 
        {
            "content": "This bug report is pretty old and a refactoring item too. No need to track refactoring items as bug reports. I'm closing it.", 
            "date_created": "2016-05-17 16:57:21.937955+00:00", 
            "author": "https://api.launchpad.net/1.0/~mzoeller"
        }
    ]
}
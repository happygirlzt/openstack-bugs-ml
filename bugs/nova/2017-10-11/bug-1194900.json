{
    "status": "Fix Released", 
    "last_updated": "2014-03-30 23:03:10.324659+00:00", 
    "description": "When individual instances are updated (e.g., during spawn and terminate), ResourceTracker (in nova.compute.resource_tracker)  calls compute_node_update with values=self.compute_node. Since self.compute_node is an instance of ComputeNode that was retrieved from the database, it has updated_at set. Since updated_at is in values, sqlalchemy doesn't automatically change the record's updated_at column (see nova.openstack.common.db.sqlalchemy.models.TimestampMixin). Moreover, since updated_at is set to the last value's updated_at, updated_at effectively doesn't change until values without updated_at are sent, which only happens during the periodic task that calls ResourceTracker.update_available_resources.\n\nNova-scheduler relies on ComputeNode.updated_at to keep its model of available resources up-to-date. In particular, nova-scheduler doesn't play a role in instance termination, so it doesn't account for freed resources until ComputeNode.updated_at changes. Thus, between nova compute's periodic calls to ResourceTracker.update_available_resources, nova-scheduler's model of available resources monotonically decreases. If, for example, a node has resources for 10 instances, and you manage to boot 10, terminate 10, then attempt to boot another before the end of the period, nova-scheduler won't schedule the new instance on the vacant node.\n\nNote that f398b9e195cda582bad57396b097dec274384c07 fixed a separate issue (bug #1153778) related to ComputeNode.update_at being stale.", 
    "tags": [], 
    "importance": "High", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1194900", 
    "owner": "https://api.launchpad.net/1.0/~pete5", 
    "id": 1194900, 
    "index": 1142, 
    "created": "2013-06-26 14:27:19.405466+00:00", 
    "title": "scheduler only sees compute resources freed on periodic updates", 
    "comments": [
        {
            "content": "When individual instances are updated (e.g., during spawn and terminate),\nResourceTracker (in nova.compute.resource_tracker)  calls compute_node_update\nwith values=self.compute_node. Since self.compute_node is an instance of\nComputeNode that was retrieved from the database, it has updated_at set. Since\nupdated_at is in values, sqlalchemy doesn't automatically change the record's\nupdated_at column (see\nnova.openstack.common.db.sqlalchemy.models.TimestampMixin). Moreover, since\nupdated_at is set to the last value's updated_at, updated_at effectively doesn't\nchange until values without updated_at are sent, which only happens during the\nperiodic task that calls ResourceTracker.update_available_resources.\n\nNova-scheduler relies on ComputeNode.updated_at to keep its model of\navailable resources up-to-date. In particular, nova-scheduler doesn't play a\nrole in instance termination, so it doesn't account for freed resources until\nComputeNode.updated_at changes. Thus, between nova-compute's periodic calls to\nResourceTracker.update_available_resources, nova-scheduler's model of available\nresources monotonically decreases. If, for example, a node has resources for 10\ninstances, and you manage to boot 10, terminate 10, then attempt to boot another\nbefore the end of the period, nova-scheduler won't schedule the new instance on\nthe vacant node.\n\nNote that f398b9e195cda582bad57396b097dec274384c07 fixed a separate issue (bug #1153778)\nrelated to ComputeNode.update_at being stale.", 
            "date_created": "2013-06-26 14:27:19.405466+00:00", 
            "author": "https://api.launchpad.net/1.0/~pete5"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/33853\nCommitted: http://github.com/openstack/nova/commit/0ed62fb7affbda4a701c2175e95aa6f92038604c\nSubmitter: Jenkins\nBranch:    master\n\ncommit 0ed62fb7affbda4a701c2175e95aa6f92038604c\nAuthor: Peter Feiner <email address hidden>\nDate:   Wed Jun 19 21:14:43 2013 +0000\n\n    db.compute_node_update: ignore values['update_at']\n    \n    When individual instances are updated (e.g., during spawn and\n    terminate), ResourceTracker (in nova.compute.resource_tracker)  calls\n    compute_node_update with values=self.compute_node. Since\n    self.compute_node is an instance of ComputeNode that was retrieved\n    from the database, it has updated_at set. Since updated_at is in\n    values, sqlalchemy doesn't automatically change the record's\n    updated_at column (see\n    nova.openstack.common.db.sqlalchemy.models.TimestampMixin). Moreover,\n    since updated_at is set to the last value's updated_at, updated_at\n    effectively doesn't change until values without updated_at are sent,\n    which only happens during the periodic task that calls\n    ResourceTracker.update_available_resources.\n    \n    Nova-scheduler relies on ComputeNode.updated_at to keep its model of\n    available resources up-to-date. In particular, nova-scheduler doesn't\n    play a role in instance termination, so it doesn't account for freed\n    resources until ComputeNode.updated_at changes. Thus, between\n    nova-compute's periodic calls to\n    ResourceTracker.update_available_resources, nova-scheduler's model of\n    available resources monotonically decreases. If, for example, a node\n    has resources for 10 instances, and you manage to boot 10, terminate\n    10, then attempt to boot another before the end of the period,\n    nova-scheduler won't schedule the new instance on the vacant node.\n    \n    Fixes bug #1194900.\n    \n    Note that f398b9e195cda582bad57396b097dec274384c07 fixed a separate\n    issue (bug #1153778) related to ComputeNode.update_at being stale.\n    \n    Change-Id: Ifd1e56edfd811241816970715071876857de80d3\n", 
            "date_created": "2013-06-28 18:52:31.145618+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ]
}
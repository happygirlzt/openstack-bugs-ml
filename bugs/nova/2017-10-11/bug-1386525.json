{
    "status": "Invalid", 
    "last_updated": "2015-08-02 23:26:28.901025+00:00", 
    "description": "DataError: (DataError) invalid input syntax for type inet: \"my.invalid.ip\"\n\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/oslo/db/sqlalchemy/compat/handle_error.py\", line 59, in _handle_dbapi_exception\n    e, statement, parameters, cursor, context)\n  File \"/usr/lib/python2.7/dist-packages/sqlalchemy/engine/base.py\", line 1024, in _handle_dbapi_exception\n    exc_info\n  File \"/usr/lib/python2.7/dist-packages/sqlalchemy/util/compat.py\", line 196, in raise_from_cause\n    reraise(type(exception), exception, tb=exc_tb)\n  File \"/usr/lib/python2.7/dist-packages/sqlalchemy/engine/base.py\", line 867, in _execute_context\n    context)\n  File \"/usr/lib/python2.7/dist-packages/sqlalchemy/engine/default.py\", line 324, in do_execute\n    cursor.execute(statement, parameters)\nDataError: (DataError) invalid input syntax for type inet: \"my.invalid.ip\"\nLINE 3: ...ERE fixed_ips.deleted = 0 AND fixed_ips.address = 'my.invali... \n                                                             ^\n 'SELECT fixed_ips.created_at AS fixed_ips_created_at, fixed_ips.updated_at AS fixed_ips_updated_at, fixed_ips.deleted_at AS fixed_ips_deleted_at, fixed_ips.deleted AS fixed_ips_deleted, fixed_ips.id AS fixed_ips_id, fixed_ips.address AS fixed_ips_address, fixed_ips.network_id AS fixed_ips_network_id, fixed_ips.virtual_interface_id AS fixed_ips_virtual_interface_id, fixed_ips.instance_uuid AS fixed_ips_instance_uuid, fixed_ips.allocated AS fixed_ips_allocated, fixed_ips.leased AS fixed_ips_leased, fixed_ips.reserved AS fixed_ips_reserved, fixed_ips.host AS fixed_ips_host \\nFROM fixed_ips \\nWHERE fixed_ips.deleted = %(deleted_1)s AND fixed_ips.address = %(address_1)s \\n LIMIT %(param_1)s' {'param_1': 1, 'address_1': 'my.invalid.ip', 'deleted_1': 0}\n2014-10-27 17:44:32.094 25193 TRACE oslo.db.sqlalchemy.exc_filters \n\nSeen in nova-api", 
    "tags": [
        "db", 
        "stacktrace"
    ], 
    "importance": "Low", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1386525", 
    "owner": "https://api.launchpad.net/1.0/~taget-9", 
    "id": 1386525, 
    "index": 167, 
    "created": "2014-10-28 05:58:34.278310+00:00", 
    "title": "(DataError) invalid input syntax for type inet: 'my.invalid.ip'", 
    "comments": [
        {
            "content": "DataError: (DataError) invalid input syntax for type inet: \"my.invalid.ip\"\n\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/oslo/db/sqlalchemy/compat/handle_error.py\", line 59, in _handle_dbapi_exception\n    e, statement, parameters, cursor, context)\n  File \"/usr/lib/python2.7/dist-packages/sqlalchemy/engine/base.py\", line 1024, in _handle_dbapi_exception\n    exc_info\n  File \"/usr/lib/python2.7/dist-packages/sqlalchemy/util/compat.py\", line 196, in raise_from_cause\n    reraise(type(exception), exception, tb=exc_tb)\n  File \"/usr/lib/python2.7/dist-packages/sqlalchemy/engine/base.py\", line 867, in _execute_context\n    context)\n  File \"/usr/lib/python2.7/dist-packages/sqlalchemy/engine/default.py\", line 324, in do_execute\n    cursor.execute(statement, parameters)\nDataError: (DataError) invalid input syntax for type inet: \"my.invalid.ip\"\nLINE 3: ...ERE fixed_ips.deleted = 0 AND fixed_ips.address = 'my.invali... \n                                                             ^\n 'SELECT fixed_ips.created_at AS fixed_ips_created_at, fixed_ips.updated_at AS fixed_ips_updated_at, fixed_ips.deleted_at AS fixed_ips_deleted_at, fixed_ips.deleted AS fixed_ips_deleted, fixed_ips.id AS fixed_ips_id, fixed_ips.address AS fixed_ips_address, fixed_ips.network_id AS fixed_ips_network_id, fixed_ips.virtual_interface_id AS fixed_ips_virtual_interface_id, fixed_ips.instance_uuid AS fixed_ips_instance_uuid, fixed_ips.allocated AS fixed_ips_allocated, fixed_ips.leased AS fixed_ips_leased, fixed_ips.reserved AS fixed_ips_reserved, fixed_ips.host AS fixed_ips_host \\nFROM fixed_ips \\nWHERE fixed_ips.deleted = %(deleted_1)s AND fixed_ips.address = %(address_1)s \\n LIMIT %(param_1)s' {'param_1': 1, 'address_1': 'my.invalid.ip', 'deleted_1': 0}\n2014-10-27 17:44:32.094 25193 TRACE oslo.db.sqlalchemy.exc_filters \n\nSeen in nova-api", 
            "date_created": "2014-10-28 05:58:34.278310+00:00", 
            "author": "https://api.launchpad.net/1.0/~jogo"
        }, 
        {
            "content": "The exception here makes  sense as we commonly use the DB for validation. But this should not be throwing a stacktace.", 
            "date_created": "2014-10-28 06:00:25.121956+00:00", 
            "author": "https://api.launchpad.net/1.0/~jogo"
        }, 
        {
            "content": "http://logs.openstack.org/63/129963/1/gate/gate-tempest-dsvm-postgres-full/9a0d7d9/logs/screen-n-api.txt.gz?level=TRACE#_2014-10-27_17_44_32_094", 
            "date_created": "2014-10-28 06:01:34.730882+00:00", 
            "author": "https://api.launchpad.net/1.0/~jogo"
        }, 
        {
            "content": "After reading the stack trace of gate.\nI think this is an tempest test case error.\n\nin sqlalchemy api.\n\ndef _fixed_ip_get_by_address(context, address, session=None,\n                             columns_to_join=None):\n\n...\n\n    with session.begin(subtransactions=True):\n        try:\n            result = model_query(context, models.FixedIp, session=session)\n            for column in columns_to_join:\n                result = result.options(joinedload_all(column))\n            result = result.filter_by(address=address).first()\n            if not result:\n                raise exception.FixedIpNotFoundForAddress(address=address)\n        except db_exc.DBError:\n            msg = _(\"Invalid fixed IP Address %s in request\") % address\n            LOG.warn(msg)\n            raise exception.FixedIpInvalid(msg)\n\nif passing a invalid address to db, it will raises a DBError, and will reraise an FixedIpInvalid exception.\n\nin nova-api, it will except FixedIpInvalid exception and raise an HTTPBadRequest\n         except exception.FixedIpInvalid:\n            msg = _(\"Fixed IP %s not valid\") % address\n            raise webob.exc.HTTPBadRequest(explanation=msg)\n\nbut seen from tempest test case.\n\n    def test_set_reserve_with_invalid_ip(self):\n        # NOTE(maurosr): since this exercises the same code snippet, we do it\n        # only for reserve action\n        body = {\"reserve\": \"None\"}\n        self.assertRaises(exceptions.NotFound, <<<----- here should be HTTPBadRequest\n                          self.client.reserve_fixed_ip,\n                          \"my.invalid.ip\", body)\n\n\ncompared with nova api unit test \n\ndef test_fixed_ip_reserve_invalid_ip_address(self):                                           \n        body = {'reserve': None}\n        req = fakes.HTTPRequest.blank('%s/inv.ali.d.ip/action' % self.url)                        \n        action = self._get_reserve_action()                                                       \n        \n        self.assertRaises(webob.exc.HTTPBadRequest,\n                          action, req, 'inv.ali.d.ip', body)  \n\nI will submit a tempest patch to fix this one.\n\nEli.", 
            "date_created": "2014-10-29 09:08:03.229472+00:00", 
            "author": "https://api.launchpad.net/1.0/~taget-9"
        }, 
        {
            "content": "opps... ignore me, I'v added the code..\n\nI'v add this..\n    def test_set_reserve_with_invalid_ip(self):                              \n        # NOTE(maurosr): since this exercises the same code snippet, we do it\n        # only for reserve action\n        body = {\"reserve\": \"None\"}                   \n        # NOTE(eliqiao): in Juno, the exception is NotFound, but in master, we\n        # change the error code to BadRequest, both exceptions should be\n        # accepted by tempest                                                  \n        self.assertRaises((exceptions.NotFound, exceptions.BadRequest),       \n                          self.client.reserve_fixed_ip,                      \n                          \"my.invalid.ip\", body)\n", 
            "date_created": "2014-10-29 09:13:13.220632+00:00", 
            "author": "https://api.launchpad.net/1.0/~taget-9"
        }, 
        {
            "content": "This fails directly in PostgreSQL when the SQL statement is executed. There is nothing oslo.db can do for you except raising a correct exception (DataError).", 
            "date_created": "2014-11-24 09:38:22.264102+00:00", 
            "author": "https://api.launchpad.net/1.0/~rpodolyaka"
        }
    ]
}
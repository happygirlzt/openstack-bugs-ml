{
    "status": "Fix Released", 
    "last_updated": "2015-10-15 08:50:51.704398+00:00", 
    "description": "In a load test where a nova environment w/ networking enabled was set up to have ~250K instances,  attempting to launch 50 instances would cause many to time out, with the error \"Timeout while waiting on RPC response - topic: \"network\", RPC method: \"allocate_for_instance\".   The tester isolated the latency here to queries against the virtual_interfaces table, which in this test is executed some 500 times, spending ~.5 seconds per query for a total of 200 seconds.  An example query looks like:\n\nSELECT virtual_interfaces.created_at , virtual_interfaces.updated_at , virtual_interfaces.deleted_at , virtual_interfaces.deleted , virtual_interfaces.id , virtual_interfaces.address , virtual_interfaces.network_id , virtual_interfaces.instance_uuid , virtual_interfaces.uuid FROM virtual_interfaces WHERE virtual_interfaces.deleted = 0 AND virtual_interfaces.uuid = '9774e729-7695-4e2b-a9b2-a104a4b020d0'\nLIMIT 1;\n\nQuery profiling against this table /query directly proceeded as follows:\n\nI scripted up direct DB access to get 250K rows in a blank database:\n\nMariaDB [nova]> select count(*) from virtual_interfaces;\n+----------+\n| count(*) |\n+----------+\n|   250000 |\n+----------+\n1 row in set (0.09 sec)\n\nemitting the query when the row is found, on this particular system is returning in .03 sec:\n\nMariaDB [nova]> SELECT virtual_interfaces.created_at , virtual_interfaces.updated_at , virtual_interfaces.deleted_at , virtual_interfaces.deleted , virtual_interfaces.id , virtual_interfaces.address , virtual_interfaces.network_id , virtual_interfaces.instance_uuid , virtual_interfaces.uuid FROM virtual_interfaces WHERE virtual_interfaces.deleted = 0 AND virtual_interfaces.uuid = '0a269012-cbc7-4093-9602-35f003a766c4'  LIMIT 1;\n+---------------------+------------+------------+---------+-------+---------------+------------+--------------------------------------+--------------------------------------+\n| created_at          | updated_at | deleted_at | deleted | id    | address       | network_id | instance_uuid                        | uuid                                 |\n+---------------------+------------+------------+---------+-------+---------------+------------+--------------------------------------+--------------------------------------+\n| 2014-08-12 22:22:14 | NULL       | NULL       |       0 | 58393 | address_58393 |         22 | 41f1b859-8c5d-4c27-a52e-3e97652dfe7a | 0a269012-cbc7-4093-9602-35f003a766c4 |\n+---------------------+------------+------------+---------+-------+---------------+------------+--------------------------------------+--------------------------------------+\n1 row in set (0.03 sec)\n\n\nwe can see that for a row not found, where it has to scan the whole table, it's 10x longer:\n\nMariaDB [nova]> SELECT virtual_interfaces.created_at , virtual_interfaces.updated_at , virtual_interfaces.deleted_at , virtual_interfaces.deleted , virtual_interfaces.id , virtual_interfaces.address , virtual_interfaces.network_id , virtual_interfaces.instance_uuid , virtual_interfaces.uuid FROM virtual_interfaces WHERE virtual_interfaces.deleted = 0 AND virtual_interfaces.uuid = '0a269012-cbc7-4093-9602-35f003a766c5'  LIMIT 1;\nEmpty set (0.14 sec)\n\n\nThere's nothing mysterious going on here as an EXPLAIN shows plainly that we are doing a full table scan:\n\nMariaDB [nova]> EXPLAIN SELECT virtual_interfaces.created_at , virtual_interfaces.updated_at , virtual_interfaces.deleted_at , virtual_interfaces.deleted , virtual_interfaces.id , virtual_interfaces.address , virtual_interfaces.network_id , virtual_interfaces.instance_uuid , virtual_interfaces.uuid FROM virtual_interfaces WHERE virtual_interfaces.deleted = 0 AND virtual_interfaces.uuid = '0a269012-cbc7-4093-9602-35f003a766c4'  LIMIT 1;\n+------+-------------+--------------------+------+---------------+------+---------+------+--------+-------------+\n| id   | select_type | table              | type | possible_keys | key  | key_len | ref  | rows   | Extra       |\n+------+-------------+--------------------+------+---------------+------+---------+------+--------+-------------+\n|    1 | SIMPLE      | virtual_interfaces | ALL  | NULL          | NULL | NULL    | NULL | 250170 | Using where |\n+------+-------------+--------------------+------+---------------+------+---------+------+--------+-------------+\n1 row in set (0.00 sec)\n\n\nadding an index on the uuid field via \"create index vuidx on virtual_interfaces(uuid)\", the EXPLAIN now shows the index used:\n\nMariaDB [nova]> EXPLAIN SELECT virtual_interfaces.created_at , virtual_interfaces.updated_at , virtual_interfaces.deleted_at , virtual_interfaces.deleted , virtual_interfaces.id , virtual_interfaces.address , virtual_interfaces.network_id , virtual_interfaces.instance_uuid , virtual_interfaces.uuid FROM virtual_interfaces WHERE virtual_interfaces.deleted = 0 AND virtual_interfaces.uuid = '0a269012-cbc7-4093-9602-35f003a766c4'  LIMIT 1;\n+------+-------------+--------------------+------+---------------+-------+---------+-------+------+------------------------------------+\n| id   | select_type | table              | type | possible_keys | key   | key_len | ref   | rows | Extra                              |\n+------+-------------+--------------------+------+---------------+-------+---------+-------+------+------------------------------------+\n|    1 | SIMPLE      | virtual_interfaces | ref  | vuidx         | vuidx | 111     | const |    1 | Using index condition; Using where |\n+------+-------------+--------------------+------+---------------+-------+---------+-------+------+------------------------------------+\n1 row in set (0.00 sec)\n\n\nand we get 0.00 response time for both queries:\n\nMariaDB [nova]> SELECT virtual_interfaces.created_at , virtual_interfaces.updated_at , virtual_interfaces.deleted_at , virtual_interfaces.deleted , virtual_interfaces.id , virtual_interfaces.address , virtual_interfaces.network_id , virtual_interfaces.instance_uuid , virtual_interfaces.uuid FROM virtual_interfaces WHERE virtual_interfaces.deleted = 0 AND virtual_interfaces.uuid = '0a269012-cbc7-4093-9602-35f003a766c5'  LIMIT 1;\nEmpty set (0.00 sec)\n\nMariaDB [nova]> SELECT virtual_interfaces.created_at , virtual_interfaces.updated_at , virtual_interfaces.deleted_at , virtual_interfaces.deleted , virtual_interfaces.id , virtual_interfaces.address , virtual_interfaces.network_id , virtual_interfaces.instance_uuid , virtual_interfaces.uuid FROM virtual_interfaces WHERE virtual_interfaces.deleted = 0 AND virtual_interfaces.uuid = '0a269012-cbc7-4093-9602-35f003a766c4'  LIMIT 1;\n+---------------------+------------+------------+---------+-------+---------------+------------+--------------------------------------+--------------------------------------+\n| created_at          | updated_at | deleted_at | deleted | id    | address       | network_id | instance_uuid                        | uuid                                 |\n+---------------------+------------+------------+---------+-------+---------------+------------+--------------------------------------+--------------------------------------+\n| 2014-08-12 22:22:14 | NULL       | NULL       |       0 | 58393 | address_58393 |         22 | 41f1b859-8c5d-4c27-a52e-3e97652dfe7a | 0a269012-cbc7-4093-9602-35f003a766c4 |\n+---------------------+------------+------------+---------+-------+---------------+------------+--------------------------------------+--------------------------------------+\n1 row in set (0.00 sec)\n\n\nwhether or not the index includes \"deleted\" doesn't really matter.  If we're searching for UUIDs, we get that UUID row first, then the \"deleted=0\" is checked, not a big deal.\n\nFor an immediate fix,  I propose to add the aforementioned index to the virtual_interfaces.uuid column.", 
    "tags": [], 
    "importance": "Medium", 
    "heat": 8, 
    "link": "https://bugs.launchpad.net/nova/+bug/1445675", 
    "owner": "https://api.launchpad.net/1.0/~mriedem", 
    "id": 1445675, 
    "index": 4224, 
    "created": "2015-04-17 22:01:19.627399+00:00", 
    "title": "missing index on virtual_interfaces can cause long queries that can cause timeouts in launching instances", 
    "comments": [
        {
            "content": "In a load test where a nova environment w/ networking enabled was set up to have ~250K instances,  attempting to launch 50 instances would cause many to time out, with the error \"Timeout while waiting on RPC response - topic: \"network\", RPC method: \"allocate_for_instance\".   The tester isolated the latency here to queries against the virtual_interfaces table, which in this test is executed some 500 times, spending ~.5 seconds per query for a total of 200 seconds.  An example query looks like:\n\nSELECT virtual_interfaces.created_at , virtual_interfaces.updated_at , virtual_interfaces.deleted_at , virtual_interfaces.deleted , virtual_interfaces.id , virtual_interfaces.address , virtual_interfaces.network_id , virtual_interfaces.instance_uuid , virtual_interfaces.uuid FROM virtual_interfaces WHERE virtual_interfaces.deleted = 0 AND virtual_interfaces.uuid = '9774e729-7695-4e2b-a9b2-a104a4b020d0'\nLIMIT 1;\n\nQuery profiling against this table /query directly proceeded as follows:\n\nI scripted up direct DB access to get 250K rows in a blank database:\n\nMariaDB [nova]> select count(*) from virtual_interfaces;\n+----------+\n| count(*) |\n+----------+\n|   250000 |\n+----------+\n1 row in set (0.09 sec)\n\nemitting the query when the row is found, on this particular system is returning in .03 sec:\n\nMariaDB [nova]> SELECT virtual_interfaces.created_at , virtual_interfaces.updated_at , virtual_interfaces.deleted_at , virtual_interfaces.deleted , virtual_interfaces.id , virtual_interfaces.address , virtual_interfaces.network_id , virtual_interfaces.instance_uuid , virtual_interfaces.uuid FROM virtual_interfaces WHERE virtual_interfaces.deleted = 0 AND virtual_interfaces.uuid = '0a269012-cbc7-4093-9602-35f003a766c4'  LIMIT 1;\n+---------------------+------------+------------+---------+-------+---------------+------------+--------------------------------------+--------------------------------------+\n| created_at          | updated_at | deleted_at | deleted | id    | address       | network_id | instance_uuid                        | uuid                                 |\n+---------------------+------------+------------+---------+-------+---------------+------------+--------------------------------------+--------------------------------------+\n| 2014-08-12 22:22:14 | NULL       | NULL       |       0 | 58393 | address_58393 |         22 | 41f1b859-8c5d-4c27-a52e-3e97652dfe7a | 0a269012-cbc7-4093-9602-35f003a766c4 |\n+---------------------+------------+------------+---------+-------+---------------+------------+--------------------------------------+--------------------------------------+\n1 row in set (0.03 sec)\n\n\nwe can see that for a row not found, where it has to scan the whole table, it's 10x longer:\n\nMariaDB [nova]> SELECT virtual_interfaces.created_at , virtual_interfaces.updated_at , virtual_interfaces.deleted_at , virtual_interfaces.deleted , virtual_interfaces.id , virtual_interfaces.address , virtual_interfaces.network_id , virtual_interfaces.instance_uuid , virtual_interfaces.uuid FROM virtual_interfaces WHERE virtual_interfaces.deleted = 0 AND virtual_interfaces.uuid = '0a269012-cbc7-4093-9602-35f003a766c5'  LIMIT 1;\nEmpty set (0.14 sec)\n\n\nThere's nothing mysterious going on here as an EXPLAIN shows plainly that we are doing a full table scan:\n\nMariaDB [nova]> EXPLAIN SELECT virtual_interfaces.created_at , virtual_interfaces.updated_at , virtual_interfaces.deleted_at , virtual_interfaces.deleted , virtual_interfaces.id , virtual_interfaces.address , virtual_interfaces.network_id , virtual_interfaces.instance_uuid , virtual_interfaces.uuid FROM virtual_interfaces WHERE virtual_interfaces.deleted = 0 AND virtual_interfaces.uuid = '0a269012-cbc7-4093-9602-35f003a766c4'  LIMIT 1;\n+------+-------------+--------------------+------+---------------+------+---------+------+--------+-------------+\n| id   | select_type | table              | type | possible_keys | key  | key_len | ref  | rows   | Extra       |\n+------+-------------+--------------------+------+---------------+------+---------+------+--------+-------------+\n|    1 | SIMPLE      | virtual_interfaces | ALL  | NULL          | NULL | NULL    | NULL | 250170 | Using where |\n+------+-------------+--------------------+------+---------------+------+---------+------+--------+-------------+\n1 row in set (0.00 sec)\n\n\nadding an index on the uuid field via \"create index vuidx on virtual_interfaces(uuid)\", the EXPLAIN now shows the index used:\n\nMariaDB [nova]> EXPLAIN SELECT virtual_interfaces.created_at , virtual_interfaces.updated_at , virtual_interfaces.deleted_at , virtual_interfaces.deleted , virtual_interfaces.id , virtual_interfaces.address , virtual_interfaces.network_id , virtual_interfaces.instance_uuid , virtual_interfaces.uuid FROM virtual_interfaces WHERE virtual_interfaces.deleted = 0 AND virtual_interfaces.uuid = '0a269012-cbc7-4093-9602-35f003a766c4'  LIMIT 1;\n+------+-------------+--------------------+------+---------------+-------+---------+-------+------+------------------------------------+\n| id   | select_type | table              | type | possible_keys | key   | key_len | ref   | rows | Extra                              |\n+------+-------------+--------------------+------+---------------+-------+---------+-------+------+------------------------------------+\n|    1 | SIMPLE      | virtual_interfaces | ref  | vuidx         | vuidx | 111     | const |    1 | Using index condition; Using where |\n+------+-------------+--------------------+------+---------------+-------+---------+-------+------+------------------------------------+\n1 row in set (0.00 sec)\n\n\nand we get 0.00 response time for both queries:\n\nMariaDB [nova]> SELECT virtual_interfaces.created_at , virtual_interfaces.updated_at , virtual_interfaces.deleted_at , virtual_interfaces.deleted , virtual_interfaces.id , virtual_interfaces.address , virtual_interfaces.network_id , virtual_interfaces.instance_uuid , virtual_interfaces.uuid FROM virtual_interfaces WHERE virtual_interfaces.deleted = 0 AND virtual_interfaces.uuid = '0a269012-cbc7-4093-9602-35f003a766c5'  LIMIT 1;\nEmpty set (0.00 sec)\n\nMariaDB [nova]> SELECT virtual_interfaces.created_at , virtual_interfaces.updated_at , virtual_interfaces.deleted_at , virtual_interfaces.deleted , virtual_interfaces.id , virtual_interfaces.address , virtual_interfaces.network_id , virtual_interfaces.instance_uuid , virtual_interfaces.uuid FROM virtual_interfaces WHERE virtual_interfaces.deleted = 0 AND virtual_interfaces.uuid = '0a269012-cbc7-4093-9602-35f003a766c4'  LIMIT 1;\n+---------------------+------------+------------+---------+-------+---------------+------------+--------------------------------------+--------------------------------------+\n| created_at          | updated_at | deleted_at | deleted | id    | address       | network_id | instance_uuid                        | uuid                                 |\n+---------------------+------------+------------+---------+-------+---------------+------------+--------------------------------------+--------------------------------------+\n| 2014-08-12 22:22:14 | NULL       | NULL       |       0 | 58393 | address_58393 |         22 | 41f1b859-8c5d-4c27-a52e-3e97652dfe7a | 0a269012-cbc7-4093-9602-35f003a766c4 |\n+---------------------+------------+------------+---------+-------+---------------+------------+--------------------------------------+--------------------------------------+\n1 row in set (0.00 sec)\n\n\nwhether or not the index includes \"deleted\" doesn't really matter.  If we're searching for UUIDs, we get that UUID row first, then the \"deleted=0\" is checked, not a big deal.\n\nFor an immediate fix,  I propose to add the aforementioned index to the virtual_interfaces.uuid column.", 
            "date_created": "2015-04-17 22:01:19.627399+00:00", 
            "author": "https://api.launchpad.net/1.0/~zzzeek"
        }, 
        {
            "content": "review at https://review.openstack.org/#/c/154243/", 
            "date_created": "2015-04-17 22:03:42.886981+00:00", 
            "author": "https://api.launchpad.net/1.0/~zzzeek"
        }, 
        {
            "content": "adding kilo-rc-potential tag so we can add this into the RC, if it makes it into master in time.", 
            "date_created": "2015-04-21 08:59:39.323261+00:00", 
            "author": "https://api.launchpad.net/1.0/~johngarbutt"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/154243\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=7aa4b75da9722496c4e166b44cc04973fd441f52\nSubmitter: Jenkins\nBranch:    master\n\ncommit 7aa4b75da9722496c4e166b44cc04973fd441f52\nAuthor: Michael Bayer <email address hidden>\nDate:   Thu Jun 11 08:11:44 2015 -0700\n\n    Add an index to virtual_interfaces.uuid\n    \n    Performance issues have been reported such\n    that the query performed by virtual_interface_get_by_uuid\n    becomes prohibitively slow after a large (~250K) number of instances\n    have been created, and an attempt is made to launch instances\n    in batch.  An index added to uuid shows a dramatic improvement\n    to this query in EXPLAIN testing.\n    \n    This is the master branch which adds the migration as #294.\n    \n    Change-Id: I912e5a01ac63f2a7ab5533e9b6ff8738af819d67\n    Closes-bug: #1445675\n", 
            "date_created": "2015-06-15 18:17:56.970287+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Fix proposed to branch: stable/kilo\nReview: https://review.openstack.org/197116", 
            "date_created": "2015-06-30 14:40:03.701308+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Fix proposed to branch: stable/juno\nReview: https://review.openstack.org/197122", 
            "date_created": "2015-06-30 14:51:11.280715+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Change abandoned by Michael Bayer (<email address hidden>) on branch: stable/juno\nReview: https://review.openstack.org/197122\nReason: we've addressed this downstream", 
            "date_created": "2015-07-17 15:23:06.023380+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Change abandoned by Michael Bayer (<email address hidden>) on branch: stable/kilo\nReview: https://review.openstack.org/197116\nReason: we've addressed this downstream", 
            "date_created": "2015-07-17 15:23:14.575256+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ]
}
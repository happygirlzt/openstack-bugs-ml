{
    "status": "Opinion", 
    "last_updated": "2014-07-13 00:25:27.919439+00:00", 
    "description": "Nova servers should have separate configuration files and use common bind_host/bind_port/SSL options. Makes things easier to configure and removes the need for separate flags like ec2_listen, osapi_volume_listen, metadata_listen and osapi_listen.\n\nIn addition to simplifying configuration, we can get the following benefits:\n\n * Would be able to use a standard WSGI Server class\n * Would be able to take advantage of the SSL and socket-wrapping work done in Glance and Swift\n * Would be able to take advantage of the multi-processed servers in Glance and Swift\n\nEssentially, each server/service config would have this:\n\n[DEFAULT]\n# Address to bind the server\nbind_host = 0.0.0.0\n\n# Port the bind the server to\nbind_port = 9292\n\n# Backlog requests when creating socket\nbacklog = 4096\n\n# Number of worker processes to start.\n# On machines with more than one CPU increasing this value\n# may improve performance (especially if using SSL with\n# compression turned on). It is typically recommended to set\n# this value to the number of CPUs present on your machine.\nworkers = 0\n\nas well as (eventually) all the SSL configuration options like cert_file, key_file, etc\n\nNo need for duplicate cfg options for all the different services. Instead, all the services define a common bind_host / bind_port and the WSGI socket handling code can be standardized to what is in Glance (and Swift without the openstack-common cfg module...):\n\nbind_opts = [\n    cfg.StrOpt('bind_host', default='0.0.0.0'),\n    cfg.IntOpt('bind_port'),\n]\n\nsocket_opts = [\n    cfg.IntOpt('backlog', default=4096),\n    cfg.StrOpt('cert_file'),\n    cfg.StrOpt('key_file'),\n]\n\nworkers_opt = cfg.IntOpt('workers', default=0)\n\n\ndef get_bind_addr(conf, default_port=None):\n    \"\"\"Return the host and port to bind to.\"\"\"\n    conf.register_opts(bind_opts)\n    return (conf.bind_host, conf.bind_port or default_port)\n\n\ndef get_socket(conf, default_port):\n    \"\"\"\n    Bind socket to bind ip:port in conf\n\n    note: Mostly comes from Swift with a few small changes...\n\n    :param conf: a cfg.ConfigOpts object\n    :param default_port: port to bind to if none is specified in conf\n\n    :returns : a socket object as returned from socket.listen or\n               ssl.wrap_socket if conf specifies cert_file\n    \"\"\"\n    bind_addr = get_bind_addr(conf, default_port)\n\n    # TODO(jaypipes): eventlet's greened socket module does not actually\n    # support IPv6 in getaddrinfo(). We need to get around this in the\n    # future or monitor upstream for a fix\n    address_family = [addr[0] for addr in socket.getaddrinfo(bind_addr[0],\n            bind_addr[1], socket.AF_UNSPEC, socket.SOCK_STREAM)\n            if addr[0] in (socket.AF_INET, socket.AF_INET6)][0]\n\n    conf.register_opts(socket_opts)\n\n    cert_file = conf.cert_file\n    key_file = conf.key_file\n    use_ssl = cert_file or key_file\n    if use_ssl and (not cert_file or not key_file):\n        raise RuntimeError(_(\"When running server in SSL mode, you must \"\n                             \"specify both a cert_file and key_file \"\n                             \"option value in your configuration file\"))\n\n    sock = None\n    retry_until = time.time() + 30\n    while not sock and time.time() < retry_until:\n        try:\n            sock = eventlet.listen(bind_addr, backlog=conf.backlog,\n                                   family=address_family)\n            if use_ssl:\n                sock = ssl.wrap_socket(sock, certfile=cert_file,\n                                       keyfile=key_file)\n        except socket.error, err:\n            if err.args[0] != errno.EADDRINUSE:\n                raise\n            eventlet.sleep(0.1)\n    if not sock:\n        raise RuntimeError(_(\"Could not bind to %s:%s after trying for 30 \"\n                             \"seconds\") % bind_addr)\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    # in my experience, sockets can hang around forever without keepalive\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)\n\n    # This option isn't available in the OS X version of eventlet\n    if hasattr(socket, 'TCP_KEEPIDLE'):\n        sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_KEEPIDLE, 600)\n\n    return sock", 
    "tags": [], 
    "importance": "Wishlist", 
    "heat": 8, 
    "link": "https://bugs.launchpad.net/nova/+bug/979488", 
    "owner": "None", 
    "id": 979488, 
    "index": 1239, 
    "created": "2012-04-12 00:41:35.072897+00:00", 
    "title": "Nova servers should have separate configuration files", 
    "comments": [
        {
            "content": "Nova servers should have separate configuration files and use common bind_host/bind_port/SSL options. Makes things easier to configure and removes the need for separate flags like ec2_listen, osapi_volume_listen, metadata_listen and osapi_listen.\n\nIn addition to simplifying configuration, we can get the following benefits:\n\n * Would be able to use a standard WSGI Server class\n * Would be able to take advantage of the SSL and socket-wrapping work done in Glance and Swift\n * Would be able to take advantage of the multi-processed servers in Glance and Swift\n\nEssentially, each server/service config would have this:\n\n[DEFAULT]\n# Address to bind the server\nbind_host = 0.0.0.0\n\n# Port the bind the server to\nbind_port = 9292\n\n# Backlog requests when creating socket\nbacklog = 4096\n\n# Number of worker processes to start.\n# On machines with more than one CPU increasing this value\n# may improve performance (especially if using SSL with\n# compression turned on). It is typically recommended to set\n# this value to the number of CPUs present on your machine.\nworkers = 0\n\nas well as (eventually) all the SSL configuration options like cert_file, key_file, etc\n\nNo need for duplicate cfg options for all the different services. Instead, all the services define a common bind_host / bind_port and the WSGI socket handling code can be standardized to what is in Glance (and Swift without the openstack-common cfg module...):\n\nbind_opts = [\n    cfg.StrOpt('bind_host', default='0.0.0.0'),\n    cfg.IntOpt('bind_port'),\n]\n\nsocket_opts = [\n    cfg.IntOpt('backlog', default=4096),\n    cfg.StrOpt('cert_file'),\n    cfg.StrOpt('key_file'),\n]\n\nworkers_opt = cfg.IntOpt('workers', default=0)\n\n\ndef get_bind_addr(conf, default_port=None):\n    \"\"\"Return the host and port to bind to.\"\"\"\n    conf.register_opts(bind_opts)\n    return (conf.bind_host, conf.bind_port or default_port)\n\n\ndef get_socket(conf, default_port):\n    \"\"\"\n    Bind socket to bind ip:port in conf\n\n    note: Mostly comes from Swift with a few small changes...\n\n    :param conf: a cfg.ConfigOpts object\n    :param default_port: port to bind to if none is specified in conf\n\n    :returns : a socket object as returned from socket.listen or\n               ssl.wrap_socket if conf specifies cert_file\n    \"\"\"\n    bind_addr = get_bind_addr(conf, default_port)\n\n    # TODO(jaypipes): eventlet's greened socket module does not actually\n    # support IPv6 in getaddrinfo(). We need to get around this in the\n    # future or monitor upstream for a fix\n    address_family = [addr[0] for addr in socket.getaddrinfo(bind_addr[0],\n            bind_addr[1], socket.AF_UNSPEC, socket.SOCK_STREAM)\n            if addr[0] in (socket.AF_INET, socket.AF_INET6)][0]\n\n    conf.register_opts(socket_opts)\n\n    cert_file = conf.cert_file\n    key_file = conf.key_file\n    use_ssl = cert_file or key_file\n    if use_ssl and (not cert_file or not key_file):\n        raise RuntimeError(_(\"When running server in SSL mode, you must \"\n                             \"specify both a cert_file and key_file \"\n                             \"option value in your configuration file\"))\n\n    sock = None\n    retry_until = time.time() + 30\n    while not sock and time.time() < retry_until:\n        try:\n            sock = eventlet.listen(bind_addr, backlog=conf.backlog,\n                                   family=address_family)\n            if use_ssl:\n                sock = ssl.wrap_socket(sock, certfile=cert_file,\n                                       keyfile=key_file)\n        except socket.error, err:\n            if err.args[0] != errno.EADDRINUSE:\n                raise\n            eventlet.sleep(0.1)\n    if not sock:\n        raise RuntimeError(_(\"Could not bind to %s:%s after trying for 30 \"\n                             \"seconds\") % bind_addr)\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    # in my experience, sockets can hang around forever without keepalive\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)\n\n    # This option isn't available in the OS X version of eventlet\n    if hasattr(socket, 'TCP_KEEPIDLE'):\n        sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_KEEPIDLE, 600)\n\n    return sock", 
            "date_created": "2012-04-12 00:41:35.072897+00:00", 
            "author": "https://api.launchpad.net/1.0/~jaypipes"
        }, 
        {
            "content": "Should probably start from the glance copy of this code - https://github.com/openstack/glance/blob/master/glance/common/wsgi.py", 
            "date_created": "2013-01-10 14:27:52.870767+00:00", 
            "author": "https://api.launchpad.net/1.0/~dims-v"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/19452\nCommitted: http://github.com/openstack/oslo-incubator/commit/e50b68c0d28cb00fa627525f23bb0c0f614b9312\nSubmitter: Jenkins\nBranch:    master\n\ncommit e50b68c0d28cb00fa627525f23bb0c0f614b9312\nAuthor: Davanum Srinivas <email address hidden>\nDate:   Fri Jan 11 00:10:56 2013 -0500\n\n    Support for SSL in wsgi.Service\n    \n    Enable support for SSL as well using code from glance. We\n    have some new options for configuring the SSL support.\n    \n    test_app starts wsgi.Service with a test app, then creates\n    a url to make sure the http requests are actually served\n    properly\n    \n    test_app_using_router adds wsgi.Router and Mapper() to the\n    mix along with using the wsgify annotation for serving\n    the http requests\n    \n    Fixes LP# 979488 (partial)\n    Fixes LP# 869884 (partial)\n    \n    DocImpact\n    \n    Change-Id: Iae47b13b50e00c102c8c36f4a3e73b24fa4e6303\n", 
            "date_created": "2013-02-02 16:52:37.191273+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Jay, do you still want to reorignize the config files? If so we should re-open this bug under oslo (oslo.config). Marking as opinion for nova, feel free to change it back.", 
            "date_created": "2014-07-12 19:24:40.855463+00:00", 
            "author": "https://api.launchpad.net/1.0/~jogo"
        }, 
        {
            "content": "LOL, this was a long time ago. I still think it's a worthwhile effort, but extremely low priority.", 
            "date_created": "2014-07-13 00:25:26.768095+00:00", 
            "author": "https://api.launchpad.net/1.0/~jaypipes"
        }
    ]
}
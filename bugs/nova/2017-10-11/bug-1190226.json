{
    "status": "Invalid", 
    "last_updated": "2015-06-06 20:37:05.819797+00:00", 
    "description": "Grant Murphy (<email address hidden>) conducted an audit of OpenStack and reported the following potential SQL injection vulnerabilities in Swift and Nova. These may well not be exploitable, we need to doublecheck them.\n\nswift/swift/common/db.py:376: UPDATE %s_stat SET id=?\nswift/swift/common/db.py:379: SELECT ROWID FROM %s ORDER BY ROWID DESC LIMIT 1\nswift/swift/common/db.py:403: UPDATE %s_stat SET created_at=MIN(?, created_at),\nswift/swift/common/db.py:424: SELECT * FROM %s WHERE ROWID > ? ...\nswift/swift/common/db.py:440: \"SELECT sync_point FROM %s_sync WHERE remote_id=?\"\nswift/swift/common/db.py:456: SELECT remote_id, sync_point FROM %s_sync\nswift/swift/common/db.py:512: INSERT INTO %s_sync (sync_point, remote_id)\nswift/swift/common/db.py:518: UPDATE %s_sync SET sync_point=max(?, sync_point)\nswift/swift/common/db.py:561: metadata = conn.execute('SELECT metadata FROM %s_stat' %\nswift/swift/common/db.py:592: md = conn.execute('SELECT metadata FROM %s_stat' %\nswift/swift/common/db.py:607: conn.execute('UPDATE %s_stat SET metadata = ?' %\nswift/swift/common/db.py:633: md = conn.execute('SELECT metadata FROM %s_stat' %\nswift/swift/common/db.py:644: conn.execute('UPDATE %s_stat SET metadata = ?' %\n\nnova/nova/virt/hyperv/volumeutils.py:78: \"WHERE TargetName='%s'\" % target_iqn)\nnova/nova/virt/hyperv/hostutils.py:66: \"WHERE DeviceID='%s'\"\nnova/nova/virt/hyperv/basevolumeutils.py:123: \"Class WHERE TargetName='%s'\"\nnova/nova/db/sqlalchemy/utils.py:64:    return \"INSERT INTO %s %s\" % (\nnova/nova/db/sqlalchemy/migrate_repo/versions/152_change_type_of_deleted_column.py:40:\n   return \"INSERT INTO %s %s\" % (", 
    "tags": [], 
    "importance": "Undecided", 
    "heat": 14, 
    "link": "https://bugs.launchpad.net/nova/+bug/1190226", 
    "owner": "None", 
    "id": 1190226, 
    "index": 3738, 
    "created": "2013-06-12 13:13:16.106203+00:00", 
    "title": "Raw SQL used in swift/swift/common/db.py could be escaped", 
    "comments": [
        {
            "content": "Grant Murphy (<email address hidden>) conducted an audit of OpenStack and reported the following potential SQL injection vulnerabilities in Swift and Nova. These may well not be exploitable, we need to doublecheck them.\n\nswift/swift/common/db.py:376: UPDATE %s_stat SET id=?\nswift/swift/common/db.py:379: SELECT ROWID FROM %s ORDER BY ROWID DESC LIMIT 1\nswift/swift/common/db.py:403: UPDATE %s_stat SET created_at=MIN(?, created_at),\nswift/swift/common/db.py:424: SELECT * FROM %s WHERE ROWID > ? ...\nswift/swift/common/db.py:440: \"SELECT sync_point FROM %s_sync WHERE remote_id=?\"\nswift/swift/common/db.py:456: SELECT remote_id, sync_point FROM %s_sync\nswift/swift/common/db.py:512: INSERT INTO %s_sync (sync_point, remote_id)\nswift/swift/common/db.py:518: UPDATE %s_sync SET sync_point=max(?, sync_point)\nswift/swift/common/db.py:561: metadata = conn.execute('SELECT metadata FROM %s_stat' %\nswift/swift/common/db.py:592: md = conn.execute('SELECT metadata FROM %s_stat' %\nswift/swift/common/db.py:607: conn.execute('UPDATE %s_stat SET metadata = ?' %\nswift/swift/common/db.py:633: md = conn.execute('SELECT metadata FROM %s_stat' %\nswift/swift/common/db.py:644: conn.execute('UPDATE %s_stat SET metadata = ?' %\n\nnova/nova/virt/hyperv/volumeutils.py:78: \"WHERE TargetName='%s'\" % target_iqn)\nnova/nova/virt/hyperv/hostutils.py:66: \"WHERE DeviceID='%s'\"\nnova/nova/virt/hyperv/basevolumeutils.py:123: \"Class WHERE TargetName='%s'\"\nnova/nova/db/sqlalchemy/utils.py:64:    return \"INSERT INTO %s %s\" % (\nnova/nova/db/sqlalchemy/migrate_repo/versions/152_change_type_of_deleted_column.py:40:\n   return \"INSERT INTO %s %s\" % (", 
            "date_created": "2013-06-12 13:13:16.106203+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "For Swift:\n\nThe calls listed are used specifically to make code reusable, and the variables are only set within the code, and are not derived from user input, and thus are not at risk for injection. ", 
            "date_created": "2013-06-12 13:36:39.469992+00:00", 
            "author": "https://api.launchpad.net/1.0/~cthier"
        }, 
        {
            "content": "That said, I'm also not against reporting it as a bug, and having them properly escaped in swift, but it shouldn't be reported as a vulnerability for swift.", 
            "date_created": "2013-06-12 13:39:55.726192+00:00", 
            "author": "https://api.launchpad.net/1.0/~cthier"
        }, 
        {
            "content": "Awesome, thanks Chuck for the analysis.\r\n\r\nI'll mark Swift task as Invalid as far as the \"vulnerability\" is concerned... If they all turn out to be code improvements I'll just reopen the task and use this bug to track further fixes... otherwise if this bug turns out covering a real vulnerability I'll create a separate (wishlist) bug report for Swift to track this.", 
            "date_created": "2013-06-12 13:49:50.685192+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "Adding Alessandro and Boris so that they can look into Nova hyper-v and sqlalchemy cases.\nAre those raw SQL statements operating on user-controllable input ?", 
            "date_created": "2013-06-12 15:16:33.528903+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "On the Nova Hyper-V side, those are not SQL instructions. It's WQL, a pseudo-SQL language used by WMI, very limited in comparison with SQL.\n\nAlthough those instructions are not exploitable, sanitizing the input for WQL is generally a good idea. \n\nAdding also Pedro for the Volumeutils bits.", 
            "date_created": "2013-06-12 15:36:34.304109+00:00", 
            "author": "https://api.launchpad.net/1.0/~alexpilotti"
        }, 
        {
            "content": "I saw this code in nova/virt/hyperv/hostutils.py:\n\n        logical_disk = self._conn_cimv2.query(\"SELECT Size, FreeSpace \"\n                                              \"FROM win32_logicaldisk \"\n                                              \"WHERE DeviceID='%s'\"\n                                              % drive)[0]\n\n\nIt doesn't look like safe=)", 
            "date_created": "2013-06-12 16:04:03.950846+00:00", 
            "author": "https://api.launchpad.net/1.0/~boris-42"
        }, 
        {
            "content": "1) That's not SQL, It's WQL, a WMI specific language. There'n no database involved and there's no DML or DDL. \n\n2) That method is used only by hostops.py:\n\ndrive = os.path.splitdrive(self._pathutils.get_instances_dir())[0]\n        (size, free_space) = self._hostutils.get_volume_info(drive)\n\nhttps://github.com/openstack/nova/blob/master/nova/virt/hyperv/hostops.py#L80\n\nNow, please tell me how you want to exploit it :-)\n", 
            "date_created": "2013-06-12 16:18:04.415883+00:00", 
            "author": "https://api.launchpad.net/1.0/~alexpilotti"
        }, 
        {
            "content": "Ok in this current situation it is imposible to exploit it, \n\nbut without such context, this method is unsafe. I agree that with WQL you are not able to execute any Alter or Drop sql request. But you are able to run something like delete * from win32_logicaldisk =)", 
            "date_created": "2013-06-12 16:43:00.282426+00:00", 
            "author": "https://api.launchpad.net/1.0/~boris-42"
        }, 
        {
            "content": "No. As I wrote in a previous comment, there's no DML or DDL. The only SQL analog verb supported by WQL is \"SELECT\".\n\nFor your convenience here's a list of the WQL keywords: \nhttp://msdn.microsoft.com/en-us/library/windows/desktop/aa394606(v=vs.85).aspx\n\nGenerally speaking, as I wrote before, I agree in putting input sanitization checks as a rule of thumb when we use WQL, although there are no real exploit concerns. Its SQL-like syntax, unfamiliar to those which are not involved in Windows development, can understandably generate discussions such as this one. :-)\n\nNote: WQL does not support parameters, so we have create an ad hoc method to manually escape the WQL string quotes.\n", 
            "date_created": "2013-06-12 17:06:34.970583+00:00", 
            "author": "https://api.launchpad.net/1.0/~alexpilotti"
        }, 
        {
            "content": "ok =)", 
            "date_created": "2013-06-12 17:24:06.699772+00:00", 
            "author": "https://api.launchpad.net/1.0/~boris-42"
        }, 
        {
            "content": "@Boris: could you comment on the exploitability of:\n\nnova/nova/db/sqlalchemy/utils.py:64: return \"INSERT INTO %s %s\" % (\nnova/nova/db/sqlalchemy/migrate_repo/versions/152_change_type_of_deleted_column.py:40: return \"INSERT INTO %s %s\"", 
            "date_created": "2013-06-13 09:27:38.574262+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "Ok I wrote that part of code, it is really imposible to make anything bad with this part of code.\n\nsqlalchemy/utils.py are utils that are used only in db migrations. \nDB migrations are runed only by host administrators with root access to host + root access to db. \n\nSo if you are able to run this code, you are able to make something like:\nssh root@my_control_host\nmysql -u...\n> drop database nova\n\n=)\n\nAlso there is no user/administrator input at all (input parameters for this functions are hardcoded in db migrations)", 
            "date_created": "2013-06-13 09:49:25.311735+00:00", 
            "author": "https://api.launchpad.net/1.0/~boris-42"
        }, 
        {
            "content": "That's what I thought... but better safe than sorry.\n\n@ Kurt:\n\nGiven that none of those occurences are actually exploitable, I think it makes sense to open this bug report and treat it as a wishlist strengthening improvement to get rid of the SQL calls where they could be replaced by library calls, if any.\n\nLet me know if you object to opening this bug report.", 
            "date_created": "2013-06-13 10:08:42.993652+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "@ Kurt, @Thierry\n\nJust to be clear,\nI would prefer to avoid any changes in db migrations scripts and db migration utils ", 
            "date_created": "2013-06-13 10:37:11.611537+00:00", 
            "author": "https://api.launchpad.net/1.0/~boris-42"
        }, 
        {
            "content": "@Thierry\n\nOn the WMI side (Hyper-V) the pseudo SQL syntax is simply the way in which the APIs are designed to be used. ", 
            "date_created": "2013-06-13 11:43:40.045593+00:00", 
            "author": "https://api.launchpad.net/1.0/~alexpilotti"
        }, 
        {
            "content": "Turning into Wishlist bug as suggested by Chuck on comment 2", 
            "date_created": "2013-06-17 07:38:54.406827+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }
    ]
}
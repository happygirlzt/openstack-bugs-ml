{
    "status": "Won't Fix", 
    "last_updated": "2014-11-19 18:48:42.583501+00:00", 
    "description": "The atom links have a huge overhead.  In a quick experiment with an instance listing, the response doubled in size vs if the atom links were not present.  As the atom links seem to carry no extra information vs the IDs, they should be optional.  \n\nFurther, per the Atom RFC (http://www.ietf.org/rfc/rfc4287), the correct Content-Type for atom links is application/atom+xml.  As such, we should return atom links only if the user sends an Accept header including the content type \"application/atom+xml\" or \"application/atom+json\".\n\nIf the client does not send an atom content type, but instead specifies e.g. \"Accept: application/json\", then we must not return the Atom formatted information.", 
    "tags": [
        "xml"
    ], 
    "importance": "Wishlist", 
    "heat": 8, 
    "link": "https://bugs.launchpad.net/nova/+bug/938314", 
    "owner": "None", 
    "id": 938314, 
    "index": 1207, 
    "created": "2012-02-22 00:51:15.032342+00:00", 
    "title": "Atom links should respect Accept header", 
    "comments": [
        {
            "content": "The atom links have a huge overhead.  In a quick experiment with an instance listing, the response doubled in size vs if the atom links were not present.  As the atom links seem to carry no extra information vs the IDs, they should be optional.  \n\nFurther, per the Atom RFC (http://www.ietf.org/rfc/rfc4287), the correct Content-Type for atom links is application/atom+xml.  As such, we should return atom links only if the user sends an Accept header including the content type \"application/atom+xml\" or \"application/atom+json\".\n\nIf the client does not send an atom content type, but instead specifies e.g. \"Accept: application/json\", then we must not return the Atom formatted information.", 
            "date_created": "2012-02-22 00:51:15.032342+00:00", 
            "author": "https://api.launchpad.net/1.0/~justin-fathomdb"
        }, 
        {
            "content": "I can't reproduce this in Essex:\n\nhttps://gist.github.com/51c9103a3d5d011ba4a1", 
            "date_created": "2012-03-01 23:19:24.854584+00:00", 
            "author": "https://api.launchpad.net/1.0/~0x44"
        }, 
        {
            "content": "Whoops, my apologies\u2026\u00a0I pasted that into the wrong bug.", 
            "date_created": "2012-03-01 23:22:27.944992+00:00", 
            "author": "https://api.launchpad.net/1.0/~0x44"
        }, 
        {
            "content": "Looks like the following patch will solve the reported problem\u2026\u00a0but it does break all the extant tests:\n\nhttps://gist.github.com/abafb94d4e2f4d905b9d", 
            "date_created": "2012-03-02 01:05:22.997222+00:00", 
            "author": "https://api.launchpad.net/1.0/~0x44"
        }, 
        {
            "content": "If I understand the bug, you want to only return the atom links if the Accept header of the\nGET to an Instance contains app/atom+xml (or app/atom+json).  If so, then I think there's a \nproblem with this because the Accept header of the GET to the Instance doesn't really\ntell you what the client is expecting when they follow the atom link.  For all we know the client\nwill do a GET to the atom link's href and include app/atom+xml in that GET request - we can't tell\nfrom just the GET to the Instance.\n\nIf we really want to reduce the size of resources that are returned I would suggest that we \nlook at a new query parameter that specifically means \"do not include hrefs\" - e.g.   ?noref\nor something like that. \n\nBut perhaps I'm misunderstanding the bug.", 
            "date_created": "2012-05-30 19:16:44.173278+00:00", 
            "author": "https://api.launchpad.net/1.0/~dug"
        }, 
        {
            "content": "Currently when you send a request like this.\n\nGET http://example.com:8774/v2/0ddd9584ce9141e582249cef3e934e15/servers HTTP/1.1\nUser-Agent: Fiddler\nHost: example.com:8774\nX-Auth-Token: 7fd5cd2c38674c0b9ff8249340060402\nAccept: application/xml\n\nyou will get this.\n\n<?xml version='1.0' encoding='UTF-8'?>\n<servers xmlns:atom=\"http://www.w3.org/2005/Atom\" xmlns=\"http://docs.openstack.org/compute/api/v1.1\">\n\t<server name=\"myMachine2\" id=\"5b66b7d5-264c-42b5-be17-6148bcd1ed5f\">\n\t\t<atom:link href=\"http://example.com:8774/v2/0ddd9584ce9141e582249cef3e934e15/servers/5b66b7d5-264c-42b5-be17-6148bcd1ed5f\" rel=\"self\"/>\n\t\t<atom:link href=\"http://example.com:8774/0ddd9584ce9141e582249cef3e934e15/servers/5b66b7d5-264c-42b5-be17-6148bcd1ed5f\" rel=\"bookmark\"/>\n\t</server>\n\t<server name=\"myMachine1\" id=\"8e809e9a-62d8-48db-a330-cc4c9be968d0\">\n\t\t<atom:link href=\"http://example.com:8774/v2/0ddd9584ce9141e582249cef3e934e15/servers/8e809e9a-62d8-48db-a330-cc4c9be968d0\" rel=\"self\"/>\n\t\t<atom:link href=\"http://example.com:8774/0ddd9584ce9141e582249cef3e934e15/servers/8e809e9a-62d8-48db-a330-cc4c9be968d0\" rel=\"bookmark\"/>\n\t</server>\n</servers>\n\nDo you want to get the following behavior instead?\n\nGET http://example.com:8774/v2/0ddd9584ce9141e582249cef3e934e15/images HTTP/1.1\nUser-Agent: Fiddler\nHost: example.com:8774\nX-Auth-Token: 7fd5cd2c38674c0b9ff8249340060402\nAccept: application/xml\n\nresponse:\n<?xml version='1.0' encoding='UTF-8'?>\n<servers xmlns=\"http://docs.openstack.org/compute/api/v1.1\">\n\t<server name=\"myMachine2\" id=\"5b66b7d5-264c-42b5-be17-6148bcd1ed5f\">\n\t\t<link href=\"http://example.com:8774/v2/0ddd9584ce9141e582249cef3e934e15/servers/5b66b7d5-264c-42b5-be17-6148bcd1ed5f\" rel=\"self\"/>\n\t\t<link href=\"http://example.com:8774/0ddd9584ce9141e582249cef3e934e15/servers/5b66b7d5-264c-42b5-be17-6148bcd1ed5f\" rel=\"bookmark\"/>\n\t</server>\n\t<server name=\"myMachine1\" id=\"8e809e9a-62d8-48db-a330-cc4c9be968d0\">\n\t\t<link href=\"http://example.com:8774/v2/0ddd9584ce9141e582249cef3e934e15/servers/8e809e9a-62d8-48db-a330-cc4c9be968d0\" rel=\"self\"/>\n\t\t<link href=\"http://example.com:8774/0ddd9584ce9141e582249cef3e934e15/servers/8e809e9a-62d8-48db-a330-cc4c9be968d0\" rel=\"bookmark\"/>\n\t</server>\n</servers>\n\nWhen you have this request\n\nGET http://example.com:8774/v2/0ddd9584ce9141e582249cef3e934e15/servers HTTP/1.1\nUser-Agent: Fiddler\nHost: example.com:8774\nX-Auth-Token: 7fd5cd2c38674c0b9ff8249340060402\nAccept: application/atom+xml\n\nThen the response will be the same as what it is now?\n\nIf I guessed your intention right, then the difference is rather small. Unless you want all the links to be removed, in that case, I would think the response will miss information.\n", 
            "date_created": "2012-05-31 13:51:41.801468+00:00", 
            "author": "https://api.launchpad.net/1.0/~litong01"
        }, 
        {
            "content": "According to the standard, links should only be present when the type is app/atom+xml or app/atom+json.\n\nThe links are redundant information; they can trivially be inferred from the url and the id.  Further, I believe that the links don't include the version, and thus the link URL is invalid as provided.\n\nIn short, these links are:\n (1) a lot of overhead\n (2) superfluous\n (3) incorrect according to the standard\n (4) incorrect because of the version problem.\n\nSome people might want atom links, but we should not return such an flawed response unless it is explicitly requested using the correct Accept header.\n", 
            "date_created": "2012-06-01 01:37:17.964298+00:00", 
            "author": "https://api.launchpad.net/1.0/~justin-fathomdb"
        }, 
        {
            "content": "Which standard are you referring to?  If you mean the Atom standard \nthen I don't think it applies since Atom doesn't control what we return \nfor a GET to an Instance - that's under our control as its defined by\nour docs not the Atom standard.  The other, kind of interesting, aspect\nis that if you look at the xml snippets that Tong pasted, the <link>\nelements are not in the Atom namespace.  Which, to me, means \nthey're not Atom links - they're just links that might share similar\nsemantics and syntax with atom:links.  But, w/o them being in the\natom namespace, Atom has no control over them.  Is it a bug\nthat they're not in the atom namespace?\n\nI can't comment on whether they're needed or not, but unless we\nremove them entirely from the representation of an Instance\n(Vish?) I would think the best path for optionally excluding them\nwould be to base it on some flag other than the Accept header -\nlike a new query param as I suggested above.", 
            "date_created": "2012-06-01 01:54:42.866986+00:00", 
            "author": "https://api.launchpad.net/1.0/~dug"
        }, 
        {
            "content": "oops- for some reason when I looked before the \"atom:\" didn't appear - now they do.\nIgnore my comment about them not being the Atom namespace.  The rest of\nmy comments apply though.  Weird. Maybe I need some sleep  :-)", 
            "date_created": "2012-06-01 01:56:31.500513+00:00", 
            "author": "https://api.launchpad.net/1.0/~dug"
        }, 
        {
            "content": "we are dropping XML support in nova in Juno", 
            "date_created": "2014-11-19 18:48:37.596869+00:00", 
            "author": "https://api.launchpad.net/1.0/~jogo"
        }
    ]
}
{
    "status": "Fix Released", 
    "last_updated": "2015-04-30 09:18:21.252872+00:00", 
    "description": "The problem is happening when there are more ports created in neutron than the\nquota on it.\n\nIn this case, neutron client api will return a negative number for\nmax_net_count, which will be used as a total number of instances that should\nbe provisioned, and as a result none are being provisioned.\nThis caused the above exception to be raised.\n\n\n_create_instance() \n    |\n    |--> base_options, max_net_count = self._validate_and_build_base_options()\n    |                                                            |\n    |     max_network_count = self._check_requested_networks()<--'\n    |                                            |\n    |     self.network_api.validate_networks()<--'\n    |        |\n    |        `--> \n    |            free_ports = quotas.get('port') - len(ports)\n    |            ports_needed = ports_needed_per_instance * num_instances\n    |            if free_ports >= ports_needed:\n    |                return num_instances \n    |            else:\n    |                return free_ports // ports_needed_per_instance\n    |\n    | # Continuing in _create_instance max_count gets the value of\n    | # max_net_count:\n    |\n    |-->  elif max_net_count < max_count:\n    |         LOG.debug(_(\"max count reduced from %(max_count)d to \"\n    |                     \"%(max_net_count)d due to network port quota\"),\n    |                     {'max_count': max_count,\n    |                      'max_net_count': max_net_count})\n    |         max_count = max_net_count\n    |\n    | # Now, _provision_instances is being called to provision a negative\n    | # number of instances\n    |--> instances = self._provision_instances(context, instance_type,\n                min_count, max_count, base_options, boot_meta, security_groups,\n                block_device_mapping)\n                |\n                `-> LOG.debug(_(\"Going to run %s instances..\") % num_instances)\n                    instances = []\n                    try:\n                        for i in xrange(num_instances):\n                            instance = instance_obj.Instance()\n                            instance.update(base_options)\n                            instance = self.create_db_entry_for_new_instance(\n                                  context, instance_type, boot_meta, instance,\n                                  security_groups, block_device_mapping,\n                                  num_instances, i)\n\n                            instances.append(instance)\n                    ...\n                    return instances # this will return an empty list.\n                    \nserver = self._view_builder.create(req, instances[0])   \nIndexError: list index out", 
    "tags": [], 
    "importance": "Medium", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1401171", 
    "owner": "https://api.launchpad.net/1.0/~sahid-ferdjaoui", 
    "id": 1401171, 
    "index": 4112, 
    "created": "2014-12-10 16:39:59.825407+00:00", 
    "title": "Instance creation fails with with HTTP 500 - IndexError: list index out of range", 
    "comments": [
        {
            "content": "The problem is happening when there are more ports created in neutron than the\nquota on it.\n\nIn this case, neutron client api will return a negative number for\nmax_net_count, which will be used as a total number of instances that should\nbe provisioned, and as a result none are being provisioned.\nThis caused the above exception to be raised.\n\n\n_create_instance() \n    |\n    |--> base_options, max_net_count = self._validate_and_build_base_options()\n    |                                                            |\n    |     max_network_count = self._check_requested_networks()<--'\n    |                                            |\n    |     self.network_api.validate_networks()<--'\n    |        |\n    |        `--> \n    |            free_ports = quotas.get('port') - len(ports)\n    |            ports_needed = ports_needed_per_instance * num_instances\n    |            if free_ports >= ports_needed:\n    |                return num_instances \n    |            else:\n    |                return free_ports // ports_needed_per_instance\n    |\n    | # Continuing in _create_instance max_count gets the value of\n    | # max_net_count:\n    |\n    |-->  elif max_net_count < max_count:\n    |         LOG.debug(_(\"max count reduced from %(max_count)d to \"\n    |                     \"%(max_net_count)d due to network port quota\"),\n    |                     {'max_count': max_count,\n    |                      'max_net_count': max_net_count})\n    |         max_count = max_net_count\n    |\n    | # Now, _provision_instances is being called to provision a negative\n    | # number of instances\n    |--> instances = self._provision_instances(context, instance_type,\n                min_count, max_count, base_options, boot_meta, security_groups,\n                block_device_mapping)\n                |\n                `-> LOG.debug(_(\"Going to run %s instances..\") % num_instances)\n                    instances = []\n                    try:\n                        for i in xrange(num_instances):\n                            instance = instance_obj.Instance()\n                            instance.update(base_options)\n                            instance = self.create_db_entry_for_new_instance(\n                                  context, instance_type, boot_meta, instance,\n                                  security_groups, block_device_mapping,\n                                  num_instances, i)\n\n                            instances.append(instance)\n                    ...\n                    return instances # this will return an empty list.\n                    \nserver = self._view_builder.create(req, instances[0])   \nIndexError: list index out", 
            "date_created": "2014-12-10 16:39:59.825407+00:00", 
            "author": "https://api.launchpad.net/1.0/~vladik-romanovsky"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/140888", 
            "date_created": "2014-12-11 00:58:59.349412+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/140888\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=00bfc54403c9d918469963276338f2c0f1f3bb63\nSubmitter: Jenkins\nBranch:    master\n\ncommit 00bfc54403c9d918469963276338f2c0f1f3bb63\nAuthor: Vladik Romanovsky <email address hidden>\nDate:   Wed Dec 10 17:29:37 2014 -0500\n\n    Reply with a meaningful exception when ports are over the quota limit\n    \n    Currently, neutron client api returns a negative number\n    for max_net_count, when the number of port is over the quota limit,\n    instead of raising a meaningful exception.\n    Raising an PortLimitExceeded exception, when the above issue occur.\n    \n    Closes-Bug: #1401171\n    Change-Id: I5c9c7276f1d90e856ecc6b8c40e7efab4a625796\n", 
            "date_created": "2015-01-27 20:11:14.344695+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ]
}
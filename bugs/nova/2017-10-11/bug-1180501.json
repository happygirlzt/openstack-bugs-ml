{
    "status": "Fix Released", 
    "last_updated": "2013-10-17 11:52:48.406251+00:00", 
    "description": "When an instance is deleted (ComputeManager.terminate_instance), the compute driver is told to destroy the instance and wait for its destruction, then the instance is removed from the database. Using the libvirt+kvm compute driver on stable/grizzly and libvirt-1.0.4, when the instance is destroyed, an EVENT_LIFECYCLE_STOPPED is asynchronously delivered to nova-compute by libvirt. If the EVENT_LIFECYCLE_STOPPED is handled after the instance has been removed from the database, then CopmuteManager's lifecycle event handler bombs when it tries to look the instance up in the database (see stack trace below). \n\nThe error is benign since the lifecycle event handler just syncs the power state of instances and this instance already has the correct power state (i.e., not in the database at all). However, the stack trace is scary and should probably be fixed.\n\nThe more stuff happening in parallel makes the bug easier to observe:\n* It seems easiest to reproduce this bug when lots (10+) of instances are being created and deleted in parallel.\n* I'm fairly certain this race exists regardless of libvirt version (i.e., asynchronous delivery of an event, handling of which queries a potentially deleted record), however I haven't been able to reproduce it with an older version (libvirt-0.9.8). This is probably explained by libvirt-1.0.3+ having a bunch of bottlenecks removed (see Daniel Berrange's patch series on libvirt-devel).\n* I'm working on concurrency bottlenecks in OpenStack. With a bunch of these fixed, the bug happens almost all of the time.\n\nI haven't tested this on the master branch, but the faulting bits (ComputeManager.handle_lifecycle_event) haven't changed.\n\nThis problem could be fixed in a couple of ways:\n\n1) Wait for the EVENT_LIFECYCLE_STOPPED in LibvirtDriver.destroy rather than polling libvirt (see _wait_for_destroy).\n2) Ignore events in ComputeManager.handle_lifecycle_event for non-existant instances.\n3) maintain a deleted list (i.e., list of instance uuids for which events can be ignored).\n\nI think (2) is simplest  to implement and most robust. Moreover, (2) will handle other the race between any event delivery and the deletion of a domain. Although (3) has the advantage that it won't mask database deletion bugs, it introduces a garbage collection problem. \n\nRelevant blueprint: https://blueprints.launchpad.net/nova/+spec/compute-driver-events\n\nInstanceNotFound: Instance 9b6045c5-4d63-47fd-8df1-5c424c72d5be could not be found.\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver Traceback (most recent call last):\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/virt/driver.py\", line 902, in emit_event\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     self._compute_event_callback(event)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/compute/manager.py\", line 577, in handle_events\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     self.handle_lifecycle_event(event)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/compute/manager.py\", line 556, in handle_lifecycle_event\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     context, event.get_instance_uuid())\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/conductor/api.py\", line 402, in instance_get_by_uuid\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     instance_uuid)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/conductor/rpcapi.py\", line 122, in instance_get_by_uuid\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     return self.call(context, msg, version='1.2')\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/openstack/common/rpc/proxy.py\", line 83, in call\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     return rpc.call(context, self._get_topic(topic), msg, timeout)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/openstack/common/rpc/__init__.py\", line 95, in wrapper\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     return fn(*args, **kwargs)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/openstack/common/rpc/__init__.py\", line 162, in call\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     return _get_impl().call(CONF, context, topic, msg, timeout)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/openstack/common/rpc/impl_kombu.py\", line 798, in call\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     rpc_amqp.get_connection_pool(conf, Connection))\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/openstack/common/rpc/amqp.py\", line 612, in call\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     rv = list(rv)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/openstack/common/rpc/amqp.py\", line 561, in __iter__\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     raise result\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver InstanceNotFound_Remote: Instance 9b6045c5-4d63-47fd-8df1-5c424c72d5be could not be found.\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver Traceback (most recent call last):\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/openstack/common/rpc/common.py\", line 407, in catch_client_exception\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     return func(*args, **kwargs)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/conductor/manager.py\", line 107, in instance_get_by_uuid\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     self.db.instance_get_by_uuid(context, instance_uuid))\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/db/api.py\", line 598, in instance_get_by_uuid\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     return IMPL.instance_get_by_uuid(context, uuid)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/openstack/common/trace/__init__.py\", line 258, in wrapper\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     r = fn(*args, **kwargs)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/db/sqlalchemy/api.py\", line 115, in wrapper\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     return f(*args, **kwargs)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/db/sqlalchemy/api.py\", line 1531, in instance_get_by_uuid\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     return _instance_get_by_uuid(context, uuid)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/db/sqlalchemy/api.py\", line 115, in wrapper\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     return f(*args, **kwargs)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/db/sqlalchemy/api.py\", line 1541, in _instance_get_by_uuid\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     raise exception.InstanceNotFound(instance_id=uuid)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver InstanceNotFound: Instance 9b6045c5-4d63-47fd-8df1-5c424c72d5be could not be found.\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver\n2013-05-15 11:03:05.742 3270 DEBUG nova.virt.driver [-] Emitting event <nova.virt.event.LifecycleEvent object at 0x4029c50> emit_event /opt/stack/nova/nova/virt/driver.py:901", 
    "tags": [], 
    "importance": "Low", 
    "heat": 8, 
    "link": "https://bugs.launchpad.net/nova/+bug/1180501", 
    "owner": "https://api.launchpad.net/1.0/~pete5", 
    "id": 1180501, 
    "index": 5759, 
    "created": "2013-05-15 18:35:18.357263+00:00", 
    "title": "handling EVENT_LIFECYCLE_STOPPED races with removing instance from database", 
    "comments": [
        {
            "content": "When an instance is deleted (ComputeManager.terminate_instance), the compute driver is told to destroy the instance and wait for its destruction, then the instance is removed from the database. Using the libvirt+kvm compute driver on stable/grizzly and libvirt-1.0.4, when the instance is destroyed, an EVENT_LIFECYCLE_STOPPED is asynchronously delivered to nova-compute by libvirt. If the EVENT_LIFECYCLE_STOPPED is handled after the instance has been removed from the database, then CopmuteManager's lifecycle event handler bombs when it tries to look the instance up in the database (see stack trace below). \n\nThe error is benign since the lifecycle event handler just syncs the power state of instances and this instance already has the correct power state (i.e., not in the database at all). However, the stack trace is scary and should probably be fixed.\n\nThe more stuff happening in parallel makes the bug easier to observe:\n* It seems easiest to reproduce this bug when lots (10+) of instances are being created and deleted in parallel.\n* I'm fairly certain this race exists regardless of libvirt version (i.e., asynchronous delivery of an event, handling of which queries a potentially deleted record), however I haven't been able to reproduce it with an older version (libvirt-0.9.8). This is probably explained by libvirt-1.0.3+ having a bunch of bottlenecks removed (see Daniel Berrange's patch series on libvirt-devel).\n* I'm working on concurrency bottlenecks in OpenStack. With a bunch of these fixed, the bug happens almost all of the time.\n\nI haven't tested this on the master branch, but the faulting bits (ComputeManager.handle_lifecycle_event) haven't changed.\n\nThis problem could be fixed in a couple of ways:\n\n1) Wait for the EVENT_LIFECYCLE_STOPPED in LibvirtDriver.destroy rather than polling libvirt (see _wait_for_destroy).\n2) Ignore events in ComputeManager.handle_lifecycle_event for non-existant instances.\n3) maintain a deleted list (i.e., list of instance uuids for which events can be ignored).\n\nI think (2) is simplest  to implement and most robust. Moreover, (2) will handle other the race between any event delivery and the deletion of a domain. Although (3) has the advantage that it won't mask database deletion bugs, it introduces a garbage collection problem. \n\nRelevant blueprint: https://blueprints.launchpad.net/nova/+spec/compute-driver-events\n\nInstanceNotFound: Instance 9b6045c5-4d63-47fd-8df1-5c424c72d5be could not be found.\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver Traceback (most recent call last):\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/virt/driver.py\", line 902, in emit_event\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     self._compute_event_callback(event)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/compute/manager.py\", line 577, in handle_events\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     self.handle_lifecycle_event(event)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/compute/manager.py\", line 556, in handle_lifecycle_event\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     context, event.get_instance_uuid())\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/conductor/api.py\", line 402, in instance_get_by_uuid\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     instance_uuid)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/conductor/rpcapi.py\", line 122, in instance_get_by_uuid\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     return self.call(context, msg, version='1.2')\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/openstack/common/rpc/proxy.py\", line 83, in call\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     return rpc.call(context, self._get_topic(topic), msg, timeout)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/openstack/common/rpc/__init__.py\", line 95, in wrapper\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     return fn(*args, **kwargs)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/openstack/common/rpc/__init__.py\", line 162, in call\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     return _get_impl().call(CONF, context, topic, msg, timeout)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/openstack/common/rpc/impl_kombu.py\", line 798, in call\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     rpc_amqp.get_connection_pool(conf, Connection))\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/openstack/common/rpc/amqp.py\", line 612, in call\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     rv = list(rv)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/openstack/common/rpc/amqp.py\", line 561, in __iter__\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     raise result\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver InstanceNotFound_Remote: Instance 9b6045c5-4d63-47fd-8df1-5c424c72d5be could not be found.\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver Traceback (most recent call last):\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/openstack/common/rpc/common.py\", line 407, in catch_client_exception\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     return func(*args, **kwargs)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/conductor/manager.py\", line 107, in instance_get_by_uuid\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     self.db.instance_get_by_uuid(context, instance_uuid))\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/db/api.py\", line 598, in instance_get_by_uuid\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     return IMPL.instance_get_by_uuid(context, uuid)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/openstack/common/trace/__init__.py\", line 258, in wrapper\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     r = fn(*args, **kwargs)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/db/sqlalchemy/api.py\", line 115, in wrapper\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     return f(*args, **kwargs)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/db/sqlalchemy/api.py\", line 1531, in instance_get_by_uuid\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     return _instance_get_by_uuid(context, uuid)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/db/sqlalchemy/api.py\", line 115, in wrapper\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     return f(*args, **kwargs)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver   File \"/opt/stack/nova/nova/db/sqlalchemy/api.py\", line 1541, in _instance_get_by_uuid\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver     raise exception.InstanceNotFound(instance_id=uuid)\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver InstanceNotFound: Instance 9b6045c5-4d63-47fd-8df1-5c424c72d5be could not be found.\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver\n2013-05-15 11:03:05.735 3270 TRACE nova.virt.driver\n2013-05-15 11:03:05.742 3270 DEBUG nova.virt.driver [-] Emitting event <nova.virt.event.LifecycleEvent object at 0x4029c50> emit_event /opt/stack/nova/nova/virt/driver.py:901", 
            "date_created": "2013-05-15 18:35:18.357263+00:00", 
            "author": "https://api.launchpad.net/1.0/~pete5"
        }, 
        {
            "content": "I will submit a patch in the next couple of days to implement approach (2).", 
            "date_created": "2013-05-15 18:41:19.189291+00:00", 
            "author": "https://api.launchpad.net/1.0/~pete5"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/33855", 
            "date_created": "2013-06-20 17:04:57.148693+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/33855\nCommitted: http://github.com/openstack/nova/commit/3d3affc752613f0f12cd25109b1d5be05bfe0c6f\nSubmitter: Jenkins\nBranch:    master\n\ncommit 3d3affc752613f0f12cd25109b1d5be05bfe0c6f\nAuthor: Peter Feiner <email address hidden>\nDate:   Wed May 15 14:03:56 2013 -0500\n\n    Ignore lifecycle events for non-existent instances\n    \n    Since event delivery is asynchronous, there's an inherent yet benign race in the\n    event handler querying the database for a deleted instance.\n    \n    Fixes bug #1180501.\n    \n    Change-Id: I8e478fb13bedfc86730018ba849ecc71d4286f0d\n", 
            "date_created": "2013-06-28 13:16:25.362474+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ]
}
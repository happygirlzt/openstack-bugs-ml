{
    "status": "Invalid", 
    "last_updated": "2014-11-19 19:08:16.772488+00:00", 
    "description": "version: essex\n\nIn function \"_run_instance\" of class \"ComputeManager\" in nova/compute/manager.py, it seems that the exception handling logic assumes the availability of database service, which is problematic because an exception may be triggered by the unavailability of database service. \n\nFor example, if the database service (mysqld in our case) crashes (and then restarts e.g. in a few seconds) when the \"_spawn\" is executing, as shown in the snippet below, then the three-fold exception handling logic of \"_run_instance\" would all fail. \n\n==========\n(wrapper)\ntry:\n\t(inside _run_instance)\n\ttry:\n\t\ttry:\n\t\t\t_spawn\n\t\texcept:\n\t\t\t_deallocate_network\n\texcept:\n\t\t_set_instance_error_state\nexcept:\n\tadd_instance_fault_from_exc\n==========\n\nSpecifically, \"_deallocate_network\" would not be able to reset the ip to the state \"allocated=0\" in db \"nova.fixed_ips\" (assuming the use of fixed ip). \"_set_instance_error_state\" would not be able to set vm_state to ERROR in db \"nova.instances.\" And \"add_instance_fault_from_exc\" would not be able to add the fault information into db \"nova.instance_faults.\"", 
    "tags": [], 
    "importance": "Undecided", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1153774", 
    "owner": "None", 
    "id": 1153774, 
    "index": 3501, 
    "created": "2013-03-11 20:36:28.860172+00:00", 
    "title": "exception handling logic questionably assumes the availability of database service", 
    "comments": [
        {
            "content": "version: essex\n\nIn function \"_run_instance\" of class \"ComputeManager\" in nova/compute/manager.py, it seems that the exception handling logic assumes the availability of database service, which is problematic because an exception may be triggered by the unavailability of database service. \n\nFor example, if the database service (mysqld in our case) crashes (and then restarts e.g. in a few seconds) when the \"_spawn\" is executing, as shown in the snippet below, then the three-fold exception handling logic of \"_run_instance\" would all fail. \n\n==========\n(wrapper)\ntry:\n\t(inside _run_instance)\n\ttry:\n\t\ttry:\n\t\t\t_spawn\n\t\texcept:\n\t\t\t_deallocate_network\n\texcept:\n\t\t_set_instance_error_state\nexcept:\n\tadd_instance_fault_from_exc\n==========\n\nSpecifically, \"_deallocate_network\" would not be able to reset the ip to the state \"allocated=0\" in db \"nova.fixed_ips\" (assuming the use of fixed ip). \"_set_instance_error_state\" would not be able to set vm_state to ERROR in db \"nova.instances.\" And \"add_instance_fault_from_exc\" would not be able to add the fault information into db \"nova.instance_faults.\"", 
            "date_created": "2013-03-11 20:36:28.860172+00:00", 
            "author": "https://api.launchpad.net/1.0/~samuel-xj"
        }, 
        {
            "content": "Are there cases where DB re-connection and re-try is not working?  I think that there is.  I wonder if this bug is more appropriate as \"DB calls should always be retried on failure to connect to DB server\".", 
            "date_created": "2013-03-13 21:10:02.868869+00:00", 
            "author": "https://api.launchpad.net/1.0/~cbehrens"
        }, 
        {
            "content": "Thanks for the kind suggestion. We agree that this may be better reclassified as a DB call issue. ", 
            "date_created": "2013-03-15 04:32:14.943647+00:00", 
            "author": "https://api.launchpad.net/1.0/~samuel-xj"
        }, 
        {
            "content": "this is very old and a lot has changed since this was filed.", 
            "date_created": "2014-11-19 19:08:11.779154+00:00", 
            "author": "https://api.launchpad.net/1.0/~jogo"
        }
    ]
}
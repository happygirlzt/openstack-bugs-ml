{
    "status": "Fix Released", 
    "last_updated": "2016-12-19 12:01:55.887691+00:00", 
    "description": "When the libvirt driver fails to start a VM due to reasons other than neutron plug timeout, it leaves interfaces on the system from the vif plugging. If a subsequent delete is performed and completes successfully, these will be removed. However, in cases where connectivity is preventing a normal delete, a local delete will be performed at the api level and the interfaces will remain.\n\nIn at least one real world situation I have observed, a script was creating test instances which were failing and leaving residue. After the residue interface count reached about 6,000 on the system, VM creates started failing with \"Argument list too long\" as libvirt was choking on enumerating the interfaces it had left behind.", 
    "tags": [
        "libvirt"
    ], 
    "importance": "Medium", 
    "heat": 26, 
    "link": "https://bugs.launchpad.net/nova/+bug/1648840", 
    "owner": "https://api.launchpad.net/1.0/~danms", 
    "id": 1648840, 
    "index": 4704, 
    "created": "2016-12-09 16:06:44.528939+00:00", 
    "title": "libvirt driver leaves interface residue after failed start", 
    "comments": [
        {
            "content": "When the libvirt driver fails to start a VM due to reasons other than neutron plug timeout, it leaves interfaces on the system from the vif plugging. If a subsequent delete is performed and completes successfully, these will be removed. However, in cases where connectivity is preventing a normal delete, a local delete will be performed at the api level and the interfaces will remain.\n\nIn at least one real world situation I have observed, a script was creating test instances which were failing and leaving residue. After the residue interface count reached about 6,000 on the system, VM creates started failing with \"Argument list too long\" as libvirt was choking on enumerating the interfaces it had left behind.", 
            "date_created": "2016-12-09 16:06:44.528939+00:00", 
            "author": "https://api.launchpad.net/1.0/~danms"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/408806\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=5e7f765266e0b94807e019b645c8be89770e7428\nSubmitter: Jenkins\nBranch:    master\n\ncommit 5e7f765266e0b94807e019b645c8be89770e7428\nAuthor: Dan Smith <email address hidden>\nDate:   Thu Dec 8 12:25:37 2016 -0800\n\n    Cleanup after any failed libvirt spawn\n    \n    When we go to spawn a libvirt domain, we catch a few types of exceptions\n    and perform cleanup before failing the operation. For some reason, we\n    don't do this universally, which means that we leave things like network\n    devices laying around (from plug_vifs()). If a delete comes later, it\n    should clean those things up. However, if a subsequent failure prevents\n    that, and especially if we do a local delete at the API, we'll leak those\n    interfaces.\n    \n    As seen in at least one real-world situation, this can cause us to leak\n    interfaces until we have tens of thousands of them on the system, which\n    then causes secondary failures.\n    \n    Since we run the cleanup() routine for certain failures, it certainly\n    seems appropriate to run it always and not leave residue until a\n    successful delete is performed.\n    \n    Closes-Bug: #1648840\n    Change-Id: Iab5afdf1b5b8d107ea0e5895c24d50712e7dc7b1\n", 
            "date_created": "2016-12-12 06:51:04.846143+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Fix proposed to branch: stable/newton\nReview: https://review.openstack.org/409706", 
            "date_created": "2016-12-12 10:10:09.408977+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/409706\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=ee759f62b41a8afd7ac88b4e4a20d31d7959c12f\nSubmitter: Jenkins\nBranch:    stable/newton\n\ncommit ee759f62b41a8afd7ac88b4e4a20d31d7959c12f\nAuthor: Dan Smith <email address hidden>\nDate:   Thu Dec 8 12:25:37 2016 -0800\n\n    Cleanup after any failed libvirt spawn\n    \n    When we go to spawn a libvirt domain, we catch a few types of exceptions\n    and perform cleanup before failing the operation. For some reason, we\n    don't do this universally, which means that we leave things like network\n    devices laying around (from plug_vifs()). If a delete comes later, it\n    should clean those things up. However, if a subsequent failure prevents\n    that, and especially if we do a local delete at the API, we'll leak those\n    interfaces.\n    \n    As seen in at least one real-world situation, this can cause us to leak\n    interfaces until we have tens of thousands of them on the system, which\n    then causes secondary failures.\n    \n    Since we run the cleanup() routine for certain failures, it certainly\n    seems appropriate to run it always and not leave residue until a\n    successful delete is performed.\n    \n    Closes-Bug: #1648840\n    Change-Id: Iab5afdf1b5b8d107ea0e5895c24d50712e7dc7b1\n    (cherry picked from commit 5e7f765266e0b94807e019b645c8be89770e7428)\n", 
            "date_created": "2016-12-12 19:12:28.102252+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "This issue was fixed in the openstack/nova 15.0.0.0b2 development milestone.", 
            "date_created": "2016-12-15 17:34:10.195092+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "This issue was fixed in the openstack/nova 14.0.3 release.", 
            "date_created": "2016-12-19 12:01:55.168703+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ]
}
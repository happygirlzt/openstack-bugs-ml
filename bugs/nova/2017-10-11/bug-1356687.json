{
    "status": "Fix Released", 
    "last_updated": "2014-10-16 08:51:29.224312+00:00", 
    "description": "the new jsonutils hacking check produces a pep8 traceback because it returns a set (column offset and error text) instead of an iterable (as logical line checks, like this check, should).\n\ncommit 243879f5c51fc45f03491bcb78765945ddf76be8\nChange-Id: I86ed6cd3316dd4da5e1b10b36a3ddba3739316d3\n\n===== 8< ===== TEST CASE ===== 8< =====\n$ echo 'foo = json.dumps(bar)' >nova/foobar.py\n$ flake8 -vv nova/foobar.py\nlocal configuration: in /home/dev/Desktop/nova-test\n  ignore = E121,E122,E123,E124,E125,E126,E127,E128,E129,E131,E251,H405,H803,H904\n  exclude = .venv,.git,.tox,dist,doc,*openstack/common*,*lib/python*,*egg,build,tools\nchecking nova/foobar.py\nfoo = json.dumps(bar)\nTraceback (most recent call last):\n  File \"/home/dev/Desktop/nova-test/.venv/bin/flake8\", line 9, in <module>\n    load_entry_point('flake8==2.1.0', 'console_scripts', 'flake8')()\n  File \"/home/dev/Desktop/nova-test/.venv/local/lib/python2.7/site-packages/flake8/main.py\", line 32, in main\n    report = flake8_style.check_files()\n  File \"/home/dev/Desktop/nova-test/.venv/local/lib/python2.7/site-packages/pep8.py\", line 1672, in check_files\n    runner(path)\n  File \"/home/dev/Desktop/nova-test/.venv/local/lib/python2.7/site-packages/flake8/engine.py\", line 73, in input_file\n    return fchecker.check_all(expected=expected, line_offset=line_offset)\n  File \"/home/dev/Desktop/nova-test/.venv/local/lib/python2.7/site-packages/pep8.py\", line 1436, in check_all\n    self.check_logical()\n  File \"/home/dev/Desktop/nova-test/.venv/local/lib/python2.7/site-packages/pep8.py\", line 1338, in check_logical\n    for offset, text in self.run_check(check, argument_names) or ():\nTypeError: 'int' object is not iterable\n===== 8< ===== TEST CASE ===== 8< =====\n\n\ndiff --git a/nova/hacking/checks.py b/nova/hacking/checks.py\nindex a1dd614..7fe7412 100644\n--- a/nova/hacking/checks.py\n+++ b/nova/hacking/checks.py\n@@ -300,7 +300,7 @@ def use_jsonutils(logical_line, filename):\n         for f in json_funcs:\n             pos = logical_line.find('json.%s' % f)\n             if pos != -1:\n-                return (pos, msg % {'fun': f})\n+                yield (pos, msg % {'fun': f})\n \n \n def factory(register):\n===== 8< ===== PATCH ===== 8< =====\n\nit's late, so tomorrow, if there hasn't been any activity on this, then i'll submit a patch for review.", 
    "tags": [], 
    "importance": "Low", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1356687", 
    "owner": "https://api.launchpad.net/1.0/~ihar-hrachyshka", 
    "id": 1356687, 
    "index": 68, 
    "created": "2014-08-14 03:19:28.609648+00:00", 
    "title": "hacking check for jsonutils produces pep8 traceback", 
    "comments": [
        {
            "content": "the new jsonutils hacking check produces a pep8 traceback because it returns a set (column offset and error text) instead of an iterable (as logical line checks, like this check, should).\n\ncommit 243879f5c51fc45f03491bcb78765945ddf76be8\nChange-Id: I86ed6cd3316dd4da5e1b10b36a3ddba3739316d3\n\n===== 8< ===== TEST CASE ===== 8< =====\n$ echo 'foo = json.dumps(bar)' >nova/foobar.py\n$ flake8 -vv nova/foobar.py\nlocal configuration: in /home/dev/Desktop/nova-test\n  ignore = E121,E122,E123,E124,E125,E126,E127,E128,E129,E131,E251,H405,H803,H904\n  exclude = .venv,.git,.tox,dist,doc,*openstack/common*,*lib/python*,*egg,build,tools\nchecking nova/foobar.py\nfoo = json.dumps(bar)\nTraceback (most recent call last):\n  File \"/home/dev/Desktop/nova-test/.venv/bin/flake8\", line 9, in <module>\n    load_entry_point('flake8==2.1.0', 'console_scripts', 'flake8')()\n  File \"/home/dev/Desktop/nova-test/.venv/local/lib/python2.7/site-packages/flake8/main.py\", line 32, in main\n    report = flake8_style.check_files()\n  File \"/home/dev/Desktop/nova-test/.venv/local/lib/python2.7/site-packages/pep8.py\", line 1672, in check_files\n    runner(path)\n  File \"/home/dev/Desktop/nova-test/.venv/local/lib/python2.7/site-packages/flake8/engine.py\", line 73, in input_file\n    return fchecker.check_all(expected=expected, line_offset=line_offset)\n  File \"/home/dev/Desktop/nova-test/.venv/local/lib/python2.7/site-packages/pep8.py\", line 1436, in check_all\n    self.check_logical()\n  File \"/home/dev/Desktop/nova-test/.venv/local/lib/python2.7/site-packages/pep8.py\", line 1338, in check_logical\n    for offset, text in self.run_check(check, argument_names) or ():\nTypeError: 'int' object is not iterable\n===== 8< ===== TEST CASE ===== 8< =====\n\n\ndiff --git a/nova/hacking/checks.py b/nova/hacking/checks.py\nindex a1dd614..7fe7412 100644\n--- a/nova/hacking/checks.py\n+++ b/nova/hacking/checks.py\n@@ -300,7 +300,7 @@ def use_jsonutils(logical_line, filename):\n         for f in json_funcs:\n             pos = logical_line.find('json.%s' % f)\n             if pos != -1:\n-                return (pos, msg % {'fun': f})\n+                yield (pos, msg % {'fun': f})\n \n \n def factory(register):\n===== 8< ===== PATCH ===== 8< =====\n\nit's late, so tomorrow, if there hasn't been any activity on this, then i'll submit a patch for review.", 
            "date_created": "2014-08-14 03:19:28.609648+00:00", 
            "author": "https://api.launchpad.net/1.0/~coreywright"
        }, 
        {
            "content": "", 
            "date_created": "2014-08-14 03:19:28.609648+00:00", 
            "author": "https://api.launchpad.net/1.0/~coreywright"
        }, 
        {
            "content": "flake8 output after patch applied:\n\n===== 8< ===== OUTPUT ===== 8< =====\n$ echo 'foo = json.dumps(bar)' >nova/foobar.py\n$ flake8 nova/foobar.py\nnova/foobar.py:1:7: F821 undefined name 'json'\nnova/foobar.py:1:7: N323  jsonutils.dump must be used instead of json.dump\nnova/foobar.py:1:7: N323  jsonutils.dumps must be used instead of json.dumps\nnova/foobar.py:1:18: F821 undefined name 'bar'\n===== 8< ===== OUTPUT ===== 8< =====\n\nignore the F821 errors as they are a product of this merely being a single line example (ie i don't import the json module nor define the variable bar) and nothing more.", 
            "date_created": "2014-08-14 03:29:17.164341+00:00", 
            "author": "https://api.launchpad.net/1.0/~coreywright"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/114125", 
            "date_created": "2014-08-14 05:51:12.087455+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "I agree that it should return iterable, though I don't think we should yield. I would better return 1-item list, so that we don't get multiple violation messages, as in:\n\nnova/foobar.py:1:7: N323 jsonutils.dump must be used instead of json.dump\nnova/foobar.py:1:7: N323 jsonutils.dumps must be used instead of json.dumps\n", 
            "date_created": "2014-08-14 08:13:14.127011+00:00", 
            "author": "https://api.launchpad.net/1.0/~ihar-hrachyshka"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/114160", 
            "date_created": "2014-08-14 08:22:23.705429+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Change abandoned by Ihar Hrachyshka (<email address hidden>) on branch: master\nReview: https://review.openstack.org/114160\nReason: I've realized it's already on review as: https://review.openstack.org/#/c/114125", 
            "date_created": "2014-08-14 08:24:25.046124+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "@Ihar\n\nyeah, i'm an idiot (or maybe i shouldn't file bug reports late at night ;), but yes the fact that \"dumps\" is matched by both \"dump\" and \"dumps\" is unfortunate (and clearly visible in my example output, whihc i totally overlooked; wow, i really am an idiot / was tired last night).\n\n@dims\n\ni disagree with the importance (and i understand we might just have to agree to disagree and will hopefully be inconsequential because this should be resolved quickly) because of the unintuitiveness of the failure.  when i originally encountered this bug during a \"./run_test.sh --pep8\" i had no inclination of what failed and it took me longer than desired to figure out the problem was with use_jsonutils and not until i familiarized myself with flake8's verbosity command-line options.  if flake8 failed more gracefully, like \"plugin use_jsonutils failed on file nova/foobar.py, line 1\" then i would agree (because that's enough context that i could figure it out nearly immediately).", 
            "date_created": "2014-08-14 12:23:29.446485+00:00", 
            "author": "https://api.launchpad.net/1.0/~coreywright"
        }, 
        {
            "content": "@Corey, there is actually a way to yield and still avoid incorrect violation errors (see the patch proposed by Joe).", 
            "date_created": "2014-08-14 12:56:33.938398+00:00", 
            "author": "https://api.launchpad.net/1.0/~ihar-hrachyshka"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/114125\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=42d017c0d498aa4034032104f9cdd56300c866e0\nSubmitter: Jenkins\nBranch:    master\n\ncommit 42d017c0d498aa4034032104f9cdd56300c866e0\nAuthor: Joe Gordon <email address hidden>\nDate:   Wed Aug 13 22:34:39 2014 -0700\n\n    Fix hacking check for jsonutils\n    \n    Hacking checks with logical_lines should use yield not return.\n    \n    The jsonutils rule was added in:\n    I86ed6cd3316dd4da5e1b10b36a3ddba3739316d3\n    \n    Now that the function uses yield, it can trigger twice in dumps (dump\n    and dump), so look for a '(' at the afterwards. Don't display the '(' at\n    the end of the error message since its confusing to read.\n    \n    Change-Id: I277dba08fdd30734409eee36008cebda35886968\n    Closes-Bug: #1356687\n", 
            "date_created": "2014-08-14 20:45:06.628070+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ]
}
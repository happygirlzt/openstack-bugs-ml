{
    "status": "Fix Released", 
    "last_updated": "2015-04-30 09:15:11.444602+00:00", 
    "description": "Looking at this code:\n\nhttps://github.com/openstack/nova/blob/2014.2.b3/nova/db/sqlalchemy/api.py#L3343\n\nNotice the headroom variable is created based on usages and user_quotas:\n\n        headroom = dict((res, user_quotas[res] -\n                             (usages[res]['in_use'] + usages[res]['reserved']))\n                        for res in user_quotas.keys())\n\nbut the usages variable is based on whether or not project_quotas == user_quotas:\n\n        if project_quotas == user_quotas:\n            usages = project_usages\n        else:\n            usages = user_usages\n\nSo it appears that headroom could be incorrect if project_quotas != user_quotas.\n\nLooking at what uses headroom, the compute API uses this in the instance create and resize flows.  For resize it's just using headroom to plug into an error message for the TooManyInstances exception.\n\nIn the create flow (_check_num_instances_quota) it's used for a bit more advanced logic with recursion.\n\nWe should probably just remove the headroom calculation from quota_reserve and let the caller figure it out and what needs to be done with it.  It's also odd that this is happening in the DB API because it's dealing with instance quotas but maybe I'm not doing anything with instance quotas, maybe I'm doing things with security group or fixed IP quotas - so this code seems to be in the wrong place.  Maybe it's just conveniently placed here given the other data already in scope from the database.", 
    "tags": [
        "api", 
        "compute", 
        "db", 
        "quotas"
    ], 
    "importance": "Low", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1369696", 
    "owner": "https://api.launchpad.net/1.0/~liyingjun", 
    "id": 1369696, 
    "index": 112, 
    "created": "2014-09-15 18:33:28.178720+00:00", 
    "title": "quota_reserve headroom might be wrong if project_quotas != user_quotas", 
    "comments": [
        {
            "content": "Looking at this code:\n\nhttps://github.com/openstack/nova/blob/2014.2.b3/nova/db/sqlalchemy/api.py#L3343\n\nNotice the headroom variable is created based on usages and user_quotas:\n\n        headroom = dict((res, user_quotas[res] -\n                             (usages[res]['in_use'] + usages[res]['reserved']))\n                        for res in user_quotas.keys())\n\nbut the usages variable is based on whether or not project_quotas == user_quotas:\n\n        if project_quotas == user_quotas:\n            usages = project_usages\n        else:\n            usages = user_usages\n\nSo it appears that headroom could be incorrect if project_quotas != user_quotas.\n\nLooking at what uses headroom, the compute API uses this in the instance create and resize flows.  For resize it's just using headroom to plug into an error message for the TooManyInstances exception.\n\nIn the create flow (_check_num_instances_quota) it's used for a bit more advanced logic with recursion.\n\nWe should probably just remove the headroom calculation from quota_reserve and let the caller figure it out and what needs to be done with it.  It's also odd that this is happening in the DB API because it's dealing with instance quotas but maybe I'm not doing anything with instance quotas, maybe I'm doing things with security group or fixed IP quotas - so this code seems to be in the wrong place.  Maybe it's just conveniently placed here given the other data already in scope from the database.", 
            "date_created": "2014-09-15 18:33:28.178720+00:00", 
            "author": "https://api.launchpad.net/1.0/~mriedem"
        }, 
        {
            "content": "Agree with fixing this by removing the headroom calculation from the db layer. I don't like the hardcoding of things like 'cores' and so forth in there related to this.  I think returning current usage+reservations along with quotas is enough to let the caller to compute headroom itself on the resources it cares about, etc...", 
            "date_created": "2014-09-15 18:36:31.009762+00:00", 
            "author": "https://api.launchpad.net/1.0/~cbehrens"
        }, 
        {
            "content": "Maybe user_quotas is used since that's the only thing checked when calculating headroom for cores and ram (flavor info), but still seems like this is a hack and should be done on the calling side rather than in the DB API.", 
            "date_created": "2014-09-15 18:48:18.101491+00:00", 
            "author": "https://api.launchpad.net/1.0/~mriedem"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/121786", 
            "date_created": "2014-09-16 09:21:00.290134+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/121786\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=0045f7d50cad345c26ae02394ad57716b270d268\nSubmitter: Jenkins\nBranch:    master\n\ncommit 0045f7d50cad345c26ae02394ad57716b270d268\nAuthor: liyingjun <email address hidden>\nDate:   Sat Sep 6 09:10:31 2014 +0800\n\n    Removing the headroom calculation from db layer\n    \n    It's odd that this is happening in the DB API because it's dealing\n    with instance quotas but maybe I'm not doing anything with instance\n    quotas, maybe I'm doing things with security group or fixed IP quotas.\n    \n    This patch moves the headroom calculation from db layer to the\n    calling side.\n    \n    Change-Id: I8379471eea4ea7b114c2a235224f6fe61f8f981f\n    Closes-bug: #1369696\n", 
            "date_created": "2014-12-02 02:55:23.606594+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ]
}
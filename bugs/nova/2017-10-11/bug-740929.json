{
    "status": "Fix Released", 
    "last_updated": "2011-04-21 07:20:02.582589+00:00", 
    "description": "Spawn on XenAPI fails if the cidr_v6 field in the networks table is null.\n\nError caught with:\n--use_ipv6=False\n--network_manager=nova.network.FlatManager\n\nWhen the use_ipv6 flag is false NetworkManager.create_networks does not populate the cidr_v6 field:\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(FLAGS.use_ipv6):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cidr_v6 = \"%s/%s\" % (fixed_net_v6[start_v6],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0significant_bits_v6)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0net['cidr_v6'] = cidr_v6\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0project_net_v6 = IPy.IP(cidr_v6)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0net['gateway_v6'] = str(project_net_v6[1])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0net['netmask_v6'] = str(project_net_v6.prefixlen())\n\nHowever, when network info are fetched by _get_network_info (called by _spawn_with_disk), it is assumed cidr_v6 is always not null:\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def ip6_dict(ip6):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return {\n-->                \"ip\": utils.to_global_ipv6(network['cidr_v6'],   <--\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0instance['mac_address']),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"netmask\": network['netmask_v6'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"gateway\": network['gateway_v6'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"enabled\": \"1\"}\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0info = {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'label': network['label'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'gateway': network['gateway'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'mac': instance.mac_address,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'rxtx_cap': flavor['rxtx_cap'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'dns': [network['dns']],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'ips': [ip_dict(ip) for ip in network_IPs],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'ip6s': [ip6_dict(ip) for ip in network_IPs]}\n\nip6_dict should probably be called only if use_ipv6 is True\nFound on nova rev #851\n\nTraceback:\n3982) create_vbd /usr/lib/python2.6/site-packages/nova/virt/xenapi/vm_utils.py:198\n2011-03-23 07:56:08,228 ERROR nova.compute.manager [EUWSVGMBPVAO1YYW7P1Y root root] Instance '187' failed to spawn. Is virtualization enabled in the BIOS?\n(nova.compute.manager): TRACE: Traceback (most recent call last):\n(nova.compute.manager): TRACE:   File \"/usr/lib/python2.6/site-packages/nova/compute/manager.py\", line 225, in run_instance\n(nova.compute.manager): TRACE:     self.driver.spawn(instance_ref)\n(nova.compute.manager): TRACE:   File \"/usr/lib/python2.6/site-packages/nova/virt/xenapi_conn.py\", line 165, in spawn\n(nova.compute.manager): TRACE:     self._vmops.spawn(instance)\n(nova.compute.manager): TRACE:   File \"/usr/lib/python2.6/site-packages/nova/virt/xenapi/vmops.py\", line 86, in spawn\n(nova.compute.manager): TRACE:     self._spawn_with_disk(instance, vdi_uuid, network_info)\n(nova.compute.manager): TRACE:   File \"/usr/lib/python2.6/site-packages/nova/virt/xenapi/vmops.py\", line 135, in _spawn_with_disk\n(nova.compute.manager): TRACE:     network_info = self._get_network_info(instance)\n(nova.compute.manager): TRACE:   File \"/usr/lib/python2.6/site-packages/nova/virt/xenapi/vmops.py\", line 727, in _get_network_info\n(nova.compute.manager): TRACE:     'ip6s': [ip6_dict(ip) for ip in network_IPs]}\n(nova.compute.manager): TRACE:   File \"/usr/lib/python2.6/site-packages/nova/virt/xenapi/vmops.py\", line 715, in ip6_dict\n(nova.compute.manager): TRACE:     instance['mac_address']),\n(nova.compute.manager): TRACE:   File \"/usr/lib/python2.6/site-packages/nova/utils.py\", line 315, in to_global_ipv6\n(nova.compute.manager): TRACE:     maskIP = netaddr.IPNetwork(prefix).ip\n(nova.compute.manager): TRACE:   File \"/usr/lib/python2.6/site-packages/netaddr-0.7.5-py2.6.egg/netaddr/ip/__init__.py\", line 914, in __init__\n(nova.compute.manager): TRACE:     implicit_prefix, flags)\n(nova.compute.manager): TRACE:   File \"/usr/lib/python2.6/site-packages/netaddr-0.7.5-py2.6.egg/netaddr/ip/__init__.py\", line 806, in parse_ip_network\n(nova.compute.manager): TRACE:     raise TypeError('unexpected type %s for addr arg' % type(addr))\n(nova.compute.manager): TRACE: TypeError: unexpected type <type 'NoneType'> for addr arg\n(nova.compute.manager): TRACE:\n2011-03-23 07:56:08,546 INFO nova.virt.xenapi.vm_utils [-] (VM_UTILS) xenserver vm state -> |Halted|\n2011-03-23 07:56:08,547 INFO nova.virt.xenapi.vm_utils [-] (VM_UTILS) xenapi power_state -> |4|", 
    "tags": [], 
    "importance": "Undecided", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/740929", 
    "owner": "https://api.launchpad.net/1.0/~salvatore-orlando", 
    "id": 740929, 
    "index": 2077, 
    "created": "2011-03-23 12:06:27.876030+00:00", 
    "title": "Spawn error if cidr_v6 is null for network", 
    "comments": [
        {
            "content": "Spawn on XenAPI fails if the cidr_v6 field in the networks table is null. \n\nError caught with: \n--use_ipv6=False\n--network_manager=nova.network.FlatManager\n\nWhen a use_ipv6 is false NetworkManager.create_networks does not populate the cidr_v6 field:\n\n           if(FLAGS.use_ipv6):\n                cidr_v6 = \"%s/%s\" % (fixed_net_v6[start_v6],\n                                     significant_bits_v6)\n                net['cidr_v6'] = cidr_v6\n                project_net_v6 = IPy.IP(cidr_v6)\n                net['gateway_v6'] = str(project_net_v6[1])\n                net['netmask_v6'] = str(project_net_v6.prefixlen())\n\nHowever, when network info are fetched by _get_network_info (called by _spawn_with_disk), it is assumed cidr_v6 is always not null:\n            def ip6_dict(ip6):\n                return {\n-->                \"ip\": utils.to_global_ipv6(network['cidr_v6'],   <--\n                                               instance['mac_address']),\n                    \"netmask\": network['netmask_v6'],\n                    \"gateway\": network['gateway_v6'],\n                    \"enabled\": \"1\"}\n\n            info = {\n                'label': network['label'],\n                'gateway': network['gateway'],\n                'mac': instance.mac_address,\n                'rxtx_cap': flavor['rxtx_cap'],\n                'dns': [network['dns']],\n                'ips': [ip_dict(ip) for ip in network_IPs],\n                'ip6s': [ip6_dict(ip) for ip in network_IPs]}\n\nip6_dict should probably be called only if use_ipv6 == True \nFound on nova rev #851\n\nTraceback:\n3982) create_vbd /usr/lib/python2.6/site-packages/nova/virt/xenapi/vm_utils.py:198\n2011-03-23 07:56:08,228 ERROR nova.compute.manager [EUWSVGMBPVAO1YYW7P1Y root root] Instance '187' failed to spawn. Is virtualization enabled in the BIOS?\n(nova.compute.manager): TRACE: Traceback (most recent call last):\n(nova.compute.manager): TRACE:   File \"/usr/lib/python2.6/site-packages/nova/compute/manager.py\", line 225, in run_instance\n(nova.compute.manager): TRACE:     self.driver.spawn(instance_ref)\n(nova.compute.manager): TRACE:   File \"/usr/lib/python2.6/site-packages/nova/virt/xenapi_conn.py\", line 165, in spawn\n(nova.compute.manager): TRACE:     self._vmops.spawn(instance)\n(nova.compute.manager): TRACE:   File \"/usr/lib/python2.6/site-packages/nova/virt/xenapi/vmops.py\", line 86, in spawn\n(nova.compute.manager): TRACE:     self._spawn_with_disk(instance, vdi_uuid, network_info)\n(nova.compute.manager): TRACE:   File \"/usr/lib/python2.6/site-packages/nova/virt/xenapi/vmops.py\", line 135, in _spawn_with_disk\n(nova.compute.manager): TRACE:     network_info = self._get_network_info(instance)\n(nova.compute.manager): TRACE:   File \"/usr/lib/python2.6/site-packages/nova/virt/xenapi/vmops.py\", line 727, in _get_network_info\n(nova.compute.manager): TRACE:     'ip6s': [ip6_dict(ip) for ip in network_IPs]}\n(nova.compute.manager): TRACE:   File \"/usr/lib/python2.6/site-packages/nova/virt/xenapi/vmops.py\", line 715, in ip6_dict\n(nova.compute.manager): TRACE:     instance['mac_address']),\n(nova.compute.manager): TRACE:   File \"/usr/lib/python2.6/site-packages/nova/utils.py\", line 315, in to_global_ipv6\n(nova.compute.manager): TRACE:     maskIP = netaddr.IPNetwork(prefix).ip\n(nova.compute.manager): TRACE:   File \"/usr/lib/python2.6/site-packages/netaddr-0.7.5-py2.6.egg/netaddr/ip/__init__.py\", line 914, in __init__\n(nova.compute.manager): TRACE:     implicit_prefix, flags)\n(nova.compute.manager): TRACE:   File \"/usr/lib/python2.6/site-packages/netaddr-0.7.5-py2.6.egg/netaddr/ip/__init__.py\", line 806, in parse_ip_network\n(nova.compute.manager): TRACE:     raise TypeError('unexpected type %s for addr arg' % type(addr))\n(nova.compute.manager): TRACE: TypeError: unexpected type <type 'NoneType'> for addr arg\n(nova.compute.manager): TRACE: \n2011-03-23 07:56:08,546 INFO nova.virt.xenapi.vm_utils [-] (VM_UTILS) xenserver vm state -> |Halted|\n2011-03-23 07:56:08,547 INFO nova.virt.xenapi.vm_utils [-] (VM_UTILS) xenapi power_state -> |4|", 
            "date_created": "2011-03-23 12:06:27.876030+00:00", 
            "author": "https://api.launchpad.net/1.0/~salvatore-orlando"
        }
    ]
}
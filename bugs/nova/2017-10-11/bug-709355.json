{
    "status": "Fix Released", 
    "last_updated": "2011-04-15 08:36:16.509223+00:00", 
    "description": "Using 2011.1~bzr638-\n\nWhen using the default nova.image.s3.S3ImageService I am unable to create an image using the Openstack API. The following exception is reported in nova-api.log:\n\n\n2011-01-28 15:53:07,207 ERROR nova.api.openstack [-] Caught error: kernel_id property not found for image ami-tty\n(nova.api.openstack): TRACE: Traceback (most recent call last):\n(nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/nova/api/openstack/__init__.py\", line 52, in __call__\n(nova.api.openstack): TRACE:     return req.get_response(self.application)\n(nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/request.py\", line 919, in get_response\n(nova.api.openstack): TRACE:     application, catch_exc_info=False)\n(nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/request.py\", line 887, in call_application\n(nova.api.openstack): TRACE:     app_iter = application(self.environ, start_response)\n(nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 159, in __call__\n(nova.api.openstack): TRACE:     return resp(environ, start_response)\n(nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 159, in __call__\n(nova.api.openstack): TRACE:     return resp(environ, start_response)\n(nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 159, in __call__\n(nova.api.openstack): TRACE:     return resp(environ, start_response)\n(nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/routes/middleware.py\", line 131, in __call__\n(nova.api.openstack): TRACE:     response = self.app(environ, start_response)\n(nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 159, in __call__\n(nova.api.openstack): TRACE:     return resp(environ, start_response)\n(nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 147, in __call__\n(nova.api.openstack): TRACE:     resp = self.call_func(req, *args, **self.kwargs)\n(nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 208, in call_func\n\nUsing the same setup I am able to create an image with the EC2 API via eucatools.", 
    "tags": [], 
    "importance": "Medium", 
    "heat": 14, 
    "link": "https://bugs.launchpad.net/nova/+bug/709355", 
    "owner": "https://api.launchpad.net/1.0/~dan-prince", 
    "id": 709355, 
    "index": 2264, 
    "created": "2011-01-28 16:53:28.942974+00:00", 
    "title": "'kernel_id property not found' Openstack API w/ S3ImageService ", 
    "comments": [
        {
            "content": "Using 2011.1~bzr638-\n\nWhen using the default nova.image.s3.S3ImageService I am unable to create an image using the Openstack API. The following exception is reported in nova-api.log:\n\n\n2011-01-28 15:53:07,207 ERROR nova.api.openstack [-] Caught error: kernel_id property not found for image ami-tty\n(nova.api.openstack): TRACE: Traceback (most recent call last):\n(nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/nova/api/openstack/__init__.py\", line 52, in __call__\n(nova.api.openstack): TRACE:     return req.get_response(self.application)\n(nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/request.py\", line 919, in get_response\n(nova.api.openstack): TRACE:     application, catch_exc_info=False)\n(nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/request.py\", line 887, in call_application\n(nova.api.openstack): TRACE:     app_iter = application(self.environ, start_response)\n(nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 159, in __call__\n(nova.api.openstack): TRACE:     return resp(environ, start_response)\n(nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 159, in __call__\n(nova.api.openstack): TRACE:     return resp(environ, start_response)\n(nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 159, in __call__\n(nova.api.openstack): TRACE:     return resp(environ, start_response)\n(nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/routes/middleware.py\", line 131, in __call__\n(nova.api.openstack): TRACE:     response = self.app(environ, start_response)\n(nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 159, in __call__\n(nova.api.openstack): TRACE:     return resp(environ, start_response)\n(nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 147, in __call__\n(nova.api.openstack): TRACE:     resp = self.call_func(req, *args, **self.kwargs)\n(nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 208, in call_func\n\nUsing the same setup I am able to create an image with the EC2 API via eucatools.", 
            "date_created": "2011-01-28 16:53:28.942974+00:00", 
            "author": "https://api.launchpad.net/1.0/~dan-prince"
        }, 
        {
            "content": "I've push if fix for this issue here:\n\n  lp:~dan-prince/nova/openstack_api_709355\n\nIt appears that the default S3 image store does not require kernel_id or ramdisk_id to be set. This patch allows that and makes the openstack API behave like the EC2 API.", 
            "date_created": "2011-01-28 16:59:31.975092+00:00", 
            "author": "https://api.launchpad.net/1.0/~dan-prince"
        }, 
        {
            "content": "Oops.\nWRong project.", 
            "date_created": "2011-01-28 17:00:11.087257+00:00", 
            "author": "https://api.launchpad.net/1.0/~dan-prince"
        }, 
        {
            "content": "Please delete this and I'll repost in nova.", 
            "date_created": "2011-01-28 17:01:01.485785+00:00", 
            "author": "https://api.launchpad.net/1.0/~dan-prince"
        }, 
        {
            "content": "Hi Dan! Project changed :)\n\nBut, I don't see why the openstack API should be following the path of the EC2 API and eucatools? Could you explain why this is necessary?\n\nAFAIK, for the OpenStack API, we're trying to get away from the awkward euca-bundle-image API that requires setting up kernel, ramdisk, and machine images separately...\n\nThanks!\njay", 
            "date_created": "2011-01-28 17:15:37.654333+00:00", 
            "author": "https://api.launchpad.net/1.0/~jaypipes"
        }, 
        {
            "content": "My goal here was to create a new server via a POST request to the Openstack API using a default installation (single node). Since the default image store uses the S3 Image store I got the above exception.\n\nAren't we trying to support a setup where tools can use both the Openstack and EC2 API's at the same time? In my case it just seemed odd that the EC2 API worked find (when using euca-tools) but the Openstack API required the extra parameters to be defined in the image store.\n\nIs there some other way I can work around this?", 
            "date_created": "2011-01-28 17:29:49.347019+00:00", 
            "author": "https://api.launchpad.net/1.0/~dan-prince"
        }, 
        {
            "content": "Hi!\n\n\"Aren't we trying to support a setup where tools can use both the Openstack and EC2 API's at the same time?\"\n\neucatools don't work with the OpenStack API. Never have and never will :) The cloudservers programs work with the OpenStack API.\n\nIf you are running XenServer, I believe you can set the Nova flag --xenapi_image_service to the nova.image.s3, or something like that, to get XenServer to use nova-objectstore (which speaks the S3 API) as an image service instead of Glance...\n\nI'm going to try to grab Rick Harris to see if he can elaborate with better details than my limited knowledge can offer.", 
            "date_created": "2011-01-28 17:40:19.683645+00:00", 
            "author": "https://api.launchpad.net/1.0/~jaypipes"
        }, 
        {
            "content": "This seems resonable,  OS_API should work by default.  Your patch removes i18n though, you'll need to switch it back to using _() and dict based replacement strings.  It should probably also be more specific, meaning other missing values should probably still error.\n\n\nOn Jan 28, 2011, at 9:29 AM, Dan Prince wrote:\n\n> My goal here was to create a new server via a POST request to the\n> Openstack API using a default installation (single node). Since the\n> default image store uses the S3 Image store I got the above exception.\n> \n> Aren't we trying to support a setup where tools can use both the\n> Openstack and EC2 API's at the same time? In my case it just seemed odd\n> that the EC2 API worked find (when using euca-tools) but the Openstack\n> API required the extra parameters to be defined in the image store.\n> \n> Is there some other way I can work around this?\n> \n> -- \n> You received this bug notification because you are a member of Nova Bug\n> Team, which is subscribed to OpenStack Compute (nova).\n> https://bugs.launchpad.net/bugs/709355\n> \n> Title:\n>  \"kernel_id property not found\" Openstack API w/ S3ImageService\n> \n> Status in OpenStack Compute (Nova):\n>  New\n> \n> Bug description:\n>  Using 2011.1~bzr638-\n> \n>  When using the default nova.image.s3.S3ImageService I am unable to\n>  create an image using the Openstack API. The following exception is\n>  reported in nova-api.log:\n> \n> \n>  2011-01-28 15:53:07,207 ERROR nova.api.openstack [-] Caught error: kernel_id property not found for image ami-tty\n>  (nova.api.openstack): TRACE: Traceback (most recent call last):\n>  (nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/nova/api/openstack/__init__.py\", line 52, in __call__\n>  (nova.api.openstack): TRACE:     return req.get_response(self.application)\n>  (nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/request.py\", line 919, in get_response\n>  (nova.api.openstack): TRACE:     application, catch_exc_info=False)\n>  (nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/request.py\", line 887, in call_application\n>  (nova.api.openstack): TRACE:     app_iter = application(self.environ, start_response)\n>  (nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 159, in __call__\n>  (nova.api.openstack): TRACE:     return resp(environ, start_response)\n>  (nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 159, in __call__\n>  (nova.api.openstack): TRACE:     return resp(environ, start_response)\n>  (nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 159, in __call__\n>  (nova.api.openstack): TRACE:     return resp(environ, start_response)\n>  (nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/routes/middleware.py\", line 131, in __call__\n>  (nova.api.openstack): TRACE:     response = self.app(environ, start_response)\n>  (nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 159, in __call__\n>  (nova.api.openstack): TRACE:     return resp(environ, start_response)\n>  (nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 147, in __call__\n>  (nova.api.openstack): TRACE:     resp = self.call_func(req, *args, **self.kwargs)\n>  (nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 208, in call_func\n> \n>  Using the same setup I am able to create an image with the EC2 API via\n>  eucatools.\n> \n> \n\n", 
            "date_created": "2011-01-28 17:44:18+00:00", 
            "author": "https://api.launchpad.net/1.0/~vishvananda"
        }, 
        {
            "content": "Sure. That would be great.\n\nTo be clear I wasn't trying to use euca-tools with the Openstack API though. I'm actually using the Ruby Openstack binding with the following code:\n\nrequire 'openstackcompute'\n\nUSERNAME=ENV['CLOUD_SERVERS_USERNAME']\nAPI_KEY=ENV['CLOUD_SERVERS_API_KEY']\nAPI_URL=ENV['CLOUD_SERVERS_URL']\ncs = OpenStackCompute::Connection.new(:username => USERNAME, :api_key => API_KEY, :api_url => API_URL)\ncs.create_server(:name => \"Dan\", :imageId => 9076875775488977738, :flavorId => 1)\n\n--\n\nMy nova.conf is below if your interested:\n\n--dhcpbridge_flagfile=/etc/nova/nova.conf\n--dhcpbridge=/usr/bin/nova-dhcpbridge\n--logdir=/var/log/nova\n--state_path=/var/lib/nova\n--verbose\n--my_ip=172.19.0.3\n--public_interface=eth1\n--vlan_interface=eth1\n--iscsi_ip_prefix=172.19.0\n--sql_connection=mysql://nova:zzzz@172.19.0.3/nova\n--libvirt_type=qemu\n--rabbit_host=172.19.0.3\n--rabbit_port=5672\n--rabbit_userid=nova\n--rabbit_password=eRmSm0Ss2eZhJrmRjrpz\n--rabbit_virtual_host=/nova\n--network_manager=nova.network.manager.FlatManager\n--default_project=admin\n\n---\n\nSo using the Ruby Openstack binding with the Openstack API I hit this exception with my setup.\n\nI only used euca-tools because I wanted to verify provisioning with my setup was in fact working.", 
            "date_created": "2011-01-28 17:54:40.854315+00:00", 
            "author": "https://api.launchpad.net/1.0/~dan-prince"
        }, 
        {
            "content": "I don't believe he is trying to use eucatools.  He's trying to create an image via the os api using nova.image.s3.S3ImageService (which is the default).  There is some oddness in the traceback though, it appears that ami-tty doesn't have a kernel_id and ramdisk_id specified, although I believe it should have one (ari_tty, aki_tty).\n\nVish\n\nOn Jan 28, 2011, at 9:40 AM, Jay Pipes wrote:\n\n> Hi!\n> \n> \"Aren't we trying to support a setup where tools can use both the\n> Openstack and EC2 API's at the same time?\"\n> \n> eucatools don't work with the OpenStack API. Never have and never will\n> :) The cloudservers programs work with the OpenStack API.\n> \n> If you are running XenServer, I believe you can set the Nova flag\n> --xenapi_image_service to the nova.image.s3, or something like that, to\n> get XenServer to use nova-objectstore (which speaks the S3 API) as an\n> image service instead of Glance...\n> \n> I'm going to try to grab Rick Harris to see if he can elaborate with\n> better details than my limited knowledge can offer.\n> \n> -- \n> You received this bug notification because you are a member of Nova Bug\n> Team, which is subscribed to OpenStack Compute (nova).\n> https://bugs.launchpad.net/bugs/709355\n> \n> Title:\n>  \"kernel_id property not found\" Openstack API w/ S3ImageService\n> \n> Status in OpenStack Compute (Nova):\n>  New\n> \n> Bug description:\n>  Using 2011.1~bzr638-\n> \n>  When using the default nova.image.s3.S3ImageService I am unable to\n>  create an image using the Openstack API. The following exception is\n>  reported in nova-api.log:\n> \n> \n>  2011-01-28 15:53:07,207 ERROR nova.api.openstack [-] Caught error: kernel_id property not found for image ami-tty\n>  (nova.api.openstack): TRACE: Traceback (most recent call last):\n>  (nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/nova/api/openstack/__init__.py\", line 52, in __call__\n>  (nova.api.openstack): TRACE:     return req.get_response(self.application)\n>  (nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/request.py\", line 919, in get_response\n>  (nova.api.openstack): TRACE:     application, catch_exc_info=False)\n>  (nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/request.py\", line 887, in call_application\n>  (nova.api.openstack): TRACE:     app_iter = application(self.environ, start_response)\n>  (nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 159, in __call__\n>  (nova.api.openstack): TRACE:     return resp(environ, start_response)\n>  (nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 159, in __call__\n>  (nova.api.openstack): TRACE:     return resp(environ, start_response)\n>  (nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 159, in __call__\n>  (nova.api.openstack): TRACE:     return resp(environ, start_response)\n>  (nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/routes/middleware.py\", line 131, in __call__\n>  (nova.api.openstack): TRACE:     response = self.app(environ, start_response)\n>  (nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 159, in __call__\n>  (nova.api.openstack): TRACE:     return resp(environ, start_response)\n>  (nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 147, in __call__\n>  (nova.api.openstack): TRACE:     resp = self.call_func(req, *args, **self.kwargs)\n>  (nova.api.openstack): TRACE:   File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 208, in call_func\n> \n>  Using the same setup I am able to create an image with the EC2 API via\n>  eucatools.\n> \n> \n\n", 
            "date_created": "2011-01-28 17:54:59+00:00", 
            "author": "https://api.launchpad.net/1.0/~vishvananda"
        }, 
        {
            "content": "Ah, sorry, I was misunderstanding. Sorry, Dan.\n\n/me didn't even know there was a Ruby OpenStack binding...\n\nI'll ping back on this later...heading to airport right now.\n\n-jay\n\nOn Fri, Jan 28, 2011 at 11:54 AM, Vish Ishaya <email address hidden> wrote:\n> I don't believe he is trying to use eucatools. \u00a0He's trying to create an\n> image via the os api using nova.image.s3.S3ImageService (which is the\n> default). \u00a0There is some oddness in the traceback though, it appears\n> that ami-tty doesn't have a kernel_id and ramdisk_id specified, although\n> I believe it should have one (ari_tty, aki_tty).\n>\n> Vish\n>\n> On Jan 28, 2011, at 9:40 AM, Jay Pipes wrote:\n>\n>> Hi!\n>>\n>> \"Aren't we trying to support a setup where tools can use both the\n>> Openstack and EC2 API's at the same time?\"\n>>\n>> eucatools don't work with the OpenStack API. Never have and never will\n>> :) The cloudservers programs work with the OpenStack API.\n>>\n>> If you are running XenServer, I believe you can set the Nova flag\n>> --xenapi_image_service to the nova.image.s3, or something like that, to\n>> get XenServer to use nova-objectstore (which speaks the S3 API) as an\n>> image service instead of Glance...\n>>\n>> I'm going to try to grab Rick Harris to see if he can elaborate with\n>> better details than my limited knowledge can offer.\n>>\n>> --\n>> You received this bug notification because you are a member of Nova Bug\n>> Team, which is subscribed to OpenStack Compute (nova).\n>> https://bugs.launchpad.net/bugs/709355\n>>\n>> Title:\n>> \u00a0\"kernel_id property not found\" Openstack API w/ S3ImageService\n>>\n>> Status in OpenStack Compute (Nova):\n>> \u00a0New\n>>\n>> Bug description:\n>> \u00a0Using 2011.1~bzr638-\n>>\n>> \u00a0When using the default nova.image.s3.S3ImageService I am unable to\n>> \u00a0create an image using the Openstack API. The following exception is\n>> \u00a0reported in nova-api.log:\n>>\n>>\n>> \u00a02011-01-28 15:53:07,207 ERROR nova.api.openstack [-] Caught error: kernel_id property not found for image ami-tty\n>> \u00a0(nova.api.openstack): TRACE: Traceback (most recent call last):\n>> \u00a0(nova.api.openstack): TRACE: \u00a0 File \"/usr/lib/pymodules/python2.6/nova/api/openstack/__init__.py\", line 52, in __call__\n>> \u00a0(nova.api.openstack): TRACE: \u00a0 \u00a0 return req.get_response(self.application)\n>> \u00a0(nova.api.openstack): TRACE: \u00a0 File \"/usr/lib/pymodules/python2.6/webob/request.py\", line 919, in get_response\n>> \u00a0(nova.api.openstack): TRACE: \u00a0 \u00a0 application, catch_exc_info=False)\n>> \u00a0(nova.api.openstack): TRACE: \u00a0 File \"/usr/lib/pymodules/python2.6/webob/request.py\", line 887, in call_application\n>> \u00a0(nova.api.openstack): TRACE: \u00a0 \u00a0 app_iter = application(self.environ, start_response)\n>> \u00a0(nova.api.openstack): TRACE: \u00a0 File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 159, in __call__\n>> \u00a0(nova.api.openstack): TRACE: \u00a0 \u00a0 return resp(environ, start_response)\n>> \u00a0(nova.api.openstack): TRACE: \u00a0 File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 159, in __call__\n>> \u00a0(nova.api.openstack): TRACE: \u00a0 \u00a0 return resp(environ, start_response)\n>> \u00a0(nova.api.openstack): TRACE: \u00a0 File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 159, in __call__\n>> \u00a0(nova.api.openstack): TRACE: \u00a0 \u00a0 return resp(environ, start_response)\n>> \u00a0(nova.api.openstack): TRACE: \u00a0 File \"/usr/lib/pymodules/python2.6/routes/middleware.py\", line 131, in __call__\n>> \u00a0(nova.api.openstack): TRACE: \u00a0 \u00a0 response = self.app(environ, start_response)\n>> \u00a0(nova.api.openstack): TRACE: \u00a0 File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 159, in __call__\n>> \u00a0(nova.api.openstack): TRACE: \u00a0 \u00a0 return resp(environ, start_response)\n>> \u00a0(nova.api.openstack): TRACE: \u00a0 File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 147, in __call__\n>> \u00a0(nova.api.openstack): TRACE: \u00a0 \u00a0 resp = self.call_func(req, *args, **self.kwargs)\n>> \u00a0(nova.api.openstack): TRACE: \u00a0 File \"/usr/lib/pymodules/python2.6/webob/dec.py\", line 208, in call_func\n>>\n>> \u00a0Using the same setup I am able to create an image with the EC2 API via\n>> \u00a0eucatools.\n>>\n>>\n>\n> --\n> You received this bug notification because you are a member of Nova Bug\n> Team, which is subscribed to OpenStack Compute (nova).\n> https://bugs.launchpad.net/bugs/709355\n>\n> Title:\n> \u00a0\"kernel_id property not found\" Openstack API w/ S3ImageService\n>\n", 
            "date_created": "2011-01-28 18:14:02+00:00", 
            "author": "https://api.launchpad.net/1.0/~jaypipes"
        }, 
        {
            "content": "Okay. I pushed to openstack_api_709355 again and I think I fixed the i18n issue.", 
            "date_created": "2011-01-28 18:25:04.849141+00:00", 
            "author": "https://api.launchpad.net/1.0/~dan-prince"
        }, 
        {
            "content": "This is not really the recommended combination. We can try to fix it and if we come up with a really contained fix it might be considered for Bexar. Otherwise I wouldn't take the risk and just document that you should use Glance with the OS API.", 
            "date_created": "2011-01-31 07:53:10.410335+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "Sure. Thanks Thierry. I'm looking into a solution to this now (any comments/help appreciated!)\n\nI totally understand that the Openstack API will work best with Glance. Glance however isn't currently the default image store for the project so it would seem that we would also want to support other image stores as well. My use case here was simple to be able to test Openstack API ruby bindings with a default nova installation.\n\nMy initial openstack_api_709355 branch fix was to change a private function called 'lookup' to log a DEBUG error instead of raising an exception. This function is only used to lookup 'kernel_id' and 'ramdisk_id' and is all contained in the _get_kernel_ramdisk_from_image so it shouldn't affect anything else.\n\nOn second look a better solution might be to conditionally handle the different image stores. I'm not familar with Glance yet (looking at that now) but it appears the image objects from Glance and S3 are somewhat different:\n\naccording to the comment on _get_kernel_ramdisk_from_image Glance uses:\n\n  image[''image_properties']['kernel_id']\n\nwhere the S3 image store uses the following:\n\n  image[''kernelId']\n\n--\n\nI'm not in a rush to have this for Bexar BTW. This issue however would appear to prevent anyone from using the Openstack API with anything but Glance.\n\nDan", 
            "date_created": "2011-01-31 16:37:27.164129+00:00", 
            "author": "https://api.launchpad.net/1.0/~dan-prince"
        }, 
        {
            "content": "> This issue however would appear to prevent anyone from using the Openstack API with anything but Glance.\n\nYou can still use the Openstack API to start instances successfully stored in S3ImageService. The OpenstackAPI -> S3ImageService path is mostly untested, so I fear as soon as this bug is fixed we'll hit another one. Better have it completely tested and supported in Cactus that risking a regression three days from release. You can still propose a very elegant patch that convinces me otherwise, though :)", 
            "date_created": "2011-01-31 16:58:49.494644+00:00", 
            "author": "https://api.launchpad.net/1.0/~ttx"
        }, 
        {
            "content": "Okay. It appears that GlanceImageService and S3ImageService return image dictionaries that have different keys. The following patch is an unclean solution that allows me to use both S3ImageService and GlanceImageService via the Openstack API.\n\n---\n\n         def lookup(param):\n-            _image_id = image_id\n-            try:\n+\n+           def _underscore_to_camelcase(str):\n+               x=''.join([x[:1].upper() + x[1:] for x in str.split('_')])\n+               y=x[0].lower()+x[1:]\n+               return y\n+\n+           _image_id = image_id\n+           try:\n                 return image['properties'][param]\n-            except KeyError:\n-                LOG.debug(_(\"Param %s not defined for image_id %s.\"), param, image_id)\n+           except KeyError:\n+                try:\n+                    return image[_underscore_to_camelcase(param)]\n+                except:\n+                    raise exception.NotFound(_(\"%(param)s property not found for image %(_image_id)s\") % locals())\n\n----\n\nThe idea here is to try what Glance is looking for first and then try the S3 key. If both fail the exception is thrown.\n\nLike I said above this works but seems to be kind of dirty. Are there any plans on making the image services standardize on an interface for image dictionaries? Should we make Glance match S3 or vice versa?", 
            "date_created": "2011-02-07 20:11:00.841088+00:00", 
            "author": "https://api.launchpad.net/1.0/~dan-prince"
        }, 
        {
            "content": "15:34 < dprince> jaypipes: So my question is really about whether there is a \n                 way to standardize the image service dictionaries so that both \n                 API controllers work cleanly?\n15:34 < jaypipes> dprince: yes, there is :) just not sure whether devcamcar \n                  already coded up something or whether to use your patch :)\n15:38 < jaypipes> dprince: gonna have a quick call with sirp_ and then I'll \n                  figure it out :)\n\n\n---\n\nI'll hold on working this out until I hear back more. I'm happy to work up a cleaner solution but I'd like some guidance first on whether we want to change Glance or S3 to match the interface we choose.\n", 
            "date_created": "2011-02-07 21:27:07.498381+00:00", 
            "author": "https://api.launchpad.net/1.0/~dan-prince"
        }, 
        {
            "content": "Okay. After a some commits from others (thanks Devin) I've worked up what I think is a good solution to this issue. This includes:\n\n-Make S3 and Glance adhere to a common interface.\n-Remove S3 image object mapping code from the Openstack images API.\n-Remove custom kernel_id and ramdisk_id from the Openstack images API (this is\n done via the compute API). Per ticket 709355 (this ticket).\n-Updated the base image service docs.\n\nSubmitting the merge request now....", 
            "date_created": "2011-02-24 06:13:04.803542+00:00", 
            "author": "https://api.launchpad.net/1.0/~dan-prince"
        }, 
        {
            "content": "This bug was arguably fixed by Ricks commit in 750. I think Justin also worked around it by returning None, None in a similar revision as well.\n\nMy proposal for this fix was to promote 'kernel_id' and 'ramdisk_id' to top level image object attributes and then let the compute API handle it (which it already does). Lots of stuff changing within the image services for now so I'll save my changes for later.\n\nMarking this as fixed and moving on.", 
            "date_created": "2011-03-09 02:27:38.303834+00:00", 
            "author": "https://api.launchpad.net/1.0/~dan-prince"
        }
    ]
}
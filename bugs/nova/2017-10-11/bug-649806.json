{
    "status": "Fix Released", 
    "last_updated": "2010-11-02 15:52:20.435111+00:00", 
    "description": "It seems that both our use of Redis and Carrot (or py-amqplib) are suffering somewhat under Eventlet. This bug is about Carrot/py-amqplib:\n\nI created a simple script that would start an instance, and keep trying to connect to its ssh port for a while, and once succesful, it would terminate the instance again and start over. I ran this script in four terminals at the same time. Quite soon, I would start getting errors like this from euca-run-instances:\n\nRuntimeError: Second simultaneous read on fileno 17 detected.  Unless you really know what you're doing, make sure that only one greenthread can read any particular socket.  Consider using a pools.Pool. If you do know what you're doing and want to disable this error, call eventlet.debug.hub_multiple_reader_prevention(False)\n\nRunning the api server under strace revealed that that file descriptor in question is the connection to the AMQP server. Since I don't know what I'm doing, I didn't call eventlet.debug.hub_multiple_reader_prevention(FaIse).\n\nAgain, if I stop reusing connections (like in the Redis bug) things work fine, apparantly.", 
    "tags": [], 
    "importance": "High", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/649806", 
    "owner": "None", 
    "id": 649806, 
    "index": 301, 
    "created": "2010-09-28 13:19:37.878965+00:00", 
    "title": "AMQP concurrency problem in API server", 
    "comments": [
        {
            "content": "It seems that both our use of Redis and Carrot (or py-amqplib) are suffering somewhat under Eventlet. This bug is about Carrot/py-amqplib:\n\nI created a simple script that would start an instance, and keep trying to connect to its ssh port for a while, and once succesful, it would terminate the instance again and start over. I ran this script in four terminals at the same time. Quite soon, I would start getting errors like this from euca-run-instances:\n\nRuntimeError: Second simultaneous read on fileno 17 detected.  Unless you really know what you're doing, make sure that only one greenthread can read any particular socket.  Consider using a pools.Pool. If you do know what you're doing and want to disable this error, call eventlet.debug.hub_multiple_reader_prevention(False)\n\nRunning the api server under strace revealed that that file descriptor in question is the connection to the AMQP server. Since I don't know what I'm doing, I didn't call eventlet.debug.hub_multiple_reader_prevention(FaIse).\n\nAgain, if I stop reusing connections (like in the Redis bug) things work fine, apparantly.", 
            "date_created": "2010-09-28 13:19:37.878965+00:00", 
            "author": "https://api.launchpad.net/1.0/~soren"
        }, 
        {
            "content": "Yeah, a couple have these have already been fixed. I changed the consumer code to actually wait rather than busy poll every 100ms, which means each consumer needs to have it's own connection. Since these are short lived we can keep a pool of cached connections to reuse so we don't have the connection setup cost on every use. We can add a pool anywhere we are currently using singleton connections.", 
            "date_created": "2010-09-28 16:55:28.397017+00:00", 
            "author": "https://api.launchpad.net/1.0/~eday"
        }, 
        {
            "content": "This particular issue was resolved before Austin. The rpc Connection class was modified to allow multiple connections to be created when needed (usually for temporary return queues). Marking this as fix released.", 
            "date_created": "2010-11-02 15:52:05.634516+00:00", 
            "author": "https://api.launchpad.net/1.0/~eday"
        }
    ]
}
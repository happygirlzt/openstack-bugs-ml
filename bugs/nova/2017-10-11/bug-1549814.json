{
    "status": "Opinion", 
    "last_updated": "2016-08-01 13:14:12.566404+00:00", 
    "description": "The caching backend for memcached/dogpile stores whole Python objects by creating a deep copy. Metadata is cached by storing the metadata Python object, and therefore the whole object tree underneath, including the \"instance\" attribute.  Whenever the metadata is fetched, it also fetches the old version of instance with it, and works on it. This has several implications, like for example lazy fetched fields of the \"instance\" object are never cached, if they are not pre-fetched before caching. Also it might implicate security issues.\n\nIt would be probably a better approach to actually cache the DB query results only, and not the whole populated \"living\" object.", 
    "tags": [], 
    "importance": "High", 
    "heat": 12, 
    "link": "https://bugs.launchpad.net/nova/+bug/1549814", 
    "owner": "None", 
    "id": 1549814, 
    "index": 1886, 
    "created": "2016-02-25 14:08:51.404757+00:00", 
    "title": "Metadata caching is fundamentally broken", 
    "comments": [
        {
            "content": "The caching backend for memcached /dogpile stores whole Python objects by creating a deep copy. Metadata is cached by storing the metadata Python object, and therefore the whole object tree underneath, including the \"instance\" attribute.  Whenever the metadata is fetched, it also fetches the old version of instance with it, and works on it. This has several implications, like for example lazy fetched fields of the \"instance\" object are never cached, if they are not pre-fetched before caching. Also it might implicate security issues.\n\nIt would be probably a better approach to actually cache the DB query results only, and not the whole populated \"living\" object.", 
            "date_created": "2016-02-25 14:08:51.404757+00:00", 
            "author": "https://api.launchpad.net/1.0/~ansiwen"
        }, 
        {
            "content": "Related fix proposed to branch: master\nReview: https://review.openstack.org/285530", 
            "date_created": "2016-02-26 20:19:23.227652+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Related fix proposed to branch: master\nReview: https://review.openstack.org/285562", 
            "date_created": "2016-02-26 21:56:25.671621+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "@Sven Anderson:\n\nIt seems you are actively working on that [1], thanks for your efforts.\nI'm switching the status to \"In Progress\" and set you as assignee to \nsignal that. \nI don't yet now which prio this should have (I tend to \"high\"), but \nlet me check that with other folks in #openstack-nova.\n\nReferences:\n[1] https://review.openstack.org/#/q/topic:bug/1549814", 
            "date_created": "2016-03-01 10:21:58.532122+00:00", 
            "author": "https://api.launchpad.net/1.0/~mzoeller"
        }, 
        {
            "content": "This bug is suspicious, so I add the \"mitaka-rc-potential\" tag for potential RC blockers.", 
            "date_created": "2016-03-01 10:28:07.417720+00:00", 
            "author": "https://api.launchpad.net/1.0/~mzoeller"
        }, 
        {
            "content": "Change abandoned by Michael Still (<email address hidden>) on branch: master\nReview: https://review.openstack.org/285562\nReason: This code hasn't been updated in a long time, and is in merge conflict. I am going to abandon this review, but feel free to restore it if you're still working on this.", 
            "date_created": "2016-07-19 20:56:18.641331+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Change abandoned by Michael Still (<email address hidden>) on branch: master\nReview: https://review.openstack.org/285530\nReason: This code hasn't been updated in a long time, and is in merge conflict. I am going to abandon this review, but feel free to restore it if you're still working on this.", 
            "date_created": "2016-07-19 20:56:31.668744+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Caching models like this probably really should see a spec just to think through the access patterns, especially as people keep proposing to make MD writable from the guest, which impacts this. ", 
            "date_created": "2016-08-01 13:14:11.692235+00:00", 
            "author": "https://api.launchpad.net/1.0/~sdague"
        }
    ]
}
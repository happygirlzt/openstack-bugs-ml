{
    "status": "Invalid", 
    "last_updated": "2017-04-19 09:54:30.602503+00:00", 
    "description": "\n1. Problem:\n    test_list_servers_filtered_by_ip sometimes fails with:\n    Traceback (most recent call last):\n      File \"/home/zfl/tempest_m_git_local/tempest/api/compute/servers/test_list_server_filters.py\", line 284, in test_list_servers_filtered_by_ip\n        self.assertNotIn(self.s2_name, map(lambda x: x['name'], servers))\n      File \"/usr/lib/python2.7/site-packages/testtools/testcase.py\", line 392, in assertNotIn\n        self.assertThat(haystack, matcher, message)\n      File \"/usr/lib/python2.7/site-packages/testtools/testcase.py\", line 433, in assertThat\n        raise mismatch_error\n    MismatchError: [u'tempest-ListServerFiltersTestJSON-instance-328761420'] matches Contains('tempest-ListServerFiltersTestJSON-instance-328761420')\n\n2. Reason:\n    We can see from nova code that filter by ip is always \"regexp match\", \n    so if server2' ip happened to be part of server1's ip, then filter by\n    server1's ip will also return server2.\n    https://github.com/openstack/nova/blob/63805735c25a54ad1b9b97e05080c1a6153d8e22/nova/compute/api.py\n    get_all\n\n3. Solution:\n    There are 3 possibles ways,\n    1) create servers with specified ips, such as 1.1.1.1, 1.1.1.2, 1.1.1.3\n    2) find the longest ip in servers, and filter it by that ip, then only \n       one server will be returned\n    3) filter using server1's ip, and using assertIn or assertNotIn according\n       to whether other server ip is part of server1's ip", 
    "tags": [], 
    "importance": "Medium", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1668828", 
    "owner": "https://api.launchpad.net/1.0/~mriedem", 
    "id": 1668828, 
    "index": 4762, 
    "created": "2017-03-01 02:47:03.965977+00:00", 
    "title": "ip filtering short circuits based on regex", 
    "comments": [
        {
            "content": "1. Problem:\n    test_list_servers_filtered_by_ip sometimes fails with:\n    Traceback (most recent call last):\n      File \"/home/zfl/tempest_m_git_local/tempest/api/compute/servers/test_list_server_filters.py\", line 284, in test_list_servers_filtered_by_ip\n        self.assertNotIn(self.s2_name, map(lambda x: x['name'], servers))\n      File \"/usr/lib/python2.7/site-packages/testtools/testcase.py\", line 392, in assertNotIn\n        self.assertThat(haystack, matcher, message)\n      File \"/usr/lib/python2.7/site-packages/testtools/testcase.py\", line 433, in assertThat\n        raise mismatch_error\n    MismatchError: [u'tempest-ListServerFiltersTestJSON-instance-328761420'] matches Contains('tempest-ListServerFiltersTestJSON-instance-328761420')\n\n2. Reason:\n    We can see from nova code that filter by ip is always \"regexp match\", so if server2' ip happened to be part of\n    server1's ip, then filter by server1's ip will also return server2.\nhttps://github.com/openstack/nova/blob/63805735c25a54ad1b9b97e05080c1a6153d8e22/nova/compute/api.py   get_all\n\n3. Solution:\n    There are 3 possibles ways,\n    1) create servers with specified ips, such as 1.1.1.1, 1.1.1.2, 1.1.1.3\n    2) find the longest ip in servers, and filter it by that ip, then only one server will be returned\n    3) filter using server1's ip, and using assertIn or assertNotIn according to whether other server ip is part of server1's ip", 
            "date_created": "2017-03-01 02:47:03.965977+00:00", 
            "author": "https://api.launchpad.net/1.0/~zhu-fanglei"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/439428", 
            "date_created": "2017-03-01 07:33:00.260311+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "The bug is actually in nova here:\n\nhttps://github.com/openstack/nova/blob/3a2a181796664fea7f6069d49f9cd367b8cff825/nova/compute/api.py#L2508\n\nAs demonstrated in this example:\n\n>>> import re\n>>> ipv4_f = re.compile(str('10.1.1.1'))\n>>> address1 = '10.1.1.1'\n>>> address2 = '10.1.1.10'\n>>> addresses = (address1, address2)\n>>> for addr in addresses:\n...     if ipv4_f.match(addr):\n...         print 'match found on address: %s' % addr\n...\nmatch found on address: 10.1.1.1\nmatch found on address: 10.1.1.10\n>>>\n\nNova should probably just attempt to do an exact match and if none found, then do the regex match but rather than return the first match, return all matches.", 
            "date_created": "2017-03-01 20:17:00.997164+00:00", 
            "author": "https://api.launchpad.net/1.0/~mriedem"
        }, 
        {
            "content": "When the ip filtering started happening in the compute API code originally, we always returned all of the matches:\n\nhttps://github.com/openstack/nova/commit/ae781ee97947c33d6d43e4c21df4f338c875bf1c\n\nThat was regressed about 2 years ago here:\n\nhttps://github.com/openstack/nova/commit/8fc7eee58ebd929dda75e467f93c381091da7ace\n\nWhere it short-circuits and only returns the first match. So as far as latent behavior is concerned, I think we could go back to returning all matches since it was a very old regression to begin with (regressed in kilo).", 
            "date_created": "2017-03-01 20:28:42.843887+00:00", 
            "author": "https://api.launchpad.net/1.0/~mriedem"
        }, 
        {
            "content": "I'm going to work on creating a functional test within nova that can reproduce this bug.", 
            "date_created": "2017-03-02 01:04:16.158329+00:00", 
            "author": "https://api.launchpad.net/1.0/~mriedem"
        }, 
        {
            "content": "Now that I've written a recreate test for this on the nova side, I think patch set 3 on the Tempest change was actually correct and the nova api is performing as intended. The nova api code performs a regex match on the ip filter, it always has. Earlier today when I was looking at this, I thought the nova-api code was short circuiting and only returning the 10.1.1.10 match in this example, but now that I re-read the commit message on the tempest change, it's actually returning both 10.1.1.10 and 10.1.1.1 and it's tempest that's not handling that correctly.", 
            "date_created": "2017-03-02 03:07:33.952698+00:00", 
            "author": "https://api.launchpad.net/1.0/~mriedem"
        }, 
        {
            "content": "Related fix proposed to branch: master\nReview: https://review.openstack.org/439969", 
            "date_created": "2017-03-02 03:22:19.320077+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/439428\nCommitted: https://git.openstack.org/cgit/openstack/tempest/commit/?id=7d8f7c5669f42178ae47aa1a6446eda42910a390\nSubmitter: Jenkins\nBranch:    master\n\ncommit 7d8f7c5669f42178ae47aa1a6446eda42910a390\nAuthor: zhufl <email address hidden>\nDate:   Wed Mar 1 15:41:41 2017 +0800\n\n    Correct test_list_servers_filtered_by_ip for bug 1668828\"\n    \n    test_list_servers_filtered_by_ip will fail occasionally, because\n    now on Nova side filter by ip is always \"regexp match\",\n    https://github.com/openstack/nova/blob/master/nova/api/openstack/compute/schemas/servers.py#L355\n    so if server1's ip is \"10.1.1.1\" and servers2's ip is \"10.1.1.10\",\n    filter by server1's ip \"10.1.1.1\" will get both servers in the list.\n    \n    This is to use the longest ip for the filter, i.e., if server1's\n    ip is \"10.1.1.1\" and server2's ip is \"10.1.1.10\", then we should use\n    \"10.1.1.10\" for the filter, so to ensure only one server is returned\n    in the list.\n    \n    Change-Id: I87c325cb80a95861287c54fbd1b5718cfb9ef310\n    Closes-Bug: #1668828\n", 
            "date_created": "2017-03-07 06:53:44.697442+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/439969\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=b6a99a390caf2c143f3211c40f2ac7f5d51c9c1d\nSubmitter: Jenkins\nBranch:    master\n\ncommit b6a99a390caf2c143f3211c40f2ac7f5d51c9c1d\nAuthor: Matt Riedemann <email address hidden>\nDate:   Wed Mar 1 22:19:09 2017 -0500\n\n    Add functional test for ip filtering with regex\n    \n    There was a bug in Tempest where it would filter the\n    list of servers by fixed IP address and expected to\n    only get back one server but sometimes got more than\n    one. That was because the IP of one server was\n    a prefix of the IP of another server, and because of\n    the regex used in the _ip_filter method in the compute\n    API it will return all matches.\n    \n    This is how the IP filtering has always worked, but\n    it's not clear we had a solid test coverage of this\n    scenario so a functional test was written to confirm\n    the expected behavior and so that we don't regress it\n    since it's not documented in the api-ref (yet).\n    \n    Change-Id: If0e6d7ea7ac61a8480bf7f0288b263902536dc59\n    Related-Bug: #1668828\n", 
            "date_created": "2017-03-27 13:05:29.462442+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "This issue was fixed in the openstack/tempest 16.0.0 release.", 
            "date_created": "2017-04-19 09:54:29.598721+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ]
}
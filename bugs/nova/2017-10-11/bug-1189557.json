{
    "status": "Fix Released", 
    "last_updated": "2013-10-17 11:49:10.888569+00:00", 
    "description": "If the scheduler is creating multiple instances in the same request it will re-run each filter for each host for each instance.\n\nIn the case of the AZ filter, this currently includes a DB look up to get the AZ value from the aggregate - although this value isn't going to change on successive runs.\n\nWhere there are a lot of hosts this can take several seconds for each run of the filter.   When repeating this say 100 times (to create 100 instances) the total time taken by the scheduler can exceed the service timeout interval, and so hosts start getting dropped by the compute filter because it looks as if the last service update (cached by the scheduler at the start of the run has now expired).\n\nThere seem to be two possible solutions here:\ni) Change the AZ filter to use a cached value  (Would be simple as the availability zone class already has caching)\n\nii) Change the filter mechanism so that filters can be defined so that they need only to be run once for each scheduler request \n\n\n The second approach seems more general", 
    "tags": [
        "scheduler"
    ], 
    "importance": "Undecided", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1189557", 
    "owner": "https://api.launchpad.net/1.0/~philip-day", 
    "id": 1189557, 
    "index": 3731, 
    "created": "2013-06-10 17:20:31.689885+00:00", 
    "title": "Scheduler AZ filter should use cached values of host to AZ mapping", 
    "comments": [
        {
            "content": "If the scheduler is creating multiple instances in the same request it will re-run each filter for each host for each instance.\n\nIn the case of the AZ filter, this currently includes a DB look up to get the AZ value from the aggregate - although this value isn't going to change on successive runs.\n\nWhere there are a lot of hosts this can take several seconds for each run of the filter.   When repeating this say 100 times (to create 100 instances) the total time taken by the scheduler can exceed the service timeout interval, and so hosts start getting dropped by the compute filter because it looks as if the last service update (cached by the scheduler at the start of the run has now expired).\n\nThere seem to be two possible solutions here:\ni) Change the AZ filter to use a cached value  (Would be simple as the availability zone class already has caching)\n\nii) Change the filter mechanism so that filters can be defined so that they need only to be run once for each scheduler request \n\n\n The second approach seems more general", 
            "date_created": "2013-06-10 17:20:31.689885+00:00", 
            "author": "https://api.launchpad.net/1.0/~philip-day"
        }, 
        {
            "content": "Phil,\n\nYou can implement a caching mechanism in the filters by using https://review.openstack.org/#/c/29343/12/nova/scheduler/filters/volume_affinity_filter.py as a guide.  Filters get initialized for each RPC request coming into the scheduler, so the above patch  uses __init__ to help with caching.  Furthermore this is a common problem in many filters, so it may be worth it to abstract out the caching code so other filters can re-use it.", 
            "date_created": "2013-06-10 17:55:11.245826+00:00", 
            "author": "https://api.launchpad.net/1.0/~jogo"
        }, 
        {
            "content": "Thanks Joe I'll take a look. I'm also thinking about a general property in the filter base class to indicate that a filer only needs to be run once per request, as I think there a number that could use that\n\nSent from Samsung Mobile\n\n\n-------- Original message --------\nSubject: [Bug 1189557] Re: Scheduler AZ filter should use cached values of host to AZ mapping\nFrom: Joe Gordon <email address hidden>\nTo: \"Day, Phil\" <email address hidden>\nCC:\n\n\nPhil,\n\nYou can implement a caching mechanism in the filters by using\nhttps://review.openstack.org/#/c/29343/12/nova/scheduler/filters/volume_affinity_filter.py\nas a guide.  Filters get initialized for each RPC request coming into\nthe scheduler, so the above patch  uses __init__ to help with caching.\nFurthermore this is a common problem in many filters, so it may be worth\nit to abstract out the caching code so other filters can re-use it.\n\n--\nYou received this bug notification because you are subscribed to the bug\nreport.\nhttps://bugs.launchpad.net/bugs/1189557\n\nTitle:\n  Scheduler AZ filter should use cached values of host to AZ mapping\n\nStatus in OpenStack Compute (Nova):\n  New\n\nBug description:\n  If the scheduler is creating multiple instances in the same request it\n  will re-run each filter for each host for each instance.\n\n  In the case of the AZ filter, this currently includes a DB look up to\n  get the AZ value from the aggregate - although this value isn't going\n  to change on successive runs.\n\n  Where there are a lot of hosts this can take several seconds for each\n  run of the filter.   When repeating this say 100 times (to create 100\n  instances) the total time taken by the scheduler can exceed the\n  service timeout interval, and so hosts start getting dropped by the\n  compute filter because it looks as if the last service update (cached\n  by the scheduler at the start of the run has now expired).\n\n  There seem to be two possible solutions here:\n  i) Change the AZ filter to use a cached value  (Would be simple as the availability zone class already has caching)\n\n  ii) Change the filter mechanism so that filters can be defined so that\n  they need only to be run once for each scheduler request\n\n\n   The second approach seems more general\n\nTo manage notifications about this bug go to:\nhttps://bugs.launchpad.net/nova/+bug/1189557/+subscriptions\n", 
            "date_created": "2013-06-10 19:02:38+00:00", 
            "author": "https://api.launchpad.net/1.0/~philip-day"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/33720\nCommitted: http://github.com/openstack/nova/commit/4a03071db23196c4ac1ec0d8ea163c46887d3b08\nSubmitter: Jenkins\nBranch:    master\n\ncommit 4a03071db23196c4ac1ec0d8ea163c46887d3b08\nAuthor: Phil Day <email address hidden>\nDate:   Wed Jun 19 21:09:42 2013 +0100\n\n    Allow filters to only run once per request if their data is static\n    \n    Currently the filter_all() method of each scheduler filter is run\n    once for each instance in a request, but for many filters the data\n    doesn't change during a request.\n    \n    For example the data used by the AZ filter is pretty static, and\n    doesn't filter any more hosts on successive runs.  However it is\n    fairly expensive to run on a large system.\n    \n    Similarly the ServiceGroup information used by the compute filter\n    is cached as part of the host status, and doesn't need to be\n    evaluated more than once per request.\n    \n    Only filters that are based on data that may change within a\n    request, for example resource consumption, need to be evaluated\n    for each instance.\n    \n    This blueprint introduces a new attribute that allows filters to\n    declare that they only need to be run once per request. The default\n    behaviour is left so that a filter is evaluated once for each\n    instance in a request.\n    \n    The following existing filters are changed to only evaluate once\n    per request:\n    \n      AggregateInstanceExtraSpecsFilter\n      AggregateMultiTenancyIsolation\n      AggregateTypeAffinityFilter\n      AllHostsFilter\n      AvailabilityZoneFilter\n      ComputeCapabilitiesFilter\n      ComputeFilter\n      DifferentHostFilter\n      GroupAntiAffinityFilter\n      ImagePropertiesFilter\n      IsolatedHostsFilter\n      SameHostFilter\n      SimpleCIDRAffinityFilter\n    \n    In addition the function that does the check is defined in the\n    filter base class in a way that a filter that wants to run\n    (for example) once for every 10 instances in a request could\n    overload the function and implement its own behaviour.\n    \n    Implements: bp once-per-request-filters\n    Fixes: bug 1189557\n    \n    Change-Id: Ia668f16414da86441323c58b1bbef5f88c81b90c\n", 
            "date_created": "2013-07-16 02:29:57.259256+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ]
}
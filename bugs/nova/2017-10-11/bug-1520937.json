{
    "status": "Fix Released", 
    "last_updated": "2016-02-20 19:49:29.341546+00:00", 
    "description": "Nova strips out the path from the URL for any glance server in the \"api_servers\" configuration option. This prevents the use of <host>/image as part of the location for glance to be specified.\n\nthe code in \"nova.image.glance\" for \"get_api_servers\" silently drops the path on the floor.\n\nAs you can see here:\n\ndef get_api_servers():\n    \"\"\"Shuffle a list of CONF.glance.api_servers and return an iterator\n    that will cycle through the list, looping around to the beginning\n    if necessary.\n    \"\"\"\n    api_servers = []\n\n    configured_servers = (['%s:%s' % (CONF.glance.host, CONF.glance.port)]\n                          if CONF.glance.api_servers is None\n                          else CONF.glance.api_servers)\n    for api_server in configured_servers:\n        if '//' not in api_server:\n            api_server = 'http://' + api_server\n        o = urlparse.urlparse(api_server)\n        port = o.port or 80\n        host = o.netloc.rsplit(':', 1)[0]\n        if host[0] == '[' and host[-1] == ']':\n            host = host[1:-1]\n        use_ssl = (o.scheme == 'https')\n        api_servers.append((host, port, use_ssl))\n    random.shuffle(api_servers)\n    return itertools.cycle(api_servers)\n\n\nUrlparse.urlparse splits out as follows:\n\n>>> urlparse.urlparse(\"http://test.com/images\")\nParseResult(scheme='http', netloc='test.com', path='/images', params='', query='', fragment='')\n\nThis means that glance *must* be on the root of wherever it lives from nova's perspective. We should not prevent services from living outside of the \"root\" of the path / ignoring proper URL schemes.", 
    "tags": [], 
    "importance": "Medium", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1520937", 
    "owner": "https://api.launchpad.net/1.0/~sdague", 
    "id": 1520937, 
    "index": 4391, 
    "created": "2015-11-29 14:14:58.380506+00:00", 
    "title": "Nova strips the path from glance servers specificed in [glance]/api_servers config", 
    "comments": [
        {
            "content": "Nova strips out the path from the URL for any glance server in the \"api_servers\" configuration option. This prevents the use of <host>/image as part of the location for glance to be specified.\n\nthe code in \"nova.image.glance\" for \"get_api_servers\" silently drops the path on the floor.\n\nAs you can see here:\n\ndef get_api_servers():\n    \"\"\"Shuffle a list of CONF.glance.api_servers and return an iterator\n    that will cycle through the list, looping around to the beginning\n    if necessary.\n    \"\"\"\n    api_servers = []\n\n    configured_servers = (['%s:%s' % (CONF.glance.host, CONF.glance.port)]\n                          if CONF.glance.api_servers is None\n                          else CONF.glance.api_servers)\n    for api_server in configured_servers:\n        if '//' not in api_server:\n            api_server = 'http://' + api_server\n        o = urlparse.urlparse(api_server)\n        port = o.port or 80\n        host = o.netloc.rsplit(':', 1)[0]\n        if host[0] == '[' and host[-1] == ']':\n            host = host[1:-1]\n        use_ssl = (o.scheme == 'https')\n        api_servers.append((host, port, use_ssl))\n    random.shuffle(api_servers)\n    return itertools.cycle(api_servers)\n\n\nUrlparse.urlparse splits out as follows:\n\n>>> urlparse.urlparse(\"http://test.com/images\")\nParseResult(scheme='http', netloc='test.com', path='/images', params='', query='', fragment='')\n\nThis means that glance *must* be on the root of wherever it lives from nova's perspective. We should not prevent services from living outside of the \"root\" of the path / ignoring proper URL schemes.", 
            "date_created": "2015-11-29 14:14:58.380506+00:00", 
            "author": "https://api.launchpad.net/1.0/~mdrnstm"
        }, 
        {
            "content": "It looks like glanceclient may make it exceedingly difficult to add in a path-prefix in the way nova is consuming it.", 
            "date_created": "2015-11-29 14:26:25.034570+00:00", 
            "author": "https://api.launchpad.net/1.0/~mdrnstm"
        }, 
        {
            "content": "upon further digging it looks like glanceclient may just accept the URI path as long as it is constructed sanely. However, it is not an easy construction in the way it's being presented.", 
            "date_created": "2015-11-29 14:35:00.488022+00:00", 
            "author": "https://api.launchpad.net/1.0/~mdrnstm"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/251138", 
            "date_created": "2015-11-29 14:55:38.654272+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Related fix proposed to branch: master\nReview: https://review.openstack.org/251926", 
            "date_created": "2015-12-01 15:36:41.613371+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Change abandoned by Morgan Fainberg (<email address hidden>) on branch: master\nReview: https://review.openstack.org/251926", 
            "date_created": "2015-12-04 20:41:30.668871+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Change abandoned by Morgan Fainberg (<email address hidden>) on branch: master\nReview: https://review.openstack.org/251138", 
            "date_created": "2015-12-04 20:41:39.994536+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "This has been fixed in upstream Mitaka.", 
            "date_created": "2016-02-20 19:49:28.591300+00:00", 
            "author": "https://api.launchpad.net/1.0/~sdague"
        }
    ]
}
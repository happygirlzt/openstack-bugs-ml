{
    "status": "Confirmed", 
    "last_updated": "2017-08-01 10:32:06.314063+00:00", 
    "description": "What happens is that the live migration task uses the resource specification created when the instances was created and passes this to the scheduler to find a new host, marking its current host as excluded. This resource spec object includes the instance's group object which contains a list of instances in the group. The problem is that the instance group object in the resource spec reflects the list of instances in the group at the time the instance was created. Thus if you migrate the first instance to be assigned an anti affinity group it will think that the group has no other member instances and thus no compute nodes will be excluded. Only the most recently created instance assigned the anti affinity group will correctly exclude all nodes containing members of its group!\n\nThere is code to update the instance group object in the resource spec but the resource spec object is only updated with this information if it is created by the live migration task, i.e. in the case of an instance without a resource spec in the request_specs database table. This will only be the case for instances created prior to the implementation of the requests_specs table.", 
    "tags": [
        "affinity", 
        "anti-affinity", 
        "live-migration", 
        "mitaka-backport-potential"
    ], 
    "importance": "High", 
    "heat": 10, 
    "link": "https://bugs.launchpad.net/nova/+bug/1600251", 
    "owner": "None", 
    "id": 1600251, 
    "index": 1946, 
    "created": "2016-07-08 14:22:42.470396+00:00", 
    "title": "live migration does not honor server group policy", 
    "comments": [
        {
            "content": "What happens is that the live migration task uses the resource specification created when the instances was created and passes this to the scheduler to find a new host, marking its current host as excluded. This resource spec object includes the instance's group object which contains a list of instances in the group. The problem is that the instance group object in the resource spec reflects the list of instances in the group at the time the instance was created. Thus if you migrate the first instance to be assigned an anti affinity group it will think that the group has no other member instances and thus no compute nodes will be excluded. Only the most recently created instance assigned the anti affinity group will correctly exclude all nodes containing members of its group!\n\nThere is code to update the instance group object in the resource spec but the resource spec object is only updated with this information if it is created by the live migration task, i.e. in the case of an instance without a resource spec in the request_specs database table. This will only be the case for instances created prior to the implementation of the requests_specs table.", 
            "date_created": "2016-07-08 14:22:42.470396+00:00", 
            "author": "https://api.launchpad.net/1.0/~paul-carlton2"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/339588", 
            "date_created": "2016-07-08 14:35:28.705225+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "To reproduce:\n\nWith two compute hosts:\n1. create an instance group X with the anti-affinity policy\n2. boot a vm A with --hint group=X\n3. boot a vm B with --hint group=X\n\nNow there should be one vm on each host\n\n4. live migrating vm A works (the anti-affinity policy is not respected)\n5. live migrating vm B does not work (the anti-affinity policy is respected)", 
            "date_created": "2016-07-08 15:18:27.188337+00:00", 
            "author": "https://api.launchpad.net/1.0/~pmurray"
        }, 
        {
            "content": "Confirmed that policies are honored only for 1 VM (the newest VM in environment) by using the same steps to reproduce this issue.", 
            "date_created": "2016-07-08 15:22:39.567985+00:00", 
            "author": "https://api.launchpad.net/1.0/~pawel-koniszewski"
        }, 
        {
            "content": "So, I thought I found why the bug was there because we were not persisting the instance group information when creating the RequestSpec but that's not right, we're correctly setting the field instead.\n\nNow, I'm trying to understand why we have those problems and why calling setup_instance_group() could help us given that InstanceGroup.hosts is a lazy-load field.", 
            "date_created": "2016-07-13 19:41:39.325807+00:00", 
            "author": "https://api.launchpad.net/1.0/~sylvain-bauza"
        }, 
        {
            "content": "We re-tested the case where the request spec has not been persisted and confirm that the behaviour is correct. So the bug only manifests if the request spec has been persisted.", 
            "date_created": "2016-07-14 15:43:13.370587+00:00", 
            "author": "https://api.launchpad.net/1.0/~pmurray"
        }, 
        {
            "content": "Change abandoned by Paul Carlton (<email address hidden>) on branch: master\nReview: https://review.openstack.org/339588\nReason: superseded by https://review.openstack.org/#/c/344380/", 
            "date_created": "2016-07-19 22:45:52.008302+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Change of plan, https://review.openstack.org/339588 restored", 
            "date_created": "2016-07-25 10:15:01.520300+00:00", 
            "author": "https://api.launchpad.net/1.0/~paul-carlton2"
        }, 
        {
            "content": "If this is a latent bug and is backport potential for mitaka then I don't think we need to hold up the newton release for this.", 
            "date_created": "2016-09-08 20:08:05.745274+00:00", 
            "author": "https://api.launchpad.net/1.0/~mriedem"
        }, 
        {
            "content": "Change abandoned by Sean Dague (<email address hidden>) on branch: master\nReview: https://review.openstack.org/339588\nReason: This review is > 4 weeks without comment, and is not mergable in it's current state. We are abandoning this for now. Feel free to reactivate the review by pressing the restore button and leaving a 'recheck' comment to get fresh test results.", 
            "date_created": "2017-08-01 09:52:29.176933+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "There are no currently open reviews on this bug, changing the status back to the previous state and unassigning. If there are active reviews related to this bug, please include links in comments. ", 
            "date_created": "2017-08-01 10:15:16.368042+00:00", 
            "author": "https://api.launchpad.net/1.0/~sdague"
        }
    ]
}
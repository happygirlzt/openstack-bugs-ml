{
    "status": "Opinion", 
    "last_updated": "2016-05-17 14:00:32.221967+00:00", 
    "description": "I went  through the recent code merge of PCI passthrough implementation. I see some drawbacks in the implementation and would be great improvement if the following can be accommodated.\n\n1. Ability to specify a sub-set of PCI devices to be exported to Openstack via entries in nova.conf of the compute node.\nExample: pci_passthrough_whitelist=[{\"product_id\":\"1520\", \"vendor_id\":\"8086\", \"deviceids\":\"0000:06:00.0, 0000:06:00.1, 0000:06:00.2, 0000:06:00.3\"}]\n\n2.  Group PCI devices, so that when creating flavor, we can choose, how many interfaces from each group needs to be presented to the guest. The group name can be specified in nova.conf of the control node if needed.\n\nFor example, if we have to SRIOV cards where each is connected physically to different networks and each has 32 Virtual functions,  there is no way in current implementation to spin up a VM with one interface (VF) from each Group\n\nExample:\npci_alias={\"product_id\":\"1520\", \"name\":\"IN\", \"deviceids\":\"0000:06:00.0, 0000:06:00.2\"}\npci_alias={\"product_id\":\"1520\", \"name\":\"OUT\", \"deviceids\":\"0000:06:00.1, 0000:06:00.3\"}\n\n3. 'nova show' and 'nova hypervisor-stats' and 'nova hypervisor-show' shows (a) pci device associated with the VM, (b) shows how may groups are there and what is their current usage, and (c) show individual hypervisor PCI device usage respectively.\n\n4. Some ordering involved which enables guest to predict which PCI device belongs to which network.\nExample, in the alphabetical order of the network names ? With this, guest can predict that the first interface will be from IN-group and second will be from OUT-group.\n\nIs there any chance that we can see these in Havana ?\n\nWe have an implementation that does these at: https://github.com/CiscoSystems/nova/tree/grizzly-multitool but is not based on current implementation.\n\nThanks,\nShesha", 
    "tags": [], 
    "importance": "Wishlist", 
    "heat": 28, 
    "link": "https://bugs.launchpad.net/nova/+bug/1222990", 
    "owner": "None", 
    "id": 1222990, 
    "index": 1413, 
    "created": "2013-09-09 19:21:58.241948+00:00", 
    "title": "Cannot specify subset of PCI devices for PCI passthrough", 
    "comments": [
        {
            "content": "I went  through the recent code merge of PCI passthrough implementation. I see some drawbacks in the implementation and would be great improvement if the following can be accommodated.\n\n1. Ability to specify a sub-set of PCI devices to be exported to Openstack via entries in nova.conf of the compute node.\nExample: pci_passthrough_whitelist=[{\"product_id\":\"1520\", \"vendor_id\":\"8086\", \"deviceids\":\"0000:06:00.0, 0000:06:00.1, 0000:06:00.2, 0000:06:00.3\"}]\n\n2.  Group PCI devices, so that when creating flavor, we can choose, how many interfaces from each group needs to be presented to the guest. The group name can be specified in nova.conf of the control node if needed.\n\nFor example, if we have to SRIOV cards where each is connected physically to different networks and each has 32 Virtual functions,  there is no way in current implementation to spin up a VM with one interface (VF) from each Group\n\nExample:\npci_alias={\"product_id\":\"1520\", \"name\":\"IN\", \"deviceids\":\"0000:06:00.0, 0000:06:00.2\"}\npci_alias={\"product_id\":\"1520\", \"name\":\"OUT\", \"deviceids\":\"0000:06:00.1, 0000:06:00.3\"}\n\n3. 'nova show' and 'nova hypervisor-stats' and 'nova hypervisor-show' shows (a) pci device associated with the VM, (b) shows how may groups are there and what is their current usage, and (c) show individual hypervisor PCI device usage respectively.\n\n4. Some ordering involved which enables guest to predict which PCI device belongs to which network.\nExample, in the alphabetical order of the network names ? With this, guest can predict that the first interface will be from IN-group and second will be from OUT-group.\n\nIs there any chance that we can see these in Havana ?\n\nWe have an implementation that does these at: https://github.com/CiscoSystems/nova/tree/grizzly-multitool but is not based on current implementation.\n\nThanks,\nShesha", 
            "date_created": "2013-09-09 19:21:58.241948+00:00", 
            "author": "https://api.launchpad.net/1.0/~sheshas"
        }, 
        {
            "content": "It's too late for adding new features to Havana.\n\nYou may want to discuss these on openstack-dev.  You'll probably get more attention to them that way.", 
            "date_created": "2013-09-09 21:51:47.912232+00:00", 
            "author": "https://api.launchpad.net/1.0/~russellb"
        }, 
        {
            "content": "good ideas, seem we might had to discuss and push it in next cycle.", 
            "date_created": "2013-09-10 00:56:40.423254+00:00", 
            "author": "https://api.launchpad.net/1.0/~yongli-he"
        }, 
        {
            "content": "i take it -:)", 
            "date_created": "2013-09-10 00:57:34.497761+00:00", 
            "author": "https://api.launchpad.net/1.0/~yongli-he"
        }, 
        {
            "content": "Thanks for taking it.", 
            "date_created": "2013-09-10 05:50:17.221393+00:00", 
            "author": "https://api.launchpad.net/1.0/~sheshas"
        }, 
        {
            "content": "It would be good to use \"extra_info\" field to store other generic information.\nFor example, some PCI device has its corresponding name in the file system(e.g. /dev/sda) or device name (e.g. eth0).\n LXC host device passthrough and PCI passthrough can have a lot in common.\nMost of the work done for PCI passthrough can be used for LXC passthrough.\nHowever, LXC host device passthrough needs device name.\nStoring that information in \"extra_info\" field can make PCI passthrough scheme usable for LXC device passthrough.", 
            "date_created": "2013-09-23 14:25:54.812410+00:00", 
            "author": "https://api.launchpad.net/1.0/~dkang"
        }, 
        {
            "content": "summit topic for pci passthrough next: \n\nhttp://summit.openstack.org/cfp/details/129\n\n", 
            "date_created": "2013-09-26 00:08:47.168408+00:00", 
            "author": "https://api.launchpad.net/1.0/~yongli-he"
        }, 
        {
            "content": "Hmm, LXC passthrough is something interesting. Will LXC passthrough will be PCI based? Currently  create PCI specific table like BDF etc. Will it be ok for LXC passthrough?", 
            "date_created": "2013-10-08 20:47:55.638248+00:00", 
            "author": "https://api.launchpad.net/1.0/~yunhong-jiang"
        }, 
        {
            "content": " I'm not sure if I understand well what you mean by \"Will LXC passthrough will be PCI based?\".\nWhat is \"BDF\"?\n\n I would say the PCI passthrough infrastructure can be used for LXC passthrough for PCI devices using extra_info field.\nI believe that if extra_info field is flexible enough - such as json string -, supporting LXC host device passthrough for PCI device\nis straightforward in most cases.\n", 
            "date_created": "2013-11-06 15:55:45.083242+00:00", 
            "author": "https://api.launchpad.net/1.0/~dkang"
        }, 
        {
            "content": "Hi, I also meet this issue...\nI think to specify subset of PCI devices is a very common requirement. Is there time schedule for development of this feature?", 
            "date_created": "2013-12-19 01:34:21.389125+00:00", 
            "author": "https://api.launchpad.net/1.0/~ryan-yi-liu"
        }, 
        {
            "content": "For issue 1, I think it is already fixed. \n\nI specify a sub-set of PCI devices and a single pci device in  /etc/nova/nova.conf\n$ cat /etc/nova/nova.conf |grep pci_passthrough_whitelist\npci_passthrough_whitelist= {\"product_id\":\"10fb\", \"vendor_id\":\"8086\", \"deviceids\":\"0000:01:00.0, 0000:01:00.1\"}\npci_passthrough_whitelist= {\"product_id\":\"8c20\", \"vendor_id\":\"8086\", \"deviceids\":\"0000:00:1b.0\"}\n\nand I can see nova compute can parse the /etc/nova/nova.conf correctly. \nmysql> SELECT * FROM nova.pci_devices;\n+---------------------+------------+------------+---------+----+-----------------+--------------+------------+-----------+----------+------------------+-----------------+-----------+------------+---------------+------------+\n| created_at          | updated_at | deleted_at | deleted | id | compute_node_id | address      | product_id | vendor_id | dev_type | dev_id           | label           | status    | extra_info | instance_uuid | request_id |\n+---------------------+------------+------------+---------+----+-----------------+--------------+------------+-----------+----------+------------------+-----------------+-----------+------------+---------------+------------+\n| 2014-12-25 14:56:03 | NULL       | NULL       |       0 |  1 |               1 | 0000:01:00.0 | 10fb       | 8086      | type-PCI | pci_0000_01_00_0 | label_8086_10fb | available | {}         | NULL          | NULL       |\n| 2014-12-25 14:56:03 | NULL       | NULL       |       0 |  2 |               1 | 0000:01:00.1 | 10fb       | 8086      | type-PCI | pci_0000_01_00_1 | label_8086_10fb | available | {}         | NULL          | NULL       |\n| 2014-12-25 14:56:03 | NULL       | NULL       |       0 |  3 |               1 | 0000:00:1b.0 | 8c20       | 8086      | type-PCI | pci_0000_00_1b_0 | label_8086_8c20 | available | {}         | NULL          | NULL       |\n+---------------------+------------+------------+---------+----+-----------------+--------------+------------+-----------+----------+------------------+-----------------+-----------+------------+---------------+------------+\n3 rows in set (0.00 sec)\n\nhere is the last commit of my nova source code. \n$ git show \ncommit dcb3463f234ec1a6cc69de4d1ce6ec5ddfc0e698\nMerge: 7441591 459ca56\nAuthor: Jenkins <email address hidden>\nDate:   Fri Nov 28 12:02:09 2014 +0000\n\n    Merge \"Check server group policy on migrate/evacuate\"\n\n", 
            "date_created": "2014-12-25 07:18:52.957578+00:00", 
            "author": "https://api.launchpad.net/1.0/~shaohef"
        }, 
        {
            "content": "For issue one: you can see yongli's patch:\n$ git show 5d383629571cf10fa94a879ba93e6d2ad9f4262a\n\nit say:\nThe configuration option 'pci_passthrough_whitelist' can be defined multi times, each for one type of device.\n\nAs I difined above:\n$ cat /etc/nova/nova.conf |grep pci_passthrough_whitelist\npci_passthrough_whitelist= {\"product_id\":\"10fb\", \"vendor_id\":\"8086\", \"deviceids\":\"0000:01:00.0, 0000:01:00.1\"}\npci_passthrough_whitelist= {\"product_id\":\"8c20\", \"vendor_id\":\"8086\", \"deviceids\":\"0000:00:1b.0\"}\n\nbut it does not support mutile items in one configuration option 'pci_passthrough_whitelist'.\npci_passthrough_whitelist=[{\"product_id\":\"10fb\", \"vendor_id\":\"8086\", \"deviceids\":\"0000:01:00.0, 0000:01:00.1\"}, {\"product_id\":\"8c20\", \"vendor_id\":\"8086\", \"deviceids\":\"0000:00:1b.0\"}]\n\n\nI think you can define multi times. This is more readable than define all devices in one configuration option 'pci_passthrough_whitelist'.\n\nMaybe extra tool will be needed to list pci device and to let users choose his pci device, and then configure the 'pci_passthrough_whitelist' option to cat /etc/nova/nova.conf automatically \n\n\n", 
            "date_created": "2014-12-25 07:50:05.593897+00:00", 
            "author": "https://api.launchpad.net/1.0/~shaohef"
        }, 
        {
            "content": "This wishlist bug has been open a year without any activity. I'm going to move it to \"Opinion / Wishlist\", which is an easily-obtainable queue of older requests that have come on. \n\nFeature requests for nova are done with blueprints [1] and with specs [2]. I'll recommend to read [3] if not yet done. The effort to implement the requested feature is then driven only by the blueprint (and spec).\n\nReferences:\n[1] https://blueprints.launchpad.net/nova/\n[2] https://github.com/openstack/nova-specs\n[3] https://wiki.openstack.org/wiki/Blueprints", 
            "date_created": "2016-05-17 14:00:31.458050+00:00", 
            "author": "https://api.launchpad.net/1.0/~mzoeller"
        }
    ]
}
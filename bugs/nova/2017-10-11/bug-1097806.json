{
    "status": "Fix Released", 
    "last_updated": "2013-04-11 19:54:47.489806+00:00", 
    "description": "Libvirt-managed qemu/KVM VMs can be paused outside of nova compute's workflow through a variety of means.\n\n* By issuing virsh suspend\n* By issuing virsh qemu-monitor-command '{\"execute\" : \"stop\"}'\n* By causing qemu to emit a STOP event, for example when attaching a GDB debugger and single-stepping\n* By connecting through an additional qemu monitor and issuing any commands that may cause qemu to emit a STOP event.\n\nStarting in Folsom (specifically https://github.com/openstack/nova/commit/129b87e17d3333aeaa9e855a70dea51e6581ea63#L6R2502 i.e. commit 129b87e diff line 2502) nova compute will destroy a VM if libvirt reports it as paused and this doesn't fit nova compute's recorded state for the VM.\n\nI surmise the original rationale is to destroy VMs that are paused by IO errors or KVM emulation errors, which would also cause qemu to emit STOP events.\n\nThe problem is that this will also destroy VMs that are paused through a variety of valid reasons as outlined above.\n\nThe problem is exacerbated by a Libvirt bug (https://bugzilla.redhat.com/show_bug.cgi?id=892791) which latches the state of a VM to paused even though the VM is running. The fix is already committed upstream (http://libvirt.org/git/?p=libvirt.git;a=commit;h=aedfcce33e4c2f266668a39fd655574fe34f1265) and we are intending for it to make its way through backports into distros.\n\nEven with libvirt's bug fixed, there are still points in time at which nova-compute will check a VMs state, find it paused for a valid reason, and decide to erroneously destroy it.\n\nThe fix is to either remove this behavior, or to further query libvirt for the paused reason, which will show conclusively whether the VM is effectively crashed, or just paused.", 
    "tags": [], 
    "importance": "Medium", 
    "heat": 16, 
    "link": "https://bugs.launchpad.net/nova/+bug/1097806", 
    "owner": "https://api.launchpad.net/1.0/~yunmao", 
    "id": 1097806, 
    "index": 3192, 
    "created": "2013-01-09 15:37:00.515591+00:00", 
    "title": "VMs paused unbeknownst to nova compute are destroyed", 
    "comments": [
        {
            "content": "Libvirt-managed qemu/KVM VMs can be paused outside of nova compute's workflow through a variety of means.\n\n* By issuing virsh suspend\n* By issuing virsh qemu-monitor-command '{\"execute\" : \"stop\"}'\n* By causing qemu to emit a STOP event, for example when attaching a GDB debugger and single-stepping\n* By connecting through an additional qemu monitor and issuing any commands that may cause qemu to emit a STOP event.\n\nStarting in Folsom (specifically https://github.com/openstack/nova/commit/129b87e17d3333aeaa9e855a70dea51e6581ea63#L6R2502 i.e. commit 129b87e diff line 2502) nova compute will destroy a VM if libvirt reports it as paused and this doesn't fit nova compute's recorded state for the VM.\n\nI surmise the original rationale is to destroy VMs that are paused by IO errors or KVM emulation errors, which would also cause qemu to emit STOP events.\n\nThe problem is that this will also destroy VMs that are paused through a variety of valid reasons as outlined above.\n\nThe problem is exacerbated by a Libvirt bug (https://bugzilla.redhat.com/show_bug.cgi?id=892791) which latches the state of a VM to paused even though the VM is running. The fix is already committed upstream (http://libvirt.org/git/?p=libvirt.git;a=commit;h=aedfcce33e4c2f266668a39fd655574fe34f1265) and we are intending for it to make its way through backports into distros.\n\nEven with libvirt's bug fixed, there are still points in time at which nova-compute will check a VMs state, find it paused for a valid reason, and decide to erroneously destroy it.\n\nThe fix is to either remove this behavior, or to further query libvirt for the paused reason, which will show conclusively whether the VM is effectively crashed, or just paused.", 
            "date_created": "2013-01-09 15:37:00.515591+00:00", 
            "author": "https://api.launchpad.net/1.0/~andreslc-x"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/19467", 
            "date_created": "2013-01-11 17:02:17.421903+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/19467\nCommitted: http://github.com/openstack/nova/commit/f7fbdeb5672bae7d3bffd6fa76de1ce81fc132bf\nSubmitter: Jenkins\nBranch:    master\n\ncommit f7fbdeb5672bae7d3bffd6fa76de1ce81fc132bf\nAuthor: Yun Mao <email address hidden>\nDate:   Fri Jan 11 11:59:23 2013 -0500\n\n    Fix state sync logic related to the PAUSED VM state\n    \n    A VM may get into the paused state not only because the user request\n    via API calls, but also due to (temporary) external instrumentations.\n    Before the virt layer can reliably report the reason, we simply ignore\n    the state discrepancy. In many cases, the VM state will go back to\n    running after the external instrumentation is done.\n    \n    Fix bug 1097806.\n    \n    Change-Id: I8edef45d60fa79d6ddebf7d0438042a7b3986b55\n", 
            "date_created": "2013-01-23 13:07:51.036618+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Fix proposed to branch: stable/folsom\nReview: https://review.openstack.org/20337", 
            "date_created": "2013-01-23 18:09:29.664810+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/20337\nCommitted: http://github.com/openstack/nova/commit/7ace55fcf9e1b7fea074f6c0331b6feafbbc4178\nSubmitter: Jenkins\nBranch:    stable/folsom\n\ncommit 7ace55fcf9e1b7fea074f6c0331b6feafbbc4178\nAuthor: Yun Mao <email address hidden>\nDate:   Fri Jan 11 11:59:23 2013 -0500\n\n    Fix state sync logic related to the PAUSED VM state\n    \n    A VM may get into the paused state not only because the user request\n    via API calls, but also due to (temporary) external instrumentations.\n    Before the virt layer can reliably report the reason, we simply ignore\n    the state discrepancy. In many cases, the VM state will go back to\n    running after the external instrumentation is done.\n    \n    Fix bug 1097806.\n    \n    Change-Id: I8edef45d60fa79d6ddebf7d0438042a7b3986b55\n    (cherry picked from commit f7fbdeb5672bae7d3bffd6fa76de1ce81fc132bf)\n", 
            "date_created": "2013-02-21 15:56:11.316103+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ]
}
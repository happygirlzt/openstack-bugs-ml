{
    "status": "Invalid", 
    "last_updated": "2016-03-29 10:22:11.583131+00:00", 
    "description": "1. [root@yindesheng nova]# git log\ncommit e80376e3796cc20a400db423b828a98de6f528e6\nMerge: b27b063 cabe2df\nAuthor: Jenkins <email address hidden>\nDate:   Fri Mar 25 00:29:05 2016 +0000\n\n    Merge \"Include CellMapping in InstanceMappin\n\n2.  I am not sure whether this is a bug, but I think this code could be improved.\n\ndef _get_instance_disk_info(self, instance_name, xml,\n                                block_device_info=None):\n        \"\"\"Get the non-volume disk information from the domain xml\n\n        :param str instance_name: the name of the instance (domain)\n        :param str xml: the libvirt domain xml for the instance\n        :param dict block_device_info: block device info for BDMs\n        :returns disk_info: list of dicts with keys:\n\n          * 'type': the disk type (str)\n          * 'path': the disk path (str)\n          * 'virt_disk_size': the virtual disk size (int)\n          * 'backing_file': backing file of a disk image (str)\n          * 'disk_size': physical disk size (int)\n          * 'over_committed_disk_size': virt_disk_size - disk_size or 0\n        \"\"\"\n        block_device_mapping = driver.block_device_info_get_mapping(\n            block_device_info)\n\n        volume_devices = set()\n        for vol in block_device_mapping:\n            disk_dev = vol['mount_device'].rpartition(\"/\")[2]\n            volume_devices.add(disk_dev)\n\n        disk_info = []\n        doc = etree.fromstring(xml)\n        disk_nodes = doc.findall('.//devices/disk')\n        path_nodes = doc.findall('.//devices/disk/source')\n        driver_nodes = doc.findall('.//devices/disk/driver')\n        target_nodes = doc.findall('.//devices/disk/target')\n\n        for cnt, path_node in enumerate(path_nodes):\n            disk_type = disk_nodes[cnt].get('type')\n            path = path_node.get('file') or path_node.get('dev')\n            target = target_nodes[cnt].attrib['dev']\n\n            if not path:\n                LOG.debug('skipping disk for %s as it does not have a path',\n                          instance_name)\n                continue\n\n            if disk_type not in ['file', 'block']:\n                LOG.debug('skipping disk because it looks like a volume', path)\n                continue\n\n            if target in volume_devices:\n                LOG.debug('skipping disk %(path)s (%(target)s) as it is a '\n                          'volume', {'path': path, 'target': target})\n                continue\n\n            # get the real disk size or\n            # raise a localized error if image is unavailable\n            if disk_type == 'file':\n                dk_size = int(os.path.getsize(path))\n            elif disk_type == 'block' and block_device_info:\n                dk_size = lvm.get_volume_size(path)\n            else:\n                LOG.debug('skipping disk %(path)s (%(target)s) - unable to '\n                          'determine if volume',\n                          {'path': path, 'target': target})\n                continue\n\n            disk_type = driver_nodes[cnt].get('type')\n            if disk_type == \"qcow2\":\n                backing_file = libvirt_utils.get_disk_backing_file(path)\n                virt_size = disk.get_disk_size(path)\n                over_commit_size = int(virt_size) - dk_size\n            else:\n                backing_file = \"\"\n                virt_size = dk_size\n                over_commit_size = 0\n\n            disk_info.append({'type': disk_type,\n                              'path': path,\n                              'virt_disk_size': virt_size,\n                              'backing_file': backing_file,\n                              'disk_size': dk_size,\n                              'over_committed_disk_size': over_commit_size})\n        return disk_info\n\n\n3. in some cases, len(disk_nodes)  is  not equal len(path_nodes), I write a test case.\n@mock.patch(\"os.path.getsize\")\n    def test_get_instance_disk_info_disk_file_is_empty(self, mock_getsize):\n        instance = objects.Instance(**self.test_instance)\n        dummyxml = (\"<domain type='kvm'><name>instance-0000000a</name>\"\n                    \"<devices>\"\n                    \"<disk type='file' device='cdrom'>\"\n                    \"<driver name='qemu' type='raw' cache='none'/>\"\n                    \"<target dev='hda' bus='ide'/></disk>\"\n                    \"<disk type='block' device='disk'>\"\n                    \"<driver name='qemu' type='qcow2' cache='none'/>\"\n                    \"<source dev='/dev/mapper/mpathp'/>\"\n                    \"<target dev='vda' bus='virtio'/></disk>\"\n                    \"</devices></domain>\")\n\n        block_device_info = \\\n            {'block_device_mapping':\n                [{'guest_format': None, 'boot_index': 0,\n                 'mount_device': u'/dev/vda',\n                 'connection_info': {u'driver_volume_type': u'iscsi'},\n                 'disk_bus': u'virtio', 'device_type': u'disk',\n                 'delete_on_termination': False}],\n             'swap': None, 'ephemerals': [], 'root_device_name': u'/dev/vda'}\n\n        domain_mock = mock.Mock()\n        domain_mock.XMLDesc = mock.Mock()\n        domain_mock.XMLDesc.return_value = dummyxml\n\n        def fake_lookup(instance_name):\n            if instance_name == instance.name:\n                return domain_mock\n        self.create_fake_libvirt_mock(lookupByName=fake_lookup)\n\n        mock_getsize.return_value = 1000\n\n        drvr = libvirt_driver.LibvirtDriver(fake.FakeVirtAPI(), False)\n        info = drvr.get_instance_disk_info(instance,\n                                           block_device_info=block_device_info)\n        info = jsonutils.loads(info)\n        self.assertEqual([], info)\n\n\n4. run this unit test, and it will fail.\nTraceback (most recent call last):\n  File \"/home/nova/.venv/lib/python2.7/site-packages/mock/mock.py\", line 1305, in patched\n    return func(*args, **keywargs)\n  File \"/home/nova/nova/tests/unit/virt/libvirt/test_driver.py\", line 8779, in test_get_instance_disk_info_disk_file_is_empty\n    self.assertEqual([], info)\n  File \"/home/nova/.venv/lib/python2.7/site-packages/testtools/testcase.py\", line 362, in assertEqual\n    self.assertThat(observed, matcher, message)\n  File \"/home/nova/.venv/lib/python2.7/site-packages/testtools/testcase.py\", line 447, in assertThat\n    raise mismatch_error\ntesttools.matchers._impl.MismatchError: !=:\nreference = []\nactual    = [{u'backing_file': u'',\n  u'disk_size': 1000,\n  u'over_committed_disk_size': 0,\n  u'path': u'/dev/mapper/mpathp',\n  u'type': u'raw',\n  u'virt_disk_size': 1000}]", 
    "tags": [], 
    "importance": "Undecided", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1561900", 
    "owner": "https://api.launchpad.net/1.0/~hanrong", 
    "id": 1561900, 
    "index": 6120, 
    "created": "2016-03-25 08:56:53.117308+00:00", 
    "title": "_get_instance_disk_info in libvirt/driver.py need to refactor", 
    "comments": [
        {
            "content": "1. [root@yindesheng nova]# git log\ncommit e80376e3796cc20a400db423b828a98de6f528e6\nMerge: b27b063 cabe2df\nAuthor: Jenkins <email address hidden>\nDate:   Fri Mar 25 00:29:05 2016 +0000\n\n    Merge \"Include CellMapping in InstanceMappin\n\n2.  I am not sure whether this is a bug, but I think this code could be improved.\n\ndef _get_instance_disk_info(self, instance_name, xml,\n                                block_device_info=None):\n        \"\"\"Get the non-volume disk information from the domain xml\n\n        :param str instance_name: the name of the instance (domain)\n        :param str xml: the libvirt domain xml for the instance\n        :param dict block_device_info: block device info for BDMs\n        :returns disk_info: list of dicts with keys:\n\n          * 'type': the disk type (str)\n          * 'path': the disk path (str)\n          * 'virt_disk_size': the virtual disk size (int)\n          * 'backing_file': backing file of a disk image (str)\n          * 'disk_size': physical disk size (int)\n          * 'over_committed_disk_size': virt_disk_size - disk_size or 0\n        \"\"\"\n        block_device_mapping = driver.block_device_info_get_mapping(\n            block_device_info)\n\n        volume_devices = set()\n        for vol in block_device_mapping:\n            disk_dev = vol['mount_device'].rpartition(\"/\")[2]\n            volume_devices.add(disk_dev)\n\n        disk_info = []\n        doc = etree.fromstring(xml)\n        disk_nodes = doc.findall('.//devices/disk')\n        path_nodes = doc.findall('.//devices/disk/source')\n        driver_nodes = doc.findall('.//devices/disk/driver')\n        target_nodes = doc.findall('.//devices/disk/target')\n\n        for cnt, path_node in enumerate(path_nodes):\n            disk_type = disk_nodes[cnt].get('type')\n            path = path_node.get('file') or path_node.get('dev')\n            target = target_nodes[cnt].attrib['dev']\n\n            if not path:\n                LOG.debug('skipping disk for %s as it does not have a path',\n                          instance_name)\n                continue\n\n            if disk_type not in ['file', 'block']:\n                LOG.debug('skipping disk because it looks like a volume', path)\n                continue\n\n            if target in volume_devices:\n                LOG.debug('skipping disk %(path)s (%(target)s) as it is a '\n                          'volume', {'path': path, 'target': target})\n                continue\n\n            # get the real disk size or\n            # raise a localized error if image is unavailable\n            if disk_type == 'file':\n                dk_size = int(os.path.getsize(path))\n            elif disk_type == 'block' and block_device_info:\n                dk_size = lvm.get_volume_size(path)\n            else:\n                LOG.debug('skipping disk %(path)s (%(target)s) - unable to '\n                          'determine if volume',\n                          {'path': path, 'target': target})\n                continue\n\n            disk_type = driver_nodes[cnt].get('type')\n            if disk_type == \"qcow2\":\n                backing_file = libvirt_utils.get_disk_backing_file(path)\n                virt_size = disk.get_disk_size(path)\n                over_commit_size = int(virt_size) - dk_size\n            else:\n                backing_file = \"\"\n                virt_size = dk_size\n                over_commit_size = 0\n\n            disk_info.append({'type': disk_type,\n                              'path': path,\n                              'virt_disk_size': virt_size,\n                              'backing_file': backing_file,\n                              'disk_size': dk_size,\n                              'over_committed_disk_size': over_commit_size})\n        return disk_info\n\n\n3. in some cases, len(disk_nodes)  is  not equal len(path_nodes), I write a test case.\n@mock.patch(\"os.path.getsize\")\n    def test_get_instance_disk_info_disk_file_is_empty(self, mock_getsize):\n        instance = objects.Instance(**self.test_instance)\n        dummyxml = (\"<domain type='kvm'><name>instance-0000000a</name>\"\n                    \"<devices>\"\n                    \"<disk type='file' device='cdrom'>\"\n                    \"<driver name='qemu' type='raw' cache='none'/>\"\n                    \"<target dev='hda' bus='ide'/></disk>\"\n                    \"<disk type='block' device='disk'>\"\n                    \"<driver name='qemu' type='qcow2' cache='none'/>\"\n                    \"<source dev='/dev/mapper/mpathp'/>\"\n                    \"<target dev='vda' bus='virtio'/></disk>\"\n                    \"</devices></domain>\")\n\n        block_device_info = \\\n            {'block_device_mapping':\n                [{'guest_format': None, 'boot_index': 0,\n                 'mount_device': u'/dev/vda',\n                 'connection_info': {u'driver_volume_type': u'iscsi'},\n                 'disk_bus': u'virtio', 'device_type': u'disk',\n                 'delete_on_termination': False}],\n             'swap': None, 'ephemerals': [], 'root_device_name': u'/dev/vda'}\n\n        domain_mock = mock.Mock()\n        domain_mock.XMLDesc = mock.Mock()\n        domain_mock.XMLDesc.return_value = dummyxml\n\n        def fake_lookup(instance_name):\n            if instance_name == instance.name:\n                return domain_mock\n        self.create_fake_libvirt_mock(lookupByName=fake_lookup)\n\n        mock_getsize.return_value = 1000\n\n        drvr = libvirt_driver.LibvirtDriver(fake.FakeVirtAPI(), False)\n        info = drvr.get_instance_disk_info(instance,\n                                           block_device_info=block_device_info)\n        info = jsonutils.loads(info)\n        self.assertEqual([], info)\n\n\n4. run this unit test, and it will fail.\nTraceback (most recent call last):\n  File \"/home/nova/.venv/lib/python2.7/site-packages/mock/mock.py\", line 1305, in patched\n    return func(*args, **keywargs)\n  File \"/home/nova/nova/tests/unit/virt/libvirt/test_driver.py\", line 8779, in test_get_instance_disk_info_disk_file_is_empty\n    self.assertEqual([], info)\n  File \"/home/nova/.venv/lib/python2.7/site-packages/testtools/testcase.py\", line 362, in assertEqual\n    self.assertThat(observed, matcher, message)\n  File \"/home/nova/.venv/lib/python2.7/site-packages/testtools/testcase.py\", line 447, in assertThat\n    raise mismatch_error\ntesttools.matchers._impl.MismatchError: !=:\nreference = []\nactual    = [{u'backing_file': u'',\n  u'disk_size': 1000,\n  u'over_committed_disk_size': 0,\n  u'path': u'/dev/mapper/mpathp',\n  u'type': u'raw',\n  u'virt_disk_size': 1000}]", 
            "date_created": "2016-03-25 08:56:53.117308+00:00", 
            "author": "https://api.launchpad.net/1.0/~hanrong"
        }, 
        {
            "content": "When I modify nova code to do a new feature which hot plugin cd.\nI need to create a cdrom disk device with a disk file that is not existed, and the xml in unit test is generated ", 
            "date_created": "2016-03-25 09:37:16.498774+00:00", 
            "author": "https://api.launchpad.net/1.0/~hanrong"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/297598", 
            "date_created": "2016-03-25 09:45:52.665197+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "You don't need to open a bug report for refactoring actions. Just provide a change and we'll look thru this.", 
            "date_created": "2016-03-29 10:22:01.018471+00:00", 
            "author": "https://api.launchpad.net/1.0/~sylvain-bauza"
        }
    ]
}
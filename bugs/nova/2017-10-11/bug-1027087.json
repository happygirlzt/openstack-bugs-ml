{
    "status": "Invalid", 
    "last_updated": "2012-08-10 12:07:41.853330+00:00", 
    "description": "Not sure if this really counts as a bug or not, but it sems too small to consider as a blue print.\n\nWhen an instance enters the deleting state, which is does in the API layer, there is nothing else the user can do except a further delete request.  \n\nHowever if the compute manager is down for some reason (which may be why the user is deleting the instance) then it can take some time before instance becomes deleted.  During this time the user may not be able to launch a replacment instance, as the deleting instance is still counted against thier quota. \n\nThe fix to exclude deleting VMs from quota checks should be configured by a flag so that the cloud provide can decide whcih behaviour they want.\n\nPS:  Checked with Kevin Mitchell and deleting instances are still included in quota checks in the new quota refactoring.", 
    "tags": [], 
    "importance": "Undecided", 
    "heat": 6, 
    "link": "https://bugs.launchpad.net/nova/+bug/1027087", 
    "owner": "https://api.launchpad.net/1.0/~eglynn", 
    "id": 1027087, 
    "index": 2961, 
    "created": "2012-07-20 13:54:56.716404+00:00", 
    "title": "Quota counts always include VMs in Deleting state", 
    "comments": [
        {
            "content": "Not sure if this really counts as a bug or not, but it sems too small to consider as a blue print.\n\nWhen an instance enters the deleting state, which is does in the API layer, there is nothing else the user can do except a further delete request.  \n\nHowever if the compute manager is down for some reason (which may be why the user is deleting the instance) then it can take some time before instance becomes deleted.  During this time the user may not be able to launch a replacment instance, as the deleting instance is still counted against thier quota. \n\nThe fix to exclude deleting VMs from quota checks should be configured by a flag so that the cloud provide can decide whcih behaviour they want.\n\nPS:  Checked with Kevin Mitchell and deleting instances are still included in quota checks in the new quota refactoring.", 
            "date_created": "2012-07-20 13:54:56.716404+00:00", 
            "author": "https://api.launchpad.net/1.0/~philip-day"
        }, 
        {
            "content": "Phil, what version are you using?\n\nThis issue no longer exists since the quota re-architecting in Folsom-1, as the quota usages are updated in the api layer *before* the terminate_instance message is RPC'd to the compute node.", 
            "date_created": "2012-08-09 14:07:30.696929+00:00", 
            "author": "https://api.launchpad.net/1.0/~eglynn"
        }, 
        {
            "content": "Hi Glynn,\r\n\r\nI'm looking at the latest code in trunk.   \r\n\r\nThe reservation is created at the start of the api call, but negative reservations are not considered when calcualtiong quotas, hence the VM being deleted will continue to be counted until the negative reservation is committed.\r\n\r\nIn the current code that commit occurs right after the rcp call, but I've raised another bug in this as that in turn means that the quota will be decemented multiple times if there are multiple API calls to delete the same instance before it gets deleted(for exampel if the compute manager is down)  #1027187\r\n\r\nWhen that is fixed (by passing the negative reservation down to the compute manager) then the issue of the negative reservations not being used in quota calculations will expode this issue - i.e if the compute node is down a user can't complete the deletion of her instance, and it will continue to count against thier quota.\r\n\r\nIncluding negative reservations in the quota calculations doesn't seem to be the way to go on this, as there could be multiple negative reservations for the same VM - hence it seems better (to me) to just exclude VMs with a task_state of Deleting - as from that point onwards there is nothing the user can do with the instance. \r\n", 
            "date_created": "2012-08-09 14:38:22.289096+00:00", 
            "author": "https://api.launchpad.net/1.0/~philip-day"
        }, 
        {
            "content": "Hi Glynn,\r\n\r\nJust reviewed your fix for the for the double deletion issue, and I think the way you've fixed that also address this issue.\r\n\r\nI was assuming that the fix would require passing the -ve reservation down to the compute node, hence there could be a long window before the reservation is committed.   With your fix of only doing the reservation if task_state != deteing the reservaiton only exists for a short time, so the issue I envisaged doesn't exist any more\r\n\r\nCheers,\r\nPhil   ", 
            "date_created": "2012-08-09 16:05:46.234942+00:00", 
            "author": "https://api.launchpad.net/1.0/~philip-day"
        }, 
        {
            "content": "Hi Phil,\n\nI see now where you're coming from now and agree that the proposed fix for bug #1027187 will avoid the pit-fall you've envisaged.\n\nCheers,\nEoghan", 
            "date_created": "2012-08-09 17:30:10.804131+00:00", 
            "author": "https://api.launchpad.net/1.0/~eglynn"
        }
    ]
}
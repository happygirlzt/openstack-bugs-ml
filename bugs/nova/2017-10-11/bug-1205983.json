{
    "status": "Won't Fix", 
    "last_updated": "2014-09-18 23:44:54.529904+00:00", 
    "description": "In  cinder.capabilities_filter, we uses a \":\" as a delimiter.  It would causes a problem when attempting to convert the capability in an extra-spec to a REST  XML object.\n\nWhen we create one volume-type with extra_specs via REST or list all of volume-type as below:\n\nPOST /types\nrequest body :{\"volume_type\": {\"extra_specs\": {\"vendor_name\": \"Open Source\", \"capabilities:volume_backend_name\":\"iSCSI\"}, \"name\": \"volume-type-001\"}}\n\nit will throw the following error:\n\n07-10 17:19 cinder.api.middleware.fault ERROR    Caught error: Invalid tag name u'capabilities:volume_backend_name'\nTraceback (most recent call last):\n  File \"/usr/lib/python2.6/site-packages/cinder/api/middleware/fault.py\", line 76, in __call__\n    return req.get_response(self.application)\n  File \"/usr/lib/python2.6/site-packages/webob/request.py\", line 1296, in send\n    application, catch_exc_info=False)\n  File \"/usr/lib/python2.6/site-packages/webob/request.py\", line 1260, in call_application\n    app_iter = application(self.environ, start_response)\n  File \"/usr/lib/python2.6/site-packages/webob/dec.py\", line 144, in __call__\n    return resp(environ, start_response)\n  File \"/usr/lib/python2.6/site-packages/keystoneclient/middleware/auth_token.py\", line 451, in __call__\n    return self.app(env, start_response)\n  File \"/usr/lib/python2.6/site-packages/webob/dec.py\", line 144, in __call__\n    return resp(environ, start_response)\n  File \"/usr/lib/python2.6/site-packages/webob/dec.py\", line 144, in __call__\n    return resp(environ, start_response)\n  File \"/usr/lib/python2.6/site-packages/routes/middleware.py\", line 131, in __call__\n    response = self.app(environ, start_response)\n  File \"/usr/lib/python2.6/site-packages/webob/dec.py\", line 144, in __call__\n    return resp(environ, start_response)\n  File \"/usr/lib/python2.6/site-packages/webob/dec.py\", line 130, in __call__\n    resp = self.call_func(req, *args, **self.kwargs)\n  File \"/usr/lib/python2.6/site-packages/webob/dec.py\", line 195, in call_func\n    return self.func(req, *args, **kwargs)\n  File \"/usr/lib/python2.6/site-packages/cinder/api/openstack/wsgi.py\", line 831, in __call__\n    content_type, body, accept)\n  File \"/usr/lib/python2.6/site-packages/cinder/api/openstack/wsgi.py\", line 916, in _process_stack\n    self.default_serializers)\n  File \"/usr/lib/python2.6/site-packages/cinder/api/openstack/wsgi.py\", line 525, in serialize\n    response.body = serializer.serialize(self.obj)\n  File \"/usr/lib/python2.6/site-packages/cinder/api/xmlutil.py\", line 591, in serialize\n    elem = self.make_tree(obj)\n  File \"/usr/lib/python2.6/site-packages/cinder/api/xmlutil.py\", line 619, in make_tree\n    return self._serialize(None, obj, siblings, nsmap)\n  File \"/usr/lib/python2.6/site-packages/cinder/api/xmlutil.py\", line 574, in _serialize\n    self._serialize(elem, datum, nieces)\n  File \"/usr/lib/python2.6/site-packages/cinder/api/xmlutil.py\", line 574, in _serialize\n    self._serialize(elem, datum, nieces)\n  File \"/usr/lib/python2.6/site-packages/cinder/api/xmlutil.py\", line 574, in _serialize\n    self._serialize(elem, datum, nieces)\n  File \"/usr/lib/python2.6/site-packages/cinder/api/xmlutil.py\", line 555, in _serialize\n    elems = siblings[0].render(parent, obj, siblings[1:], nsmap)\n  File \"/usr/lib/python2.6/site-packages/cinder/api/xmlutil.py\", line 427, in render\n    elems.append((self._render(parent, datum, patches, nsmap), datum))\n  File \"/usr/lib/python2.6/site-packages/cinder/api/xmlutil.py\", line 370, in _render\n    elem = etree.Element(tagname, nsmap=nsmap)\n  File \"lxml.etree.pyx\", line 2346, in lxml.etree.Element (src/lxml/lxml.etree.c:46617)\n  File \"apihelpers.pxi\", line 113, in lxml.etree._makeElement (src/lxml/lxml.etree.c:10475)\n  File \"apihelpers.pxi\", line 1405, in lxml.etree._tagValidOrRaise (src/lxml/lxml.etree.c:21541)\nValueError: Invalid tag name u'capabilities:volume_backend_name'\n\nThe root cause is: etree.Element can not parse \"xx:xx\" strings, such as \"capabilities:volume_backend_name\".\n\nFrom capabilities_filter.py, if we change the filter \":\" to \".\", as follow:\n\nscope = key.split(':') --> scope = key.split('.'), we can avoid  this issue, also not impact the filter.", 
    "tags": [
        "api", 
        "cinder", 
        "filter"
    ], 
    "importance": "Wishlist", 
    "heat": 14, 
    "link": "https://bugs.launchpad.net/nova/+bug/1205983", 
    "owner": "https://api.launchpad.net/1.0/~chendi-xue", 
    "id": 1205983, 
    "index": 1394, 
    "created": "2013-07-29 03:42:31.827593+00:00", 
    "title": "capabilities filter uses ':' as a delimiter, which is unsupported by REST XML", 
    "comments": [
        {
            "content": "In  cinder.capabilities_filter, we uses a \":\" as a delimiter.  It would causes a problem when attempting to convert the capability in an extra-spec to a REST  XML object.\n\nWhen we create one volume-type with extra_specs via REST or list all of volume-type as below:\n\nPOST /types\nrequest body :{\"volume_type\": {\"extra_specs\": {\"vendor_name\": \"Open Source\", \"capabilities:volume_backend_name\":\"iSCSI\"}, \"name\": \"volume-type-001\"}}\n\nit will throw the following error:\n\n07-10 17:19 cinder.api.middleware.fault ERROR    Caught error: Invalid tag name u'capabilities:volume_backend_name'\nTraceback (most recent call last):\n  File \"/usr/lib/python2.6/site-packages/cinder/api/middleware/fault.py\", line 76, in __call__\n    return req.get_response(self.application)\n  File \"/usr/lib/python2.6/site-packages/webob/request.py\", line 1296, in send\n    application, catch_exc_info=False)\n  File \"/usr/lib/python2.6/site-packages/webob/request.py\", line 1260, in call_application\n    app_iter = application(self.environ, start_response)\n  File \"/usr/lib/python2.6/site-packages/webob/dec.py\", line 144, in __call__\n    return resp(environ, start_response)\n  File \"/usr/lib/python2.6/site-packages/keystoneclient/middleware/auth_token.py\", line 451, in __call__\n    return self.app(env, start_response)\n  File \"/usr/lib/python2.6/site-packages/webob/dec.py\", line 144, in __call__\n    return resp(environ, start_response)\n  File \"/usr/lib/python2.6/site-packages/webob/dec.py\", line 144, in __call__\n    return resp(environ, start_response)\n  File \"/usr/lib/python2.6/site-packages/routes/middleware.py\", line 131, in __call__\n    response = self.app(environ, start_response)\n  File \"/usr/lib/python2.6/site-packages/webob/dec.py\", line 144, in __call__\n    return resp(environ, start_response)\n  File \"/usr/lib/python2.6/site-packages/webob/dec.py\", line 130, in __call__\n    resp = self.call_func(req, *args, **self.kwargs)\n  File \"/usr/lib/python2.6/site-packages/webob/dec.py\", line 195, in call_func\n    return self.func(req, *args, **kwargs)\n  File \"/usr/lib/python2.6/site-packages/cinder/api/openstack/wsgi.py\", line 831, in __call__\n    content_type, body, accept)\n  File \"/usr/lib/python2.6/site-packages/cinder/api/openstack/wsgi.py\", line 916, in _process_stack\n    self.default_serializers)\n  File \"/usr/lib/python2.6/site-packages/cinder/api/openstack/wsgi.py\", line 525, in serialize\n    response.body = serializer.serialize(self.obj)\n  File \"/usr/lib/python2.6/site-packages/cinder/api/xmlutil.py\", line 591, in serialize\n    elem = self.make_tree(obj)\n  File \"/usr/lib/python2.6/site-packages/cinder/api/xmlutil.py\", line 619, in make_tree\n    return self._serialize(None, obj, siblings, nsmap)\n  File \"/usr/lib/python2.6/site-packages/cinder/api/xmlutil.py\", line 574, in _serialize\n    self._serialize(elem, datum, nieces)\n  File \"/usr/lib/python2.6/site-packages/cinder/api/xmlutil.py\", line 574, in _serialize\n    self._serialize(elem, datum, nieces)\n  File \"/usr/lib/python2.6/site-packages/cinder/api/xmlutil.py\", line 574, in _serialize\n    self._serialize(elem, datum, nieces)\n  File \"/usr/lib/python2.6/site-packages/cinder/api/xmlutil.py\", line 555, in _serialize\n    elems = siblings[0].render(parent, obj, siblings[1:], nsmap)\n  File \"/usr/lib/python2.6/site-packages/cinder/api/xmlutil.py\", line 427, in render\n    elems.append((self._render(parent, datum, patches, nsmap), datum))\n  File \"/usr/lib/python2.6/site-packages/cinder/api/xmlutil.py\", line 370, in _render\n    elem = etree.Element(tagname, nsmap=nsmap)\n  File \"lxml.etree.pyx\", line 2346, in lxml.etree.Element (src/lxml/lxml.etree.c:46617)\n  File \"apihelpers.pxi\", line 113, in lxml.etree._makeElement (src/lxml/lxml.etree.c:10475)\n  File \"apihelpers.pxi\", line 1405, in lxml.etree._tagValidOrRaise (src/lxml/lxml.etree.c:21541)\nValueError: Invalid tag name u'capabilities:volume_backend_name'\n\nThe root cause is: etree.Element can not parse \"xx:xx\" strings, such as \"capabilities:volume_backend_name\".\n\nFrom capabilities_filter.py, if we change the filter \":\" to \".\", as follow:\n\nscope = key.split(':') --> scope = key.split('.'), we can avoid  this issue, also not impact the filter.", 
            "date_created": "2013-07-29 03:42:31.827593+00:00", 
            "author": "https://api.launchpad.net/1.0/~dzyu"
        }, 
        {
            "content": "I think this needs to be a global change.  Other areas depend on the delimiter for the scope of the extra-spec.  The storwize_svc driver, for example uses the delimiter.  I'm sure other areas of the code do as well.\n\nin capabilities_filter.py, change scope = key.split(':') --> scope = key.split('.')\nalso need some change in solidfire.py\n", 
            "date_created": "2013-07-29 03:52:30.505023+00:00", 
            "author": "https://api.launchpad.net/1.0/~dzyu"
        }, 
        {
            "content": "Can you work around this issue?  You proposed fix can be very big and impact at least two projects - Cinder and Nova.  Also, keep in mind that people has been using this since Folsom (Nova), Grizzly (Cinder), any fix should ensure backwards compatibility, e.g. not to break end-users setting which has already used ':' as delimiter.", 
            "date_created": "2013-07-29 04:22:28.993239+00:00", 
            "author": "https://api.launchpad.net/1.0/~zhiteng-huang"
        }, 
        {
            "content": "Yes, I know it would be one global change, it will impact cinder and nova. Since we can not input  extra-spec  with  \"capabilities:volume_backend_name\" format in REST and XML, so why we still use ':' as delimiter as capabilities filter? it should be wrong.", 
            "date_created": "2013-07-29 05:15:49.182001+00:00", 
            "author": "https://api.launchpad.net/1.0/~dzyu"
        }, 
        {
            "content": "Like it or not, ':' has been used since capabilities filter has been introduced.  Unless your fix is backwards compatible, there's no point fixing this.  \n\nI am not familiar with either REST or XML.  Could you please elaborate a bit more on how to reproduce this bug? ", 
            "date_created": "2013-07-29 06:59:09.041850+00:00", 
            "author": "https://api.launchpad.net/1.0/~zhiteng-huang"
        }, 
        {
            "content": "Hi Zhiteng,\n\nBut most of OpenStack consumer will use REST api to access or operate OpenStack.\n\nWhen we create one new volume-type as below test steps:\nurl=http://9.111.114.56:8776/v1/7ed05372197844f3b481c3d8bf2e4360/types\nwith \nrequest body :{\"volume_type\": {\"extra_specs\": {\"vendor_name\": \"Open Source\",\"capabilities:volume_backend_name\":\"iSCSI\"}, \"name\": \"volume-type-827150\"}}\n\nDue to REST/XML can not parse \"XXX:XXX\" tag name string, it will be throw the above error message.\n\nBase on our current design for the delimiter of extra-spec strings, the filter should can be handle such \"XXX:XXX\" string, change \"XXX:XXX\" to \"XXX\", but from REST or XML, we do not support such tag name, we can not create volume-type with such tag name.\n\nOur capabilities filter use ':' to handle 'extra_specs; in volume-type, if we can not create such  'extra_specs' via REST/XML, why we need to use such  capabilities filter, it lost its function.\n\nI just think change the \":\" to a \".\", can make the  capabilities filter work as well.\n\n\n", 
            "date_created": "2013-07-29 09:23:17.960068+00:00", 
            "author": "https://api.launchpad.net/1.0/~dzyu"
        }, 
        {
            "content": "I am not sure how to reproduce the bug, but I was able to create a volume with scoped extra specs using ':' as delimiter:\n\nzhithuang@ubuntu:~$ curl -i http://172.16.240.128:8776/v1/23ab2751bd3a4dd3b1e50826548814bf/types -X POST -H \"X-Auth-Project-Id: demo\" -H \"User-Agent: python-cinderclient\" -H \"Content-Type: application/json\" -H \"Accept: application/json\" -H \"X-Auth-Token: XXX\" -d '{\"volume_type\": {\"name\": \"test_scope1\", \"extra_specs\": {\"scope:key1\": \"value1\"}}}'\nHTTP/1.1 200 OK\nX-Compute-Request-Id: req-6c83249d-19a9-4c5e-a357-dbe35d1ac35e\nContent-Type: application/json\nContent-Length: 127\nDate: Mon, 29 Jul 2013 09:54:46 GMT\n\n{\"volume_type\": {\"extra_specs\": {\"scope:key1\": \"value1\"}, \"name\": \"test_scope1\", \"id\": \"8c5f60c7-8789-49aa-878d-11d4b33ff6b2\"}}\n\nzhithuang@ubuntu:~$ cinder type-list\n+--------------------------------------+-------------+\n|                  ID                  |     Name    |\n+--------------------------------------+-------------+\n| 8c5f60c7-8789-49aa-878d-11d4b33ff6b2 | test_scope1 |\n+--------------------------------------+-------------+\nzhithuang@ubuntu:~$ cinder extra-specs-list\n+--------------------------------------+-------------+----------------------------+\n|                  ID                  |     Name    |        extra_specs          |\n+--------------------------------------+-------------+----------------------------+\n| 8c5f60c7-8789-49aa-878d-11d4b33ff6b2 | test_scope1 | {u'scope:key1': u'value1'} |\n+--------------------------------------+-------------+----------------------------+", 
            "date_created": "2013-07-29 09:58:16.402715+00:00", 
            "author": "https://api.launchpad.net/1.0/~zhiteng-huang"
        }, 
        {
            "content": "Here's the example using the exact value you used in bug description:\n\nzhithuang@ubuntu:~$ curl -i http://172.16.240.128:8776/v1/23ab2751bd3a4dd3b1e50826548814bf/types -X POST -H \"X-Auth-Project-Id: demo\" -H \"User-Agent: python-cinderclient\" -H \"Content-Type: application/json\" -H \"Accept: application/json\" -H \"X-Auth-Token: XXX\" -d '{\"volume_type\": {\"extra_specs\": {\"vendor_name\": \"Open Source\",\"capabilities:volume_backend_name\":\"iSCSI\"}, \"name\": \"volume-type-827150\"}}'\nHTTP/1.1 200 OK\nX-Compute-Request-Id: req-fcc26732-9d74-4454-a6d8-b13f7ea1b0f6\nContent-Type: application/json\nContent-Length: 185\nDate: Mon, 29 Jul 2013 09:59:59 GMT\n\n{\"volume_type\": {\"extra_specs\": {\"capabilities:volume_backend_name\": \"iSCSI\", \"vendor_name\": \"Open Source\"}, \"name\": \"volume-type-827150\", \"id\": \"62e2fb25-cec7-4a0d-bb83-93bdf42bbc35\"}}zhithuang@ubuntu:~$\nzhithuang@ubuntu:~$\nzhithuang@ubuntu:~$\nzhithuang@ubuntu:~$ cinder type-list\n+--------------------------------------+--------------------+\n|                  ID                  |        Name        |\n+--------------------------------------+--------------------+\n| 62e2fb25-cec7-4a0d-bb83-93bdf42bbc35 | volume-type-827150 |\n| 8c5f60c7-8789-49aa-878d-11d4b33ff6b2 |    test_scope1     |\n+--------------------------------------+--------------------+\nzhithuang@ubuntu:~$ cinder extra-specs-list\n+--------------------------------------+--------------------+---------------------------------------------------------------------------------+\n|                  ID                  |        Name        |                                   extra_specs                                   | qos_specs |\n+--------------------------------------+--------------------+---------------------------------------------------------------------------------+\n| 62e2fb25-cec7-4a0d-bb83-93bdf42bbc35 | volume-type-827150 | {u'capabilities:volume_backend_name': u'iSCSI', u'vendor_name': u'Open Source'} |\n| 8c5f60c7-8789-49aa-878d-11d4b33ff6b2 |    test_scope1     |                            {u'scope:key1': u'value1'}                           |\n+--------------------------------------+--------------------+---------------------------------------------------------------------------------+", 
            "date_created": "2013-07-29 10:02:23.749036+00:00", 
            "author": "https://api.launchpad.net/1.0/~zhiteng-huang"
        }, 
        {
            "content": "Hi Zhiteng,\n\nYou use the CLI command, it will be OK, no any error throw\n\nBut if you use REST/XML from web, this issue will be happened. ", 
            "date_created": "2013-07-29 10:35:40.517847+00:00", 
            "author": "https://api.launchpad.net/1.0/~dzyu"
        }, 
        {
            "content": "this is tricky, I see the point here, however I'm also concerned as we can't go back and break compatibility either.  I'm marking this as wishlist for now, I'd like to do some more research on this and better understand the issue and our options. ", 
            "date_created": "2013-07-30 02:36:38.978180+00:00", 
            "author": "https://api.launchpad.net/1.0/~john-griffith"
        }, 
        {
            "content": "Dazhao, can you provide a step-by-step instruction on how to reproduce this bug using REST/XML?  If this is a bug on server, it shouldn't matter how client (CLI/curl) is sending the request.  I'm very curious to learn the 'REST/XML' way to trigger this issue on Cinder server side.", 
            "date_created": "2013-07-30 03:07:46.700050+00:00", 
            "author": "https://api.launchpad.net/1.0/~zhiteng-huang"
        }, 
        {
            "content": "Hi Zhiteng,\n\nAt first, you need to install one Rest Client tool, such as RESTClient.\nAfter installed it,  follow the below steps:\n\n1) You need to find a token ID and to do that you need to first authenticate:\nPOST http://<openstackIP>:5000/v2.0/tokens\nContent-Type: application/json\n\n{\n  \"auth\": {\n    \"passwordCredentials\": {\n      \"username\": \"<openstack-name>\",\n      \"password\": \"<openstack-password>\"\n      }\n  }\n}\n\n2) then get the tenant ID, \nGET http://<openstackIP>:5000/v2.0/tenants\nContent-Type: application/json\nInclude header X-Auth-Token with id value from step one\n\n3) Authenticate with the tenant ID\nPOST http://<openstackIP>:5000/v2.0/tokens\nContent-Type: application/json\n\n{\n  \"auth\": {\n    \"passwordCredentials\": {\n      \"username\": \"<openstack-name>\",\n      \"password\": \"<openstack-passwork>\"\n      },\n     \"tenantId\": \"f0353dd0778440a59da54612fac28f8c\" (get this value from step#2)\n  }\n}\n\n\n4) from step#3, we can get one new token ID, update header X-Auth-Token with id value from step#3, then we can start to create or list volume-types, as below:\n\nCreate one new volume-type:\n\nPOST http://<openstackIP>:8776/v1/<tenant-id>/types\n\nrequest body :{\"volume_type\": {\"extra_specs\": {\"vendor_name\": \"Open Source\",\"capabilities:volume_backend_name\": \"iSCSI\"}, \"name\": \"volume-type-827150\"}}\n\nClick \"SEND\", the issue will be throw.\n\nAlso if we create one such volume-types via CLI command, when we list all of volume types via REST/XML, we also can get this issue.\n\nList all of volume types:\n\nGET http://<openstackIP>:8776/v1/<tenant-id>/types\n", 
            "date_created": "2013-07-30 08:46:34.657774+00:00", 
            "author": "https://api.launchpad.net/1.0/~dzyu"
        }, 
        {
            "content": "John, yes, the code change will be impact the backwards compatible, maybe we need to discuss the issue", 
            "date_created": "2013-07-30 09:04:37.323185+00:00", 
            "author": "https://api.launchpad.net/1.0/~dzyu"
        }, 
        {
            "content": "Dazhao,\n\nI've tried REST client addon for Firefox as well as 'Postman' extension for Chrome.  Postman works pretty well, but I did reproduce once using REST client addon.  My instinct is this could be an issue of client failed to compose valid HTTP request.  But I'm not a expert in this area, so I've asked help from Mike.  He should have more insights.\n\nBTW, here's two snapshots of successful request made by REST client addon: https://www.dropbox.com/s/ybl4w43h196em2l/Screen%20Shot%202013-07-31%20at%2012.18.47%20AM.png    https://www.dropbox.com/s/ml4lycpkucmrc77/Screen%20Shot%202013-07-30%20at%2010.40.08%20PM.png ", 
            "date_created": "2013-07-30 16:54:15.836338+00:00", 
            "author": "https://api.launchpad.net/1.0/~zhiteng-huang"
        }, 
        {
            "content": "Huang, I was able to reproduce this. You need to change your accept to application/xml.\n\nDazhao, I don't think anyone disagrees this should be fixed. I think we just want to be mindful of existing installations that are using json that have been building applications around sending a colon instead of a period.\n\nI really need to think about this a little longer.", 
            "date_created": "2013-07-31 00:45:54.030238+00:00", 
            "author": "https://api.launchpad.net/1.0/~thingee"
        }, 
        {
            "content": "Thanks Mike.  Yes, 'Accept: application/xml' is the key to reproduce this issue. ", 
            "date_created": "2013-07-31 03:08:07.461534+00:00", 
            "author": "https://api.launchpad.net/1.0/~zhiteng-huang"
        }, 
        {
            "content": "Dazhao, Yang Yu,\n\nCan we change XML serializer so that scoped keys are interpreted as nested tags to work around this issue?  Here's some examples in my mind: http://paste.openstack.org/show/42707/", 
            "date_created": "2013-07-31 04:52:31.292257+00:00", 
            "author": "https://api.launchpad.net/1.0/~zhiteng-huang"
        }, 
        {
            "content": "Zhiteng,\n\nI agree with you, thanks for your good idea. Refactor the XML serializer will fixed this issue, also not impact  backwards compatible.\n\nMike, what do you think about it?", 
            "date_created": "2013-07-31 09:17:28.069189+00:00", 
            "author": "https://api.launchpad.net/1.0/~dzyu"
        }, 
        {
            "content": "Zhiteng,\n@<email address hidden> \nI agree with your suggest, but I am not sure how to refactor the XML serializer in Cinder and Nova, can you give us some suggest about it?", 
            "date_created": "2013-08-06 09:06:20.315681+00:00", 
            "author": "https://api.launchpad.net/1.0/~dzyu"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/41463", 
            "date_created": "2013-08-12 16:28:07.467341+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/41463\nCommitted: http://github.com/openstack/cinder/commit/70d1ec67c19b1e7639c8bf658cb40a65878875a1\nSubmitter: Jenkins\nBranch:    master\n\ncommit 70d1ec67c19b1e7639c8bf658cb40a65878875a1\nAuthor: XueChendi <email address hidden>\nDate:   Tue Aug 13 00:25:43 2013 +0800\n\n    Interprete scoped key as nested tags\n    \n    Current codes in xml_util.py does not support REST xml\n    so well when one tagname contains delimiter, it fails\n    to be interpreted. So this patch is to interprete one\n    tagname like \"<a:b>1</a:b>\" as a nested tag like\n    \"<a><b>1</a></b>\".\n    \n    Fix bug:1205983\n    \n    Change-Id: Ia3e1f4d6b6a739898b51bf052a784fa36ab7695e\n", 
            "date_created": "2013-08-14 04:27:26.486224+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Fix proposed to branch: master\nReview: https://review.openstack.org/42612", 
            "date_created": "2013-08-19 11:02:13.598347+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }
    ]
}
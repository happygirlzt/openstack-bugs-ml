{
    "status": "Fix Released", 
    "last_updated": "2011-09-22 13:34:18.166433+00:00", 
    "description": "Please see question https://answers.launchpad.net/nova/+question/154771 for a bit more information on this bug.\n\nIn revision 1034, nova/virt/libvirt_conn.py add_filters_for_instance was changed. It used to have a nice check on the use of ipv6:\n\n2015 if FLAGS.use_ipv6:\n2016 self.iptables.ipv6['filter'].add_chain(chain_name)\n2017 ips_v6 = [ip['ip'] for (_, mapping) in network_info\n2018 for ip in mapping['ip6s']]\n2019\n2020 for ipv6_address in ips_v6:\n2021 self.iptables.ipv6['filter'].add_rule('local',\n2022 '-d %s -j $%s' %\n2023 (ipv6_address,\n2024 chain_name))\n\nBut now it assumes the use of ipv6:\n\n 2012 ips_v6 = [ip['ip'] for (_n, mapping) in network_info\n 2013 for ip in mapping['ip6s']]\n\nThe default behavior for ipv6 is off (i.e. --use_ipv6 flag defaults to false).  Every other use of the ip6s flag in libvirt_conn.py checks the use correctly, such as:\n\n201\tif FLAGS.use_ipv6:\n202\t    mapping['ip6s'] = [ip6_dict()]\n203\t    mapping['gateway6'] = network['gateway_v6']\n\n912\tif FLAGS.use_ipv6:\n913\t    address_v6 = mapping['ip6s'][0]['ip']", 
    "tags": [
        "regression"
    ], 
    "importance": "High", 
    "heat": 38, 
    "link": "https://bugs.launchpad.net/nova/+bug/773412", 
    "owner": "https://api.launchpad.net/1.0/~reldan", 
    "id": 773412, 
    "index": 403, 
    "created": "2011-04-29 16:34:16.761026+00:00", 
    "title": "Check for use of IPv6 missing", 
    "comments": [
        {
            "content": "Please see question https://answers.launchpad.net/nova/+question/154771 for a bit more information on this bug.\n\nIn revision 1034, nova/virt/libvirt_conn.py add_filters_for_instance was changed. It used to have a nice check on the use of ipv6:\n\n2015 if FLAGS.use_ipv6:\n2016 self.iptables.ipv6['filter'].add_chain(chain_name)\n2017 ips_v6 = [ip['ip'] for (_, mapping) in network_info\n2018 for ip in mapping['ip6s']]\n2019\n2020 for ipv6_address in ips_v6:\n2021 self.iptables.ipv6['filter'].add_rule('local',\n2022 '-d %s -j $%s' %\n2023 (ipv6_address,\n2024 chain_name))\n\nBut now it assumes the use of ipv6:\n\n 2012 ips_v6 = [ip['ip'] for (_n, mapping) in network_info\n 2013 for ip in mapping['ip6s']]\n\nThe default behavior for ipv6 is off (i.e. --use_ipv6 flag defaults to false).  Every other use of the ip6s flag in libvirt_conn.py checks the use correctly, such as:\n\n201\tif FLAGS.use_ipv6:\n202\t    mapping['ip6s'] = [ip6_dict()]\n203\t    mapping['gateway6'] = network['gateway_v6']\n\n912\tif FLAGS.use_ipv6:\n913\t    address_v6 = mapping['ip6s'][0]['ip']", 
            "date_created": "2011-04-29 16:34:16.761026+00:00", 
            "author": "https://api.launchpad.net/1.0/~graham-hemingway"
        }, 
        {
            "content": "I added this to 773308, but because it claims to be a duplicate of this one, I figured I should add it here as well:\n\n\nA very similar error appears to be happening when attempting to apply euca-authorize rules to running nodes.\n\nIf I start a new node in a group with existing rules, everything works as expected. However if I have a VM running in a group (let's say default), and I attempt to update or create a new rule in that group I receive the following exception in the nova-compute.log:\n\n2011-05-11 19:56:48,889 ERROR nova.exception [-] Uncaught exception\n(nova.exception): TRACE: Traceback (most recent call last):\n(nova.exception): TRACE: File \"/usr/lib/pymodules/python2.6/nova/exception.py\", line 87, in _wrap\n(nova.exception): TRACE: return f(*args, **kw)\n(nova.exception): TRACE: File \"/usr/lib/pymodules/python2.6/nova/compute/manager.py\", line 205, in refresh_security_group_rules\n(nova.exception): TRACE: return self.driver.refresh_security_group_rules(security_group_id)\n(nova.exception): TRACE: File \"/usr/lib/pymodules/python2.6/nova/virt/libvirt_conn.py\", line 1382, in refresh_security_group_rules\n(nova.exception): TRACE: self.firewall_driver.refresh_security_group_rules(security_group_id)\n(nova.exception): TRACE: File \"/usr/lib/pymodules/python2.6/nova/virt/libvirt_conn.py\", line 2173, in refresh_security_group_rules\n(nova.exception): TRACE: self.do_refresh_security_group_rules(security_group)\n(nova.exception): TRACE: File \"/usr/lib/pymodules/python2.6/nova/utils.py\", line 604, in inner\n(nova.exception): TRACE: retval = f(*args, **kwargs)\n(nova.exception): TRACE: File \"/usr/lib/pymodules/python2.6/nova/virt/libvirt_conn.py\", line 2180, in do_refresh_security_group_rules\n(nova.exception): TRACE: self.add_filters_for_instance(instance)\n(nova.exception): TRACE: File \"/usr/lib/pymodules/python2.6/nova/virt/libvirt_conn.py\", line 2044, in add_filters_for_instance(nova.exception): TRACE: network_info)(nova.exception): TRACE: File \"/usr/lib/pymodules/python2.6/nova/virt/libvirt_conn.py\", line 2018, in _filters_for_instance\n(nova.exception): TRACE: ips_v4 = [ip['ip'] for (_n, mapping) in network_info(nova.exception): TRACE: TypeError: 'NoneType' object is not iterable\n(nova.exception): TRACE:\n2011-05-11 19:56:48,890 ERROR nova [-] Exception during message handling\n(nova): TRACE: Traceback (most recent call last):\n(nova): TRACE: File \"/usr/lib/pymodules/python2.6/nova/rpc.py\", line 198, in _receive\n(nova): TRACE: rval = node_func(context=ctxt, **node_args)\n(nova): TRACE: File \"/usr/lib/pymodules/python2.6/nova/exception.py\", line 93, in _wrap\n(nova): TRACE: raise Error(str(e))\n(nova): TRACE: Error: 'NoneType' object is not iterable\n(nova): TRACE:\n", 
            "date_created": "2011-05-11 20:45:07.774498+00:00", 
            "author": "https://api.launchpad.net/1.0/~kbringard"
        }
    ]
}
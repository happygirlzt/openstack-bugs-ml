{
    "status": "Won't Fix", 
    "last_updated": "2014-08-22 05:26:18.913131+00:00", 
    "description": "To provision a VM, OpenStack:\n(1) copies the image over the network to the compute node in _base directory\n(2) If its a qcow2 image, it is converted to raw\n(3) Creates a copy of the raw using cp operation.\n(4) Creates qcow2 disks from the image in (3).\n\n(2) can eliminated using force_to_raw=False in nova.conf\n\nHowever, copying is a costly operation, if the image size is large. Image size can be large due to VM snapshotting, or for Windows images. Need to eliminate it. Can we simply create qcow2 disks from the image copied over the network? Something like:\n\nqemu-img create -o qcow2 new.img 10G -b image_from_network", 
    "tags": [
        "nova", 
        "provision"
    ], 
    "importance": "Wishlist", 
    "heat": 8, 
    "link": "https://bugs.launchpad.net/nova/+bug/1005956", 
    "owner": "None", 
    "id": 1005956, 
    "index": 1254, 
    "created": "2012-05-29 15:02:49.829129+00:00", 
    "title": "First VM provisioning is slow for large VM images", 
    "comments": [
        {
            "content": "To provision a VM, OpenStack:\n(1) copies the image over the network to the compute node in _base directory\n(2) If its a qcow2 image, it is converted to raw\n(3) Creates a copy of the raw using cp operation.\n(4) Creates qcow2 disks from the image in (3).\n\n(2) can eliminated using force_to_raw=False in nova.conf\n\nHowever, copying is a costly operation, if the image size is large. Image size can be large due to VM snapshotting, or for Windows images. Need to eliminate it. Can we simply create qcow2 disks from the image copied over the network? Something like:\n\nqemu-img create -o qcow2 new.img 10G -b image_from_network", 
            "date_created": "2012-05-29 15:02:49.829129+00:00", 
            "author": "https://api.launchpad.net/1.0/~salman-h"
        }, 
        {
            "content": "The copy of the raw is to allow different size disks.  If qemu-img supports resizing when it creates an image backed to another  file, then yes we could optimize it to work as you say.  Does it support such a thing?  We would also have to update the imagecache code to handle not having the <uuid>_<size> versions of the file.", 
            "date_created": "2012-05-30 23:54:09.027861+00:00", 
            "author": "https://api.launchpad.net/1.0/~vishvananda"
        }, 
        {
            "content": "Since this bug was filed a lot has been done to make this faster", 
            "date_created": "2014-08-22 05:26:05.080951+00:00", 
            "author": "https://api.launchpad.net/1.0/~jogo"
        }
    ]
}
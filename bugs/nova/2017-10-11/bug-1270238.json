{
    "status": "Opinion", 
    "last_updated": "2016-05-17 15:25:46.903069+00:00", 
    "description": "Currently libvirt driver doesn't support resizing disk down.\n\nDuring a resizing down all run well and the instance is updated to the new flavor with the new disk size.\nbut in real the disk is not resized and keep the original size.\n\nWe need to add the support of resizing down:\n1. resizing the fs\n2. resizing the image\n\nFor the step one we have to be sure we work with only one partition and we don't erase data.\n\nwhat to do for the support of ntfs?", 
    "tags": [
        "libvirt"
    ], 
    "importance": "Wishlist", 
    "heat": 46, 
    "link": "https://bugs.launchpad.net/nova/+bug/1270238", 
    "owner": "None", 
    "id": 1270238, 
    "index": 1477, 
    "created": "2014-01-17 17:34:45.020946+00:00", 
    "title": "libvirt driver doesn't support disk re-size down", 
    "comments": [
        {
            "content": "Currently libvirt driver doesn't support resizing disk down.\n\nDuring a resizing down all run well and the instance is updated to the new flavor with the new disk size.\nbut in real the disk is not resized and keep the original size.\n\nWe need to add the support of resizing down:\n1. resizing the fs\n2. resizing the image\n\nFor the step one we have to be sure we work with only one partition and we don't erase data.\n\nwhat to do for the support of ntfs?", 
            "date_created": "2014-01-17 17:34:45.020946+00:00", 
            "author": "https://api.launchpad.net/1.0/~sahid-ferdjaoui"
        }, 
        {
            "content": "Resizing down is much more trick to do and I'm not sure how general it is.\nAlso there is logic in place to reject images that are too large in the first place (for DoS reasons).\nSo do we really need to support this?", 
            "date_created": "2014-01-18 18:21:25.153239+00:00", 
            "author": "https://api.launchpad.net/1.0/~p-draigbrady"
        }, 
        {
            "content": "There is really no safe way to do this.  When resizing up, we can take a \"best effort\" approach in regards to anything having to do with the filesystem, which isn't the case with down.   Without shrinking the filesystem before said downward resize, we'll be destroying data.  Only AMIs are even structured to allow us to reliably do anything with the filesystem.\n\nThere are way too many ifs; this isn't something we should do.", 
            "date_created": "2014-01-19 05:35:33.061850+00:00", 
            "author": "https://api.launchpad.net/1.0/~rkhardalian"
        }, 
        {
            "content": "About the risk of the implementation, in the workflow of a resize, every modifications on the disk are doing in a copy. The user is asked to check if all run well: during this step the user can check the console-log and connect itself on the instance to check if all is OK.\n    if all is ok he just have to confirm the resize (resize-confirm).\n    if something wrong he can do a revert (resize-revert)\n\nThe implementation of xenapi seems to support this feature. For vmware, it is not implemented yet (only extend).\n\nOther things:\n   From the user point of view when he checks the details of his instance after doing a resize down It will see the new space of disk (ex: from 50Go to 20Go) but in real nothing has change, the disk is always 50Go. It could be a source of misunderstood.\n\n  From the provider point of view, he will now billed the user for a space allocated of 20Go but 50Go are allocated.\n\n  What happens about the scheduler when it will check the free space of an host?", 
            "date_created": "2014-01-19 11:38:19.611171+00:00", 
            "author": "https://api.launchpad.net/1.0/~sahid-ferdjaoui"
        }, 
        {
            "content": "Orthogonally but related, as pointed out the resize today will succeed and all references in the DB will be updated to the smaller size but the disk will remain the larger size.\n\nThis makes it impossible to accurately report on cloud allocation as the DB and API will now return an inaccurate result. We should consider actually making the resize fail during the prep phase if its a downgrade in size to prevent this type of reporting issue. ", 
            "date_created": "2014-02-05 19:37:24.010084+00:00", 
            "author": "https://api.launchpad.net/1.0/~cfb-n"
        }, 
        {
            "content": "Related fix proposed to branch: master\nReview: https://review.openstack.org/74739", 
            "date_created": "2014-02-19 14:47:26.595115+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "Reviewed:  https://review.openstack.org/74739\nCommitted: https://git.openstack.org/cgit/openstack/nova/commit/?id=6943f433bfb777a2eafccde2ef5c985c091b5bb9\nSubmitter: Jenkins\nBranch:    master\n\ncommit 6943f433bfb777a2eafccde2ef5c985c091b5bb9\nAuthor: Sahid Orentino Ferdjaoui <email address hidden>\nDate:   Wed Feb 19 19:41:32 2014 +0100\n\n    libvirt: raises exception when attempt to resize disk down\n    \n    Raises an exception when trying to resize an instance that needs to\n    resize the disk down.\n    \n    Change-Id: Ic0a0bede744a1aacd057c5db9de3307b61c525b4\n    Related-Bug: #1270238\n", 
            "date_created": "2014-03-19 00:59:47.278817+00:00", 
            "author": "https://api.launchpad.net/1.0/~hudson-openstack"
        }, 
        {
            "content": "This wishlist bug has been open a year without any activity. I'm going to move it to \"Opinion / Wishlist\", which is an easily-obtainable queue of older requests that have come on. \n\nIn case you want to work on that, consider writing a blueprints [1] and spec [2]. I'll recommend to read [3] if not yet done. The effort to implement the requested feature is then driven only by the blueprint (and spec).\n\nReferences:\n[1] https://blueprints.launchpad.net/nova/\n[2] https://github.com/openstack/nova-specs\n[3] https://wiki.openstack.org/wiki/Blueprints", 
            "date_created": "2016-05-17 15:25:46.385951+00:00", 
            "author": "https://api.launchpad.net/1.0/~mzoeller"
        }
    ]
}